================================= Creating a new test case ===============================
To add a test case, create a C++/Fortran file Test<number>.[cpp|F95]. For example, Test128.F95
or Test128.cpp.

Normally you will also need to add a user kernel subroutine declaration and definition
to the file 'UserKernels.cpp' (for C++) or 'UserKernels.F95' (for Fortran) found in the directory 
where you are running tests. This depends on the OP_PAR_LOOP (e.g. types of OP_DAT passed), so 
check before adding a new one because there might be one already that is sufficient.

============================== Where to put the new test case ============================
Several directories are organised below each supported language, intended to group similar
test cases. There are directories for OP_GBLs, directly accessed OP_DATs and indirectly
accessed OP_DATs.

Therefore, find the appropriate directory then add a line to the file 'testsToRun' with the 
following syntax:
TestCase (PASS|FAIL) (TestFile)+ 
where TestCase is a positive integer
      PASS|FAIL is the lexeme describing the expected result of the test
      TestFile is a C++/Fortran file associated with this test case

For instance:
12 FAIL Test12.F95 
says that test number 12 associated with Fortran file Test12.F95 is expected to fail.

===================================== Running the tests ===================================
To run the tests contained in a particular directory, use the 'runTests.py' Python script found 
in the 'OP2_ROSE_Fortran/scripts' directory.
Use '-h' to display its options. 

However, in general, to run all tests, use:
'python runTests.py --run'

To run specific test cases 12 and 128, for example, use:
'python runTests.py --run -T 12 -T 128'
Note that the test case number corresponds to the positive integer supplied in the 'testsToRun'
file and NOT the suffix of the fileName. 

To clean out temporary files, use:
'python runTests.py --clean'

When a test case should pass, the translator should generate a bunch of C++/Fortran files: these
are output into a sub-directory 'generatedFiles' such that each generated file has a prefix
Test<number> and a suffix File<number>.[cpp|F95]. A makefile, intended for the backend compiler, is
also generated for each test case (provided the test case should pass).

