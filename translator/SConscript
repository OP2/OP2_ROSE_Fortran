import os
from os import environ

# Set the number of jobs spawned to compile
SetOption('num_jobs', 4)

# Make sure that these environment variables exist
ROSE_HOME = 'ROSE_HOME'
BOOST_HOME = 'BOOST_HOME'

for var in [ROSE_HOME, BOOST_HOME]:
	try:
		environ[var]
	except KeyError:
		print ("The environment variable '" + var + "' is needed to compile and link but cannot be found.")
		Exit(1)

# Libraries and includes needed to compile
ROSE_LIB      = environ[ROSE_HOME] + os.sep + 'lib'
ROSE_INCLUDE  = environ[ROSE_HOME] + os.sep + 'include'
BOOST_INCLUDE = environ[BOOST_HOME] + os.sep + 'include'

for var in [ROSE_LIB, ROSE_INCLUDE, BOOST_INCLUDE]:
	if not os.path.isdir(var):
        	print ("The directory '" + var + "' is needed to compile and link but cannot be found.")
        	Exit(1)

# Source files to compile and paths to the include directories on which they depend
sourceFiles        = []
includeDirectories = [ROSE_INCLUDE, BOOST_INCLUDE]

# Walk every directory rooted with 'src' to find the source files and include directories
for path, dirs, files in os.walk(os.path.abspath(os.curdir + os.sep + 'src')):
	for file in files:
		fileBasename, fileExtension = os.path.splitext(file)
		fullPath = os.path.join(path, file)
		dirBasename = os.path.dirname(fullPath)
		
		# Append all C++ source files found
		if fileExtension == '.cpp' and fullPath not in sourceFiles:
			sourceFiles.append(fullPath)
		
		# If header files are found then the directory in which they are included needs to be passed 
		# on the g++ command line 
		elif fileExtension == '.h' and dirBasename not in includeDirectories:
			includeDirectories.append(dirBasename)

# Include directories and flags for g++
env = Environment (CPPPATH=includeDirectories,
		   		   CPPFLAGS=['-Wall', '-O2'])

# The target binary directory and name
binDir = 'bin'
target = 'translator'

# Compile command with library dependencies and library paths

env['ENV']['LD_LIBRARY_PATH'] = os.environ['LD_LIBRARY_PATH']

env.Program(binDir + os.sep + target,
	    	source  = sourceFiles,
	    	LIBPATH = [ROSE_LIB],
	    	LIBS    = ['rose'])
