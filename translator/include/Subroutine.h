/*
 * Written by Adam Betts and Carlo Bertolli
 *
 * This class models subroutines to be generated by the
 * compiler
 */

#ifndef SUBROUTINES_H
#define SUBROUTINES_H

#include <rose.h>
#include <Declarations.h>

class Subroutine
{
  protected:

    /*
     * ======================================================
     * The name of the generated subroutine
     * ======================================================
     */
    std::string subroutineName;

    /*
     * ======================================================
     * Access to this statement allows ROSE to build function
     * call expressions to the generated subroutine. This
     * is needed, for example, when patching the user-supplied
     * code
     * ======================================================
     */
    SgProcedureHeaderStatement * subroutineHeaderStatement;

    /*
     * ======================================================
     * The parameters of the newly created subroutine
     * ======================================================
     */
    SgFunctionParameterList * formalParameters;

    /*
     * ======================================================
     * The scope of the newly created subroutine
     * ======================================================
     */
    SgScopeStatement * subroutineScope;

    /*
     * ======================================================
     * Formal parameter declarations in the newly created
     * subroutine
     * ======================================================
     */
    std::map <std::string, SgVariableDeclaration *> formalParameterDeclarations;

    /*
     * ======================================================
     * Local variable declarations in the newly created
     * subroutine
     * ======================================================
     */
    std::map <std::string, SgVariableDeclaration *> localVariableDeclarations;

  protected:

    Subroutine (std::string const & subroutineName);

  public:

    /*
     * ======================================================
     * What is the name of the subroutine?
     * ======================================================
     */
    std::string const &
    getSubroutineName () const;

    /*
     * ======================================================
     * Returns the procedure header statement used internally
     * by ROSE in its abstract syntax tree
     * ======================================================
     */
    SgProcedureHeaderStatement *
    getSubroutineHeaderStatement ();

    /*
     * ======================================================
     * Returns the variable declaration for the given formal
     * parameter
     * ======================================================
     */
    SgVariableDeclaration *
    getFormalParameterDeclaration (std::string const & variableName);

    /*
     * ======================================================
     * Returns the variable declaration for the given local
     * variable
     * ======================================================
     */
    SgVariableDeclaration *
    getLocalVariableDeclaration (std::string const & variableName);
};

#endif
