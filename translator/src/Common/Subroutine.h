/*
 * Written by Adam Betts and Carlo Bertolli
 *
 * This class models subroutines to be generated by our
 * compiler
 */

#ifndef SUBROUTINE_H
#define SUBROUTINE_H

#include <rose.h>
#include <SubroutineVariableDeclarations.h>

template <typename TSubroutineHeader>
  class Subroutine
  {
    protected:

      /*
       * ======================================================
       * Access to this statement allows ROSE to build function
       * call expressions to the generated subroutine. TSubroutineHeaderhis
       * is needed, for example, when patching the user-supplied
       * code
       * ======================================================
       */
      TSubroutineHeader * subroutineHeaderStatement;

      /*
       * ======================================================
       * TSubroutineHeaderhe name of the generated subroutine
       * ======================================================
       */
      std::string subroutineName;

      /*
       * ======================================================
       * TSubroutineHeaderhe parameters of the newly created subroutine
       * ======================================================
       */
      SgFunctionParameterList * formalParameters;

      /*
       * ======================================================
       * TSubroutineHeaderhe scope of the newly created subroutine
       * ======================================================
       */
      SgScopeStatement * subroutineScope;

      /*
       * ======================================================
       * Formal parameter and local variable declarations in the
       * newly created subroutine
       * ======================================================
       */
      SubroutineVariableDeclarations * variableDeclarations;

    protected:

      /*
       * ======================================================
       * Every created subroutine has a number of statements
       * ======================================================
       */
      virtual void
      createStatements () = 0;

      /*
       * ======================================================
       * Every created subroutine has local variable declarations
       * ======================================================
       */
      virtual void
      createLocalVariableDeclarations () = 0;

      /*
       * ======================================================
       * Every created subroutine has formal parameters
       * ======================================================
       */
      virtual void
      createFormalParameterDeclarations () = 0;

      /*
       * ======================================================
       * Subroutine constructor with name of the subroutine to
       * create
       * ======================================================
       */
      Subroutine (std::string const & subroutineName)
      {
        using SageBuilder::buildFunctionParameterList;

        this->subroutineName = subroutineName;

        formalParameters = buildFunctionParameterList ();

        variableDeclarations = new SubroutineVariableDeclarations ();
      }

    public:

      /*
       * ======================================================
       * Returns the header statement of the subroutine used
       * internally by ROSE in its abstract syntax tree
       * ======================================================
       */
      TSubroutineHeader *
      getSubroutineHeaderStatement ()
      {
        return subroutineHeaderStatement;
      }

      /*
       * ======================================================
       * What is the name of the subroutine?
       * ======================================================
       */
      std::string const &
      getSubroutineName () const
      {
        return subroutineName;
      }

      /*
       * ======================================================
       * Returns the variable declarations in this subroutine
       * ======================================================
       */
      SubroutineVariableDeclarations *
      getVariableDeclarations ()
      {
        return variableDeclarations;
      }
  };

#endif
