/*
 * Written by Adam Betts and Carlo Bertolli
 *
 * This class models subroutines to be generated by our
 * compiler
 */

#ifndef SUBROUTINE_H
#define SUBROUTINE_H

#include <boost/lexical_cast.hpp>
#include <boost/crc.hpp>
#include <rose.h>
#include <SubroutineVariableDeclarations.h>
#include <Debug.h>

namespace CommonVariableNames
{
  std::string const iterationCounter1 = "i1";
  std::string const iterationCounter2 = "i2";
  std::string const threadID = "threadID";
  std::string const upperBound = "bound";
}

template <typename TSubroutineHeader>
  class Subroutine
  {
    protected:

      /*
       * ======================================================
       * Access to this statement allows ROSE to build function
       * call expressions to the generated subroutine. This
       * is needed, for example, when patching the user-supplied
       * code
       * ======================================================
       */
      TSubroutineHeader * subroutineHeaderStatement;

      /*
       * ======================================================
       * The name of the generated subroutine
       * ======================================================
       */
      std::string subroutineName;

      /*
       * ======================================================
       * The parameters of the newly created subroutine
       * ======================================================
       */
      SgFunctionParameterList * formalParameters;

      /*
       * ======================================================
       * The scope of the newly created subroutine
       * ======================================================
       */
      SgScopeStatement * subroutineScope;

      /*
       * ======================================================
       * Formal parameter and local variable declarations in the
       * newly created subroutine
       * ======================================================
       */
      SubroutineVariableDeclarations * variableDeclarations;

    protected:

      /*
       * ======================================================
       * Every created subroutine has a number of statements
       * ======================================================
       */
      virtual void
      createStatements () = 0;

      /*
       * ======================================================
       * Every created subroutine has local variable declarations
       * ======================================================
       */
      virtual void
      createLocalVariableDeclarations () = 0;

      /*
       * ======================================================
       * Every created subroutine has formal parameters
       * ======================================================
       */
      virtual void
      createFormalParameterDeclarations () = 0;

      /*
       * ======================================================
       * Subroutine constructor with name of the subroutine to
       * create
       * ======================================================
       */
      Subroutine (std::string const & subroutineName)
      {
        using boost::lexical_cast;
        using SageBuilder::buildFunctionParameterList;
        using std::string;

        if (subroutineName.length () > 20)
        {
          boost::crc_32_type result;

          result.process_bytes (subroutineName.c_str (),
              subroutineName.length ());

          this->subroutineName = "s" + lexical_cast <string> (
              result.checksum ());
        }
        else
        {
          this->subroutineName = subroutineName;
        }

        Debug::getInstance ()->debugMessage ("Subroutine name = "
            + this->subroutineName, Debug::CONSTRUCTOR_LEVEL, __FILE__,
            __LINE__);

        formalParameters = buildFunctionParameterList ();

        variableDeclarations = new SubroutineVariableDeclarations ();
      }

    public:

      /*
       * ======================================================
       * Returns the header statement of the subroutine used
       * internally by ROSE in its abstract syntax tree
       * ======================================================
       */
      TSubroutineHeader *
      getSubroutineHeaderStatement ()
      {
        return subroutineHeaderStatement;
      }

      /*
       * ======================================================
       * What is the name of the subroutine?
       * ======================================================
       */
      std::string const &
      getSubroutineName () const
      {
        return subroutineName;
      }

      /*
       * ======================================================
       * Returns the variable declarations in this subroutine
       * ======================================================
       */
      SubroutineVariableDeclarations *
      getVariableDeclarations ()
      {
        return variableDeclarations;
      }
  };

#endif
