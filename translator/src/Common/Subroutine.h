/*
 * Written by Adam Betts and Carlo Bertolli
 *
 * This class models subroutines to be generated by the
 * compiler
 */

#ifndef SUBROUTINES_H
#define SUBROUTINES_H

#include <rose.h>

class Subroutine
{
  protected:

    /*
     * ======================================================
     * The name of the generated subroutine
     * ======================================================
     */
    std::string subroutineName;

    /*
     * ======================================================
     * The parameters of the newly created subroutine
     * ======================================================
     */
    SgFunctionParameterList * formalParameters;

    /*
     * ======================================================
     * The scope of the newly created subroutine
     * ======================================================
     */
    SgScopeStatement * subroutineScope;

    /*
     * ======================================================
     * Formal parameter and local variable declarations in the
     * newly created subroutine
     * ======================================================
     */
    std::map <std::string, SgVariableDeclaration *> variableDeclarations;

  protected:

    /*
     * ======================================================
     * Every created subroutine has a number of statements
     * ======================================================
     */
    virtual void
    createStatements () = 0;

    /*
     * ======================================================
     * Every created subroutine has local variable declarations
     * ======================================================
     */
    virtual void
    createLocalVariableDeclarations () = 0;

    /*
     * ======================================================
     * Every created subroutine has formal parameters
     * ======================================================
     */
    virtual void
    createlocalVariableDeclarations () = 0;

    /*
     * ======================================================
     * Subroutine constructor with name of the subroutine to
     * create
     * ======================================================
     */
    Subroutine (std::string const & subroutineName);

  public:

    /*
     * ======================================================
     * What is the name of the subroutine?
     * ======================================================
     */
    std::string const &
    getSubroutineName () const;

    /*
     * ======================================================
     * Returns the variable declaration with this name
     * ======================================================
     */
    SgVariableDeclaration *
    getVariableDeclaration (std::string const & variableName);
};

#endif
