This directory contains the code for computation of hidden types and declaration lists.


Questions:
   1) Why use char* instead of C++ string objects.

   2) Some test code demonstrate and infinite loop (or so it appears):
        test2001_01.C
        test2001_10.C

Comments:
   1) Need to use namespace to isolate the implementation (and types)
      from the rest of ROSE.

   2) Need more test codes (if they are available).



May 2011: Continued rewrite of Name Qualification support.

  A new version of the name qualification support in ROSE has been implemented.
This work define how much name qualification is to be used in expressing names
on C++ classes, functions, enums, types, variables, namespaces, etc.  This is 
the forth rewrite of this subject are in ROSE, and it has been an especially 
difficult subject are that only effects C++ source-to-source code generation.

   The subject is devided over several parts each implemented incrementally
over time so that each could be separately tested.  These parts are:
   1) Symbol table handling:
      Names that are included into alternative scopes (e.g. using declarations) 
      are included using a special alias symbol (SgAliasSymbol) that recorded 
      its visability in the current scope while clearly communicating that its 
      location is an alternative scope.  This symbol handling applies to scopes
      referenced using:
        a) Using declarations
        b) using directives
        c) derived classes

   2) Name visibility:
      We evaluate the visiblity of each name referenced in each scope and establish
      the minimum number of name qualifications required to make a name visible
      using common scope rules (visibility in a parent scope).

   3) Name hidding:
      We evaluate potential ambiguity in matching names and add another level of
      name qualification and evaluate new qualified name for further name 
      qualifications.

The connection to the unparser is that the IR nodes carry the details of if they 
need qualification and where. This would be a problm if IR nodes were referenced
from multiple locations.  In this case, the reference to the shared IR nodes carries
the information about if qualification is required.

Current bugs:
   1) SgBaseClass needs to store information about if it should be qualified.

   2) Instead of storing the boolean for if something should be qualified, we need 
      to store the level of qualification needed:
         0    : No qualification is required.
         n>0  : The number of levels of qualification required to correctly resolved the
                use.
         bool : Type elaboration.
         bool : Global qualification required (might be encoded into the value "n" if "n"
                is larger than the number of nested scopes (but this seems a bit sloppy).

