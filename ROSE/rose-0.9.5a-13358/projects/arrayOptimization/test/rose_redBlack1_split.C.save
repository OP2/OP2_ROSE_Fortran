
int max2(int a0,int a1)
{
  return a0 > a1?a0:a1;
}


int min2(int a0,int a1)
{
  return a0 < a1?a0:a1;
}

#include "simpleA++.h"

void redBlackRelax3DNonFullyVariational(class floatArray &s,class floatArray &rhs)
{
  int s_size_4 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[3];
  int s_size_5 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[4];
  int s_size_6 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[5];
  int s_stride_4 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[3];
  int s_stride_5 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[4];
  int s_stride_6 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[5];
  int s_length_4 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(3);
  int s_length_5 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(4);
  int s_length_6 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(5);
  int rhs_size_4 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[3];
  int rhs_size_5 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[4];
  int rhs_size_6 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[5];
  int rhs_stride_4 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[3];
  int rhs_stride_5 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[4];
  int rhs_stride_6 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[5];
  int rhs_length_4 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(3);
  int rhs_length_5 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(4);
  int rhs_length_6 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(5);
  float *s_pointer = s.getDataPointer();
  int s_size_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  int s_size_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[1];
  int s_size_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[2];
  int s_stride_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int s_stride_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[1];
  int s_stride_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[2];
  int s_length_1 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(0);
  int s_length_2 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(1);
  int s_length_3 = s.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(2);
  float *rhs_pointer = rhs.getDataPointer();
  int rhs_size_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[0];
  int rhs_size_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[1];
  int rhs_size_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Size[2];
  int rhs_stride_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[0];
  int rhs_stride_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[1];
  int rhs_stride_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.DomainType::Stride[2];
  int rhs_length_1 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(0);
  int rhs_length_2 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(1);
  int rhs_length_3 = rhs.floatArray::Array_Descriptor.DescriptorType::Array_Domain.getLength(2);
  int _var_0;
  int _var_1;
  int _var_2;
  int _var_3;
  int _var_4;
  int _var_5;
  int _var_6;
  int _var_7;
  int _var_8;
  int _var_9;
  int _var_10;
  int _var_11;
  int _var_12;
  int _var_13;
  int _var_14;
  int _var_15;
  int gridSize = s_length_1;
  class Index Black_Odd(1,_var_3 = ((gridSize - 1) / 2),2);
  class Index Black_Even(2,_var_8 = ((gridSize - 2) / 2),2);
  class Index Red_Odd(1,((gridSize - 1) / 2),2);
  class Index Red_Even(2,((gridSize - 2) / 2),2);
  class Index Odd_Rows(1,_var_4 = ((gridSize - 1) / 2),2);
  class Index Even_Rows(2,_var_9 = ((gridSize - 2) / 2),2);
  double hSqr = (1.0 / ((double )(gridSize * gridSize)));
  for (_var_12 = 0; _var_12 <= min2(-1 + _var_9,-1 + _var_4); _var_12 += 1) {
    for (_var_1 = 0; _var_1 <= min2(-1 + _var_9,-1 + _var_4); _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_9); _var_1 <= -1 + _var_4; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_4); _var_1 <= -1 + _var_9; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
  }
  for (_var_12 = max2(0,_var_9); _var_12 <= -1 + _var_4; _var_12 += 1) {
    for (_var_1 = 0; _var_1 <= min2(-1 + _var_9,-1 + _var_4); _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_9); _var_1 <= -1 + _var_4; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_4); _var_1 <= -1 + _var_9; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 1) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 1) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (1 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
  }
  for (_var_12 = max2(0,_var_4); _var_12 <= -1 + _var_9; _var_12 += 1) {
    for (_var_1 = 0; _var_1 <= min2(-1 + _var_9,-1 + _var_4); _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_9); _var_1 <= -1 + _var_4; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_8); _var_0 <= -1 + _var_3; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[1 + 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[1 - 1 + _var_0 * 2 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (1 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 1 + (_var_1 * 2 + 1) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
    for (_var_1 = max2(0,_var_4); _var_1 <= -1 + _var_9; _var_1 += 1) {
      for (_var_0 = 0; _var_0 <= min2(-1 + _var_8,-1 + _var_3); _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
      for (_var_0 = max2(0,_var_3); _var_0 <= -1 + _var_8; _var_0 += 1) {
        s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] = ((hSqr) * rhs_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * rhs_stride_1 * rhs_size_1 + (_var_12 * 2 + 2) * rhs_stride_2 * rhs_size_2] + s_pointer[2 + 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[2 - 1 + _var_0 * 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 + 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (2 - 1 + _var_1 * 2) * s_stride_1 * s_size_1 + (_var_12 * 2 + 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 + 1 + _var_12 * 2) * s_stride_2 * s_size_2] + s_pointer[_var_0 * 2 + 2 + (_var_1 * 2 + 2) * s_stride_1 * s_size_1 + (2 - 1 + _var_12 * 2) * s_stride_2 * s_size_2]) / (6.0);
      }
    }
  }
}

