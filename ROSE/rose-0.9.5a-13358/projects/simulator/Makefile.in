# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Makefile for an x86 simulator called "sandbox". At this time the simulator is highly Linux-specific.  On platforms other
# than Linux, this simulator is simply a main() that prints an error message and exits.

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?



srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = README $(include_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
noinst_PROGRAMS = sandbox$(EXEEXT) x86sim$(EXEEXT)

###############################################################################################################################
#  TESTS
###############################################################################################################################

# Test targets are test names suffixed with ".passed" (but when a test fails it produces ".failed" instead).
# Each target runs "x86sim" on one of the TEST_INPUT files. Exit status determines success or failure.
# Test targets must be 32-bit x86; if we don't have that capability then the tests are not run.
@ENABLE_I386_TRUE@am__append_1 = $(addsuffix .passed, $(TEST_INPUTS))
@ENABLE_I386_FALSE@am__append_2 = warn_no_tests
subdir = projects/simulator
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/config/EDG.m4 \
	$(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determinte-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/mdl_have_opengl.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(includedir)"
libLIBRARIES_INSTALL = $(INSTALL_DATA)
LIBRARIES = $(lib_LIBRARIES)
PROGRAMS = $(noinst_PROGRAMS)
am_sandbox_OBJECTS = sandbox-emulator.$(OBJEXT) \
	sandbox-simulate.$(OBJEXT) sandbox-linuxcalls.$(OBJEXT) \
	sandbox-elfload.$(OBJEXT)
sandbox_OBJECTS = $(am_sandbox_OBJECTS)
am__DEPENDENCIES_1 =
@ROSE_USE_SQLITE_DATABASE_TRUE@am__DEPENDENCIES_2 =  \
@ROSE_USE_SQLITE_DATABASE_TRUE@	$(am__DEPENDENCIES_1)
@HAVE_LIBYICES_TRUE@am__DEPENDENCIES_3 =  \
@HAVE_LIBYICES_TRUE@	@YICES_PREFIX@/lib/libyices.a
@ROSE_USE_PHP_TRUE@am__DEPENDENCIES_4 = $(php_path)/lib/libphc.so \
@ROSE_USE_PHP_TRUE@	$(php_path)/lib/libphp5.so \
@ROSE_USE_PHP_TRUE@	$(am__DEPENDENCIES_1)
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_5 = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_6 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_7 = $(top_builddir)/src/librose.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_4) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_6) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
sandbox_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_7)
am_x86sim_OBJECTS = x86sim-x86sim.$(OBJEXT) x86sim-x86print.$(OBJEXT)
x86sim_OBJECTS = $(am_x86sim_OBJECTS)
x86sim_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_7)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp =
am__depfiles_maybe =
CXXCOMPILE = @echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = @echo "  COMPILE $@"; $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLINK = @echo "  LINK    $@"; $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(sandbox_SOURCES) $(x86sim_SOURCES)
DIST_SOURCES = $(sandbox_SOURCES) $(x86sim_SOURCES)
includeHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(include_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
AXXPXX_SPECIFIC_TESTS_FALSE = @AXXPXX_SPECIFIC_TESTS_FALSE@
AXXPXX_SPECIFIC_TESTS_TRUE = @AXXPXX_SPECIFIC_TESTS_TRUE@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BINARY_EDG_TARBALL_ENABLED_FALSE = @BINARY_EDG_TARBALL_ENABLED_FALSE@
BINARY_EDG_TARBALL_ENABLED_TRUE = @BINARY_EDG_TARBALL_ENABLED_TRUE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLASSPATH = @CLASSPATH@
CONVENIENCE_LTDL_FALSE = @CONVENIENCE_LTDL_FALSE@
CONVENIENCE_LTDL_TRUE = @CONVENIENCE_LTDL_TRUE@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOT_TO_GML_TRANSLATOR_FALSE = @DOT_TO_GML_TRANSLATOR_FALSE@
DOT_TO_GML_TRANSLATOR_TRUE = @DOT_TO_GML_TRANSLATOR_TRUE@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DWARF_INCLUDE = @DWARF_INCLUDE@
DWARF_LINK = @DWARF_LINK@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_I386_FALSE = @ENABLE_I386_FALSE@
ENABLE_I386_TRUE = @ENABLE_I386_TRUE@
ENABLE_JAVAPORT_FALSE = @ENABLE_JAVAPORT_FALSE@
ENABLE_JAVAPORT_TRUE = @ENABLE_JAVAPORT_TRUE@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FADA_CPPFLAGS = @FADA_CPPFLAGS@
FADA_LDFLAGS = @FADA_LDFLAGS@
FFLAGS = @FFLAGS@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_LIBYICES_FALSE = @HAVE_LIBYICES_FALSE@
HAVE_LIBYICES_TRUE = @HAVE_LIBYICES_TRUE@
HAVE_YICES_FALSE = @HAVE_YICES_FALSE@
HAVE_YICES_TRUE = @HAVE_YICES_TRUE@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_LTDL_FALSE = @INSTALL_LTDL_FALSE@
INSTALL_LTDL_TRUE = @INSTALL_LTDL_TRUE@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_PATH = @JAVA_PATH@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@ --quiet
LN_S = @LN_S@
LTDLINCL = @LTDLINCL@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MOC = @MOC@
MPICXX = @MPICXX@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
OBJ = @OBJ@
OBJEXT = @OBJEXT@
OLD_COMPILER_VERSION_FALSE = @OLD_COMPILER_VERSION_FALSE@
OLD_COMPILER_VERSION_TRUE = @OLD_COMPILER_VERSION_TRUE@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OS_32BIT_FALSE = @OS_32BIT_FALSE@
OS_32BIT_TRUE = @OS_32BIT_TRUE@
OS_64BIT_FALSE = @OS_64BIT_FALSE@
OS_64BIT_TRUE = @OS_64BIT_TRUE@
OS_LINUX_FALSE = @OS_LINUX_FALSE@
OS_LINUX_TRUE = @OS_LINUX_TRUE@
OS_MACOSX_FALSE = @OS_MACOSX_FALSE@
OS_MACOSX_TRUE = @OS_MACOSX_TRUE@
OS_MINGW_FALSE = @OS_MINGW_FALSE@
OS_MINGW_TRUE = @OS_MINGW_TRUE@
OS_MSDOS_FALSE = @OS_MSDOS_FALSE@
OS_MSDOS_TRUE = @OS_MSDOS_TRUE@
OS_VENDOR_APPLE_FALSE = @OS_VENDOR_APPLE_FALSE@
OS_VENDOR_APPLE_TRUE = @OS_VENDOR_APPLE_TRUE@
OS_VENDOR_CENTOS_FALSE = @OS_VENDOR_CENTOS_FALSE@
OS_VENDOR_CENTOS_TRUE = @OS_VENDOR_CENTOS_TRUE@
OS_VENDOR_DEBIAN_FALSE = @OS_VENDOR_DEBIAN_FALSE@
OS_VENDOR_DEBIAN_TRUE = @OS_VENDOR_DEBIAN_TRUE@
OS_VENDOR_REDHAT_32BIT_FALSE = @OS_VENDOR_REDHAT_32BIT_FALSE@
OS_VENDOR_REDHAT_32BIT_TRUE = @OS_VENDOR_REDHAT_32BIT_TRUE@
OS_VENDOR_REDHAT_FALSE = @OS_VENDOR_REDHAT_FALSE@
OS_VENDOR_REDHAT_TRUE = @OS_VENDOR_REDHAT_TRUE@
OS_VENDOR_UBUNTU_FALSE = @OS_VENDOR_UBUNTU_FALSE@
OS_VENDOR_UBUNTU_TRUE = @OS_VENDOR_UBUNTU_TRUE@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PIP_CPPFLAGS = @PIP_CPPFLAGS@
PIP_LDFLAGS = @PIP_LDFLAGS@
PKG_CONFIG = @PKG_CONFIG@
PPL_CPPFLAGS = @PPL_CPPFLAGS@
PPL_LDFLAGS = @PPL_LDFLAGS@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QROSE_USE_MINGW32_FALSE = @QROSE_USE_MINGW32_FALSE@
QROSE_USE_MINGW32_TRUE = @QROSE_USE_MINGW32_TRUE@
QROSE_USE_WINDOWS_FALSE = @QROSE_USE_WINDOWS_FALSE@
QROSE_USE_WINDOWS_TRUE = @QROSE_USE_WINDOWS_TRUE@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OS_IS_CYGWIN_FALSE = @ROSE_BUILD_OS_IS_CYGWIN_FALSE@
ROSE_BUILD_OS_IS_CYGWIN_TRUE = @ROSE_BUILD_OS_IS_CYGWIN_TRUE@
ROSE_BUILD_OS_IS_OSX_FALSE = @ROSE_BUILD_OS_IS_OSX_FALSE@
ROSE_BUILD_OS_IS_OSX_TRUE = @ROSE_BUILD_OS_IS_OSX_TRUE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_ROSEHPCT_FALSE = @ROSE_BUILD_ROSEHPCT_FALSE@
ROSE_BUILD_ROSEHPCT_TRUE = @ROSE_BUILD_ROSEHPCT_TRUE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HAS_EDG_SOURCE_FALSE = @ROSE_HAS_EDG_SOURCE_FALSE@
ROSE_HAS_EDG_SOURCE_TRUE = @ROSE_HAS_EDG_SOURCE_TRUE@
ROSE_HOME = @ROSE_HOME@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_MPI_FALSE = @ROSE_MPI_FALSE@
ROSE_MPI_TRUE = @ROSE_MPI_TRUE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_CONTAINS_JAVA_FILE_FALSE = @ROSE_OFP_CONTAINS_JAVA_FILE_FALSE@
ROSE_OFP_CONTAINS_JAVA_FILE_TRUE = @ROSE_OFP_CONTAINS_JAVA_FILE_TRUE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_PCH_FALSE = @ROSE_PCH_FALSE@
ROSE_PCH_TRUE = @ROSE_PCH_TRUE@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_ASSEMBLY_SEMANTICS_FALSE = @ROSE_USE_ASSEMBLY_SEMANTICS_FALSE@
ROSE_USE_ASSEMBLY_SEMANTICS_TRUE = @ROSE_USE_ASSEMBLY_SEMANTICS_TRUE@
ROSE_USE_BDDBDDB_FALSE = @ROSE_USE_BDDBDDB_FALSE@
ROSE_USE_BDDBDDB_TRUE = @ROSE_USE_BDDBDDB_TRUE@
ROSE_USE_BINARYCONTEXTLOOKUP_FALSE = @ROSE_USE_BINARYCONTEXTLOOKUP_FALSE@
ROSE_USE_BINARYCONTEXTLOOKUP_TRUE = @ROSE_USE_BINARYCONTEXTLOOKUP_TRUE@
ROSE_USE_BOOST_WAVE_FALSE = @ROSE_USE_BOOST_WAVE_FALSE@
ROSE_USE_BOOST_WAVE_TRUE = @ROSE_USE_BOOST_WAVE_TRUE@
ROSE_USE_CUDA_SUPPORT = @ROSE_USE_CUDA_SUPPORT@
ROSE_USE_CUDA_SUPPORT_FALSE = @ROSE_USE_CUDA_SUPPORT_FALSE@
ROSE_USE_CUDA_SUPPORT_TRUE = @ROSE_USE_CUDA_SUPPORT_TRUE@
ROSE_USE_DWARF_FALSE = @ROSE_USE_DWARF_FALSE@
ROSE_USE_DWARF_TRUE = @ROSE_USE_DWARF_TRUE@
ROSE_USE_ETHER_FALSE = @ROSE_USE_ETHER_FALSE@
ROSE_USE_ETHER_TRUE = @ROSE_USE_ETHER_TRUE@
ROSE_USE_FADALIB = @ROSE_USE_FADALIB@
ROSE_USE_FADALIB_FALSE = @ROSE_USE_FADALIB_FALSE@
ROSE_USE_FADALIB_TRUE = @ROSE_USE_FADALIB_TRUE@
ROSE_USE_GCC_OMP_FALSE = @ROSE_USE_GCC_OMP_FALSE@
ROSE_USE_GCC_OMP_TRUE = @ROSE_USE_GCC_OMP_TRUE@
ROSE_USE_GRAPHVIZ_DOT_FALSE = @ROSE_USE_GRAPHVIZ_DOT_FALSE@
ROSE_USE_GRAPHVIZ_DOT_TRUE = @ROSE_USE_GRAPHVIZ_DOT_TRUE@
ROSE_USE_IDA_FALSE = @ROSE_USE_IDA_FALSE@
ROSE_USE_IDA_TRUE = @ROSE_USE_IDA_TRUE@
ROSE_USE_INDENT_FALSE = @ROSE_USE_INDENT_FALSE@
ROSE_USE_INDENT_TRUE = @ROSE_USE_INDENT_TRUE@
ROSE_USE_INTEL_PIN_FALSE = @ROSE_USE_INTEL_PIN_FALSE@
ROSE_USE_INTEL_PIN_TRUE = @ROSE_USE_INTEL_PIN_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE@
ROSE_USE_LIBFFI_FALSE = @ROSE_USE_LIBFFI_FALSE@
ROSE_USE_LIBFFI_TRUE = @ROSE_USE_LIBFFI_TRUE@
ROSE_USE_LLVM_FALSE = @ROSE_USE_LLVM_FALSE@
ROSE_USE_LLVM_TRUE = @ROSE_USE_LLVM_TRUE@
ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE = @ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE@
ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE = @ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE@
ROSE_USE_MAPLE_FALSE = @ROSE_USE_MAPLE_FALSE@
ROSE_USE_MAPLE_TRUE = @ROSE_USE_MAPLE_TRUE@
ROSE_USE_MYSQL_FALSE = @ROSE_USE_MYSQL_FALSE@
ROSE_USE_MYSQL_TRUE = @ROSE_USE_MYSQL_TRUE@
ROSE_USE_NEW_EDG_INTERFACE_FALSE = @ROSE_USE_NEW_EDG_INTERFACE_FALSE@
ROSE_USE_NEW_EDG_INTERFACE_TRUE = @ROSE_USE_NEW_EDG_INTERFACE_TRUE@
ROSE_USE_OBJDUMP_FALSE = @ROSE_USE_OBJDUMP_FALSE@
ROSE_USE_OBJDUMP_TRUE = @ROSE_USE_OBJDUMP_TRUE@
ROSE_USE_OMNI_OPENMP_FALSE = @ROSE_USE_OMNI_OPENMP_FALSE@
ROSE_USE_OMNI_OPENMP_TRUE = @ROSE_USE_OMNI_OPENMP_TRUE@
ROSE_USE_OPENCL_SUPPORT = @ROSE_USE_OPENCL_SUPPORT@
ROSE_USE_OPENCL_SUPPORT_FALSE = @ROSE_USE_OPENCL_SUPPORT_FALSE@
ROSE_USE_OPENCL_SUPPORT_TRUE = @ROSE_USE_OPENCL_SUPPORT_TRUE@
ROSE_USE_OPENGL_FALSE = @ROSE_USE_OPENGL_FALSE@
ROSE_USE_OPENGL_TRUE = @ROSE_USE_OPENGL_TRUE@
ROSE_USE_PHP_FALSE = @ROSE_USE_PHP_FALSE@
ROSE_USE_PHP_TRUE = @ROSE_USE_PHP_TRUE@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_PPL_FALSE = @ROSE_USE_PPL_FALSE@
ROSE_USE_PPL_TRUE = @ROSE_USE_PPL_TRUE@
ROSE_USE_QROSE_FALSE = @ROSE_USE_QROSE_FALSE@
ROSE_USE_QROSE_TRUE = @ROSE_USE_QROSE_TRUE@
ROSE_USE_QT_FALSE = @ROSE_USE_QT_FALSE@
ROSE_USE_QT_TRUE = @ROSE_USE_QT_TRUE@
ROSE_USE_RTED_FALSE = @ROSE_USE_RTED_FALSE@
ROSE_USE_RTED_TRUE = @ROSE_USE_RTED_TRUE@
ROSE_USE_SAT_FALSE = @ROSE_USE_SAT_FALSE@
ROSE_USE_SAT_TRUE = @ROSE_USE_SAT_TRUE@
ROSE_USE_SMALLER_GENERATED_FILES_FALSE = @ROSE_USE_SMALLER_GENERATED_FILES_FALSE@
ROSE_USE_SMALLER_GENERATED_FILES_TRUE = @ROSE_USE_SMALLER_GENERATED_FILES_TRUE@
ROSE_USE_SQLITE_DATABASE_FALSE = @ROSE_USE_SQLITE_DATABASE_FALSE@
ROSE_USE_SQLITE_DATABASE_TRUE = @ROSE_USE_SQLITE_DATABASE_TRUE@
ROSE_USE_SSL_SUPPORT_FALSE = @ROSE_USE_SSL_SUPPORT_FALSE@
ROSE_USE_SSL_SUPPORT_TRUE = @ROSE_USE_SSL_SUPPORT_TRUE@
ROSE_USE_TCLSH_FALSE = @ROSE_USE_TCLSH_FALSE@
ROSE_USE_TCLSH_TRUE = @ROSE_USE_TCLSH_TRUE@
ROSE_USE_TEST_SMT_SOLVER_FALSE = @ROSE_USE_TEST_SMT_SOLVER_FALSE@
ROSE_USE_TEST_SMT_SOLVER_TRUE = @ROSE_USE_TEST_SMT_SOLVER_TRUE@
ROSE_USE_TRACE_ANALYSIS_FALSE = @ROSE_USE_TRACE_ANALYSIS_FALSE@
ROSE_USE_TRACE_ANALYSIS_TRUE = @ROSE_USE_TRACE_ANALYSIS_TRUE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE@
ROSE_USE_VISUALIZATION_FALSE = @ROSE_USE_VISUALIZATION_FALSE@
ROSE_USE_VISUALIZATION_TRUE = @ROSE_USE_VISUALIZATION_TRUE@
ROSE_USE_WGET_FALSE = @ROSE_USE_WGET_FALSE@
ROSE_USE_WGET_TRUE = @ROSE_USE_WGET_TRUE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@
ROSE_USE_XML_FALSE = @ROSE_USE_XML_FALSE@
ROSE_USE_XML_TRUE = @ROSE_USE_XML_TRUE@
ROSE_USING_BOOST_VERSION_1_35_FALSE = @ROSE_USING_BOOST_VERSION_1_35_FALSE@
ROSE_USING_BOOST_VERSION_1_35_TRUE = @ROSE_USING_BOOST_VERSION_1_35_TRUE@
ROSE_USING_BOOST_VERSION_1_36_FALSE = @ROSE_USING_BOOST_VERSION_1_36_FALSE@
ROSE_USING_BOOST_VERSION_1_36_TRUE = @ROSE_USING_BOOST_VERSION_1_36_TRUE@
ROSE_USING_BOOST_VERSION_1_37_FALSE = @ROSE_USING_BOOST_VERSION_1_37_FALSE@
ROSE_USING_BOOST_VERSION_1_37_TRUE = @ROSE_USING_BOOST_VERSION_1_37_TRUE@
ROSE_USING_BOOST_VERSION_1_38_FALSE = @ROSE_USING_BOOST_VERSION_1_38_FALSE@
ROSE_USING_BOOST_VERSION_1_38_TRUE = @ROSE_USING_BOOST_VERSION_1_38_TRUE@
ROSE_USING_BOOST_VERSION_1_39_FALSE = @ROSE_USING_BOOST_VERSION_1_39_FALSE@
ROSE_USING_BOOST_VERSION_1_39_TRUE = @ROSE_USING_BOOST_VERSION_1_39_TRUE@
ROSE_USING_BOOST_VERSION_1_40_FALSE = @ROSE_USING_BOOST_VERSION_1_40_FALSE@
ROSE_USING_BOOST_VERSION_1_40_TRUE = @ROSE_USING_BOOST_VERSION_1_40_TRUE@
ROSE_USING_BOOST_VERSION_1_41_FALSE = @ROSE_USING_BOOST_VERSION_1_41_FALSE@
ROSE_USING_BOOST_VERSION_1_41_TRUE = @ROSE_USING_BOOST_VERSION_1_41_TRUE@
ROSE_USING_BOOST_VERSION_1_42_FALSE = @ROSE_USING_BOOST_VERSION_1_42_FALSE@
ROSE_USING_BOOST_VERSION_1_42_TRUE = @ROSE_USING_BOOST_VERSION_1_42_TRUE@
ROSE_USING_BOOST_VERSION_1_43_FALSE = @ROSE_USING_BOOST_VERSION_1_43_FALSE@
ROSE_USING_BOOST_VERSION_1_43_TRUE = @ROSE_USING_BOOST_VERSION_1_43_TRUE@
ROSE_USING_BOOST_VERSION_1_44_FALSE = @ROSE_USING_BOOST_VERSION_1_44_FALSE@
ROSE_USING_BOOST_VERSION_1_44_TRUE = @ROSE_USING_BOOST_VERSION_1_44_TRUE@
ROSE_USING_BOOST_VERSION_1_45_FALSE = @ROSE_USING_BOOST_VERSION_1_45_FALSE@
ROSE_USING_BOOST_VERSION_1_45_TRUE = @ROSE_USING_BOOST_VERSION_1_45_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_0_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_0_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_0_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_1_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_1_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_1_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_1_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_4_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_4_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_4_TRUE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE@
ROSE_USING_ROSE_ANALYSIS_FALSE = @ROSE_USING_ROSE_ANALYSIS_FALSE@
ROSE_USING_ROSE_ANALYSIS_TRUE = @ROSE_USING_ROSE_ANALYSIS_TRUE@
ROSE_USING_ROSE_AST_FILE_IO_FALSE = @ROSE_USING_ROSE_AST_FILE_IO_FALSE@
ROSE_USING_ROSE_AST_FILE_IO_TRUE = @ROSE_USING_ROSE_AST_FILE_IO_TRUE@
ROSE_USING_ROSE_CODE_GENERATION_FALSE = @ROSE_USING_ROSE_CODE_GENERATION_FALSE@
ROSE_USING_ROSE_CODE_GENERATION_TRUE = @ROSE_USING_ROSE_CODE_GENERATION_TRUE@
ROSE_USING_ROSE_FALSE = @ROSE_USING_ROSE_FALSE@
ROSE_USING_ROSE_TRANSLATOR_FALSE = @ROSE_USING_ROSE_TRANSLATOR_FALSE@
ROSE_USING_ROSE_TRANSLATOR_TRUE = @ROSE_USING_ROSE_TRANSLATOR_TRUE@
ROSE_USING_ROSE_TRUE = @ROSE_USING_ROSE_TRUE@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_ROSEQT_FALSE = @ROSE_WITH_ROSEQT_FALSE@
ROSE_WITH_ROSEQT_TRUE = @ROSE_WITH_ROSEQT_TRUE@
RT_LIBS = @RT_LIBS@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
USE_BINARY_ANALYSIS_TESTS_FALSE = @USE_BINARY_ANALYSIS_TESTS_FALSE@
USE_BINARY_ANALYSIS_TESTS_TRUE = @USE_BINARY_ANALYSIS_TESTS_TRUE@
USE_GCJ_FALSE = @USE_GCJ_FALSE@
USE_GCJ_TRUE = @USE_GCJ_TRUE@
USE_HASKELL_FALSE = @USE_HASKELL_FALSE@
USE_HASKELL_TRUE = @USE_HASKELL_TRUE@
USE_ROSE_GLUT_SUPPORT_FALSE = @USE_ROSE_GLUT_SUPPORT_FALSE@
USE_ROSE_GLUT_SUPPORT_TRUE = @USE_ROSE_GLUT_SUPPORT_TRUE@
USE_ROSE_IN_BUILD_TREE_VAR_FALSE = @USE_ROSE_IN_BUILD_TREE_VAR_FALSE@
USE_ROSE_IN_BUILD_TREE_VAR_TRUE = @USE_ROSE_IN_BUILD_TREE_VAR_TRUE@
USE_VALGRIND_FALSE = @USE_VALGRIND_FALSE@
USE_VALGRIND_TRUE = @USE_VALGRIND_TRUE@
USING_GNU_COMPILER_FALSE = @USING_GNU_COMPILER_FALSE@
USING_GNU_COMPILER_TRUE = @USING_GNU_COMPILER_TRUE@
USING_INTEL_COMPILER_FALSE = @USING_INTEL_COMPILER_FALSE@
USING_INTEL_COMPILER_TRUE = @USING_INTEL_COMPILER_TRUE@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VERSION = @VERSION@
WITH_GOMP_OPENMP_LIB_FALSE = @WITH_GOMP_OPENMP_LIB_FALSE@
WITH_GOMP_OPENMP_LIB_TRUE = @WITH_GOMP_OPENMP_LIB_TRUE@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
X_CFLAGS = @X_CFLAGS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_LIBS = @X_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
YACC = @YACC@
YICES = @YICES@
YICES_PREFIX = @YICES_PREFIX@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_ROSE_LSB_RELEASE = @ac_ct_ROSE_LSB_RELEASE@
ac_ct_ROSE_OBJDUMP_PATH = @ac_ct_ROSE_OBJDUMP_PATH@
ac_ct_ROSE_WGET_PATH = @ac_ct_ROSE_WGET_PATH@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
configure_date = @configure_date@
datadir = @datadir@
dwarf_path = @dwarf_path@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_INCLUDES = @insure_INCLUDES@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localstatedir = @localstatedir@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
php_path = @php_path@
prefix = @prefix@
program_transform_name = @program_transform_name@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
python_path = @python_path@
rted_path = @rted_path@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
subdirs = @subdirs@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_pwd = @top_pwd@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@YICES_PREFIX@/include
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @YICES_PREFIX@/lib/libyices.a
GLUT_LIBS = ${glut_path}

# ROSE-DWARF libdwarf support
@ROSE_USE_DWARF_TRUE@ROSE_DWARF_INCLUDES = -I$(dwarf_path)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(dwarf_path) -L$(dwarf_path) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(dwarf_path)/libdwarf.a -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @DWARF_LINK@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now
#ROSE_LLVM_LIB_WITH_PATH = $(llvm_path)/lib/libLLVMXCoreCodeGen.a $(llvm_path)/lib/libLLVMXCoreAsmPrinter.a $(llvm_path)/lib/libLLVMXCoreInfo.a $(llvm_path)/lib/libLLVMSystemZCodeGen.a $(llvm_path)/lib/libLLVMSystemZAsmPrinter.a $(llvm_path)/lib/libLLVMSystemZInfo.a $(llvm_path)/lib/libLLVMSparcCodeGen.a $(llvm_path)/lib/libLLVMSparcAsmPrinter.a $(llvm_path)/lib/libLLVMSparcInfo.a $(llvm_path)/lib/libLLVMPowerPCCodeGen.a $(llvm_path)/lib/libLLVMPowerPCAsmPrinter.a $(llvm_path)/lib/libLLVMPowerPCInfo.a $(llvm_path)/lib/libLLVMpic16passes.a $(llvm_path)/lib/libLLVMPIC16AsmPrinter.a $(llvm_path)/lib/libLLVMPIC16CodeGen.a $(llvm_path)/lib/libLLVMPIC16Info.a $(llvm_path)/lib/libLLVMMSP430CodeGen.a $(llvm_path)/lib/libLLVMMSP430AsmPrinter.a $(llvm_path)/lib/libLLVMMSP430Info.a $(llvm_path)/lib/libLLVMMSIL.a $(llvm_path)/lib/libLLVMMSILInfo.a $(llvm_path)/lib/libLLVMMipsAsmPrinter.a $(llvm_path)/lib/libLLVMMipsCodeGen.a $(llvm_path)/lib/libLLVMMipsInfo.a $(llvm_path)/lib/libLLVMMBlazeAsmPrinter.a $(llvm_path)/lib/libLLVMMBlazeCodeGen.a $(llvm_path)/lib/libLLVMMBlazeInfo.a $(llvm_path)/lib/libLLVMLinker.a $(llvm_path)/lib/libLLVMipo.a $(llvm_path)/lib/libLLVMInterpreter.a $(llvm_path)/lib/libLLVMInstrumentation.a $(llvm_path)/lib/libLLVMJIT.a $(llvm_path)/lib/libLLVMExecutionEngine.a $(llvm_path)/lib/libLLVMCppBackend.a $(llvm_path)/lib/libLLVMCppBackendInfo.a $(llvm_path)/lib/libLLVMCellSPUCodeGen.a $(llvm_path)/lib/libLLVMCellSPUAsmPrinter.a $(llvm_path)/lib/libLLVMCellSPUInfo.a $(llvm_path)/lib/libLLVMCBackend.a $(llvm_path)/lib/libLLVMCBackendInfo.a $(llvm_path)/lib/libLLVMBlackfinCodeGen.a $(llvm_path)/lib/libLLVMBlackfinAsmPrinter.a $(llvm_path)/lib/libLLVMBlackfinInfo.a $(llvm_path)/lib/libLLVMBitWriter.a $(llvm_path)/lib/libLLVMX86Disassembler.a $(llvm_path)/lib/libLLVMX86AsmParser.a $(llvm_path)/lib/libLLVMX86AsmPrinter.a $(llvm_path)/lib/libLLVMX86CodeGen.a $(llvm_path)/lib/libLLVMX86Info.a $(llvm_path)/lib/libLLVMAsmParser.a $(llvm_path)/lib/libLLVMARMAsmParser.a $(llvm_path)/lib/libLLVMMCParser.a $(llvm_path)/lib/libLLVMARMAsmPrinter.a $(llvm_path)/lib/libLLVMARMCodeGen.a $(llvm_path)/lib/libLLVMARMInfo.a $(llvm_path)/lib/libLLVMArchive.a $(llvm_path)/lib/libLLVMBitReader.a $(llvm_path)/lib/libLLVMAlphaCodeGen.a $(llvm_path)/lib/libLLVMSelectionDAG.a $(llvm_path)/lib/libLLVMAlphaAsmPrinter.a $(llvm_path)/lib/libLLVMAsmPrinter.a $(llvm_path)/lib/libLLVMCodeGen.a $(llvm_path)/lib/libLLVMScalarOpts.a $(llvm_path)/lib/libLLVMInstCombine.a $(llvm_path)/lib/libLLVMTransformUtils.a $(llvm_path)/lib/libLLVMipa.a $(llvm_path)/lib/libLLVMAnalysis.a $(llvm_path)/lib/libLLVMTarget.a $(llvm_path)/lib/libLLVMMC.a $(llvm_path)/lib/libLLVMCore.a $(llvm_path)/lib/libLLVMAlphaInfo.a $(llvm_path)/lib/libLLVMSupport.a $(llvm_path)/lib/libLLVMSystem.a

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_USE_DWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm

# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
ROSE_INCLUDES = \
     $(ROSE_BOOST_PREINCLUDE_PATH) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/binaryAnalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/dataflowAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE)


# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)
ROSE_LIBS = $(top_builddir)/src/librose.la -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS)  $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Location of sample binary files (executables, libraries, etc) that serve as input to
# some of the binary analysis tests.
BINARY_SAMPLES = $(top_srcdir)/binaries/samples

# Test harness variables. See "rth_run.pl --help" for more info.
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl \
	srcdir=$(srcdir) top_srcdir=$(top_srcdir) \
	VALGRIND=$(VALGRIND) BINARY_SAMPLES=$(BINARY_SAMPLES)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl

# Forward declarations for "+="
MOSTLYCLEANFILES = $(TEST_INPUTS) $(addsuffix .o, $(TEST_INPUTS)) \
	$(addsuffix .o, $(basename $(notdir $(TEST_SUPPORT_SRC)))) \
	libtestsupport.a libipc.a $(TEST_TARGETS) $(patsubst %.passed, \
	%.failed, $(TEST_TARGETS))

###############################################################################################################################
#  DOCUMENTATION, CONFIGURATION, ETC
###############################################################################################################################
EXTRA_DIST = README x86sim.conf test_status.txt $(TEST_SUPPORT_SRC) \
	$(srcdir)/tests/audit_parse_verify.h \
	$(srcdir)/tests/audit_utils.h $(srcdir)/tests/bintest_config.h \
	$(srcdir)/tests/clone_platform.h $(srcdir)/tests/compat_16.h \
	$(srcdir)/tests/compat_uid.h $(srcdir)/tests/compiler.h \
	$(srcdir)/tests/getdents.h $(srcdir)/tests/include_j_h.h \
	$(srcdir)/tests/includes.h $(srcdir)/tests/ipcmsg.h \
	$(srcdir)/tests/ipcsem.h $(srcdir)/tests/ipcshm.h \
	$(srcdir)/tests/libtestsuite.h \
	$(srcdir)/tests/linux_syscall_numbers.h \
	$(srcdir)/tests/ltp_signal.h $(srcdir)/tests/rmobj.h \
	$(srcdir)/tests/search_path.h \
	$(srcdir)/tests/set_thread_area.h \
	$(srcdir)/tests/system_specific_process_info.h \
	$(srcdir)/tests/test.h $(srcdir)/tests/usctest.h \
	$(TEST_INPUTS_SRC) $(IPC_SUPPORT_SRC)

# The ipc support library. These will not be generated if ENABLE_I386 is not defined.
include_HEADERS = mymemory.h simulate.h x86print.h \
	$(srcdir)/tests/ipcmsg.h $(srcdir)/tests/ipcsem.h \
	$(srcdir)/tests/ipcshm.h
lib_LIBRARIES = 
TEST_TARGETS = $(am__append_1) $(am__append_2)
sandbox_SOURCES = emulator.C simulate.C linuxcalls.C elfload.C
sandbox_CPPFLAGS = $(ROSE_INCLUDES) -UDEBUG
sandbox_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS)
x86sim_SOURCES = x86sim.C x86print.C
x86sim_CPPFLAGS = $(ROSE_INCLUDES) -DX86_VDSO_PATH_1='"$(srcdir)"' -DX86_VDSO_PATH_2='"$(include_dir)"'
x86sim_LDADD = $(LIBS_WITH_RPATH) $(ROSE_LIBS) 

###############################################################################################################################
#  TEST INPUTS
###############################################################################################################################

# Source and executables for test inputs. The inputs are 32-bit executables. They come in three flavors depending
# on how they're compiled and linked:
#    TEST_INPUTS_SA  -- stand-alone, no additional source required
#    TEST_INPUTS_RT  -- require linking with librt
#    TEST_INPUTS_TS  -- use the TEST_SUPPORT library
TEST_SUPPORT_SRC = $(srcdir)/tests/audit_parse_verify.c \
                   $(srcdir)/tests/audit_parse_verify_utils.c \
                   $(srcdir)/tests/audit_utils.c \
                   $(srcdir)/tests/cleanup.c \
                   $(srcdir)/tests/cloner.c \
                   $(srcdir)/tests/get_high_address.c \
                   $(srcdir)/tests/libtestsuite.c \
                   $(srcdir)/tests/parse_opts.c \
                   $(srcdir)/tests/rmobj.c \
                   $(srcdir)/tests/search_path.c \
                   $(srcdir)/tests/simple_test_looping.c \
                   $(srcdir)/tests/system_specific_process_info.c \
                   $(srcdir)/tests/tst_is_cwd.c \
                   $(srcdir)/tests/tst_kvercmp.c \
                   $(srcdir)/tests/tst_res.c \
                   $(srcdir)/tests/tst_sig.c \
                   $(srcdir)/tests/tst_tmpdir.c


# TEST_INPUTS_SA_SRC = $(wildcard $(srcdir)/tests/syscall_sa*.c)
TEST_INPUTS_SA_SRC = \
		   $(srcdir)/tests/syscall_sa.114.c \
		   $(srcdir)/tests/syscall_sa.122.01.c \
		   $(srcdir)/tests/syscall_sa.122.02.c \
		   $(srcdir)/tests/syscall_sa.122.03.c \
		   $(srcdir)/tests/syscall_sa.13.c \
		   $(srcdir)/tests/syscall_sa.197.1.c \
		   $(srcdir)/tests/syscall_sa.197.3.c \
		   $(srcdir)/tests/syscall_sa.199.c \
		   $(srcdir)/tests/syscall_sa.200.c \
		   $(srcdir)/tests/syscall_sa.201.c \
		   $(srcdir)/tests/syscall_sa.202.c \
		   $(srcdir)/tests/syscall_sa.20.c \
		   $(srcdir)/tests/syscall_sa.224.c \
		   $(srcdir)/tests/syscall_sa.24.c \
		   $(srcdir)/tests/syscall_sa.3.c \
		   $(srcdir)/tests/syscall_sa.4.1.c \
		   $(srcdir)/tests/syscall_sa.41.c \
		   $(srcdir)/tests/syscall_sa.4.2.c \
		   $(srcdir)/tests/syscall_sa.47.c \
		   $(srcdir)/tests/syscall_sa.49.c \
		   $(srcdir)/tests/syscall_sa.50.c \
		   $(srcdir)/tests/syscall_sa.5.1.c \
		   $(srcdir)/tests/syscall_sa.5.2.c \
		   $(srcdir)/tests/syscall_sa.5.4.c \
		   $(srcdir)/tests/syscall_sa.5.6.c \
		   $(srcdir)/tests/syscall_sa.57.c \
		   $(srcdir)/tests/syscall_sa.5.9.c \
		   $(srcdir)/tests/syscall_sa.64.c \
		   $(srcdir)/tests/syscall_sa.65.c \
		   $(srcdir)/tests/syscall_sa.78.c \
		   $(srcdir)/tests/syscall_sa.83.c \
		   $(srcdir)/tests/syscall_sa.85.c 


#TEST_INPUTS_RT_SRC = $(wildcard $(srcdir)/tests/syscall_rt*.c)
TEST_INPUTS_RT_SRC = \
                   $(srcdir)/tests/syscall_rt.18.c


# TEST_INPUTS_TS_SRC = $(wildcard $(srcdir)/tests/syscall_ts*.c)
TEST_INPUTS_TS_SRC = \
		   $(srcdir)/tests/syscall_tst.100.1.c \
		   $(srcdir)/tests/syscall_tst.100.2.c \
		   $(srcdir)/tests/syscall_tst.102.1.c \
		   $(srcdir)/tests/syscall_tst.102.2.c \
		   $(srcdir)/tests/syscall_tst.102.3.c \
		   $(srcdir)/tests/syscall_tst.102.4.c \
		   $(srcdir)/tests/syscall_tst.114.1.c \
		   $(srcdir)/tests/syscall_tst.114.2.c \
		   $(srcdir)/tests/syscall_tst.116.1.c \
		   $(srcdir)/tests/syscall_tst.116.2.c \
		   $(srcdir)/tests/syscall_tst.117.c \
		   $(srcdir)/tests/syscall_tst.117.msgctl.01.c \
		   $(srcdir)/tests/syscall_tst.117.msgctl.02.c \
		   $(srcdir)/tests/syscall_tst.117.msgctl.03.c \
		   $(srcdir)/tests/syscall_tst.117.msgctl.08.c \
		   $(srcdir)/tests/syscall_tst.117.msgget.01.c \
		   $(srcdir)/tests/syscall_tst.117.msgget.02.c \
		   $(srcdir)/tests/syscall_tst.117.msgrcv.01.c \
		   $(srcdir)/tests/syscall_tst.117.msgrcv.03.c \
		   $(srcdir)/tests/syscall_tst.117.msgrcv.04.c \
		   $(srcdir)/tests/syscall_tst.117.msgrcv.05.c \
		   $(srcdir)/tests/syscall_tst.117.msgrcv.06.c \
		   $(srcdir)/tests/syscall_tst.117.msgsnd.01.c \
		   $(srcdir)/tests/syscall_tst.117.msgsnd.03.c \
		   $(srcdir)/tests/syscall_tst.117.msgsnd.04.c \
		   $(srcdir)/tests/syscall_tst.117.msgsnd.05.c \
		   $(srcdir)/tests/syscall_tst.117.msgsnd.06.c \
		   $(srcdir)/tests/syscall_tst.117.semctl.01.c \
		   $(srcdir)/tests/syscall_tst.117.semctl.05.c \
		   $(srcdir)/tests/syscall_tst.117.semget.01.c \
		   $(srcdir)/tests/syscall_tst.117.semget.03.c \
		   $(srcdir)/tests/syscall_tst.117.semop.01.c \
		   $(srcdir)/tests/syscall_tst.117.semop.03.c \
		   $(srcdir)/tests/syscall_tst.117.semop.04.c \
		   $(srcdir)/tests/syscall_tst.117.semop.05.c \
		   $(srcdir)/tests/syscall_tst.117.shmat.01.c \
		   $(srcdir)/tests/syscall_tst.117.shmctl.01.c \
		   $(srcdir)/tests/syscall_tst.117.shmctl.04.c \
		   $(srcdir)/tests/syscall_tst.117.shmdt.01.c \
		   $(srcdir)/tests/syscall_tst.117.shmdt.02.c \
		   $(srcdir)/tests/syscall_tst.117.shmget.01.c \
		   $(srcdir)/tests/syscall_tst.117.shmget.02.c \
		   $(srcdir)/tests/syscall_tst.118.1.c \
		   $(srcdir)/tests/syscall_tst.118.2.c \
		   $(srcdir)/tests/syscall_tst.118.3.c \
		   $(srcdir)/tests/syscall_tst.122.c \
		   $(srcdir)/tests/syscall_tst.125.1.c \
		   $(srcdir)/tests/syscall_tst.125.2.c \
		   $(srcdir)/tests/syscall_tst.125.3.c \
		   $(srcdir)/tests/syscall_tst.133.c \
		   $(srcdir)/tests/syscall_tst.140.2.c \
		   $(srcdir)/tests/syscall_tst.141.1.c \
		   $(srcdir)/tests/syscall_tst.141.2.c \
		   $(srcdir)/tests/syscall_tst.141.3.c \
		   $(srcdir)/tests/syscall_tst.141.4.c \
		   $(srcdir)/tests/syscall_tst.142.1.c \
		   $(srcdir)/tests/syscall_tst.142.2.c \
		   $(srcdir)/tests/syscall_tst.142.3.c \
		   $(srcdir)/tests/syscall_tst.144.1.c \
		   $(srcdir)/tests/syscall_tst.144.2.c \
		   $(srcdir)/tests/syscall_tst.144.3.c \
		   $(srcdir)/tests/syscall_tst.144.4.c \
		   $(srcdir)/tests/syscall_tst.144.5.c \
		   $(srcdir)/tests/syscall_tst.146.1.c \
		   $(srcdir)/tests/syscall_tst.146.2.c \
		   $(srcdir)/tests/syscall_tst.146.3.c \
		   $(srcdir)/tests/syscall_tst.146.4.c \
		   $(srcdir)/tests/syscall_tst.146.5.c \
		   $(srcdir)/tests/syscall_tst.146.6.c \
		   $(srcdir)/tests/syscall_tst.162.1.c \
		   $(srcdir)/tests/syscall_tst.162.2.c \
		   $(srcdir)/tests/syscall_tst.162.3.c \
		   $(srcdir)/tests/syscall_tst.162.4.c \
		   $(srcdir)/tests/syscall_tst.174.1.c \
		   $(srcdir)/tests/syscall_tst.174.2.c \
		   $(srcdir)/tests/syscall_tst.174.3.c \
		   $(srcdir)/tests/syscall_tst.175.c \
		   $(srcdir)/tests/syscall_tst.176.1.c \
		   $(srcdir)/tests/syscall_tst.179.1.c \
		   $(srcdir)/tests/syscall_tst.183.1.c \
		   $(srcdir)/tests/syscall_tst.183.2.c \
		   $(srcdir)/tests/syscall_tst.183.3.c \
		   $(srcdir)/tests/syscall_tst.186.1.c \
		   $(srcdir)/tests/syscall_tst.186.2.c \
		   $(srcdir)/tests/syscall_tst_18.c \
		   $(srcdir)/tests/syscall_tst.192.10.c \
		   $(srcdir)/tests/syscall_tst.192.1.c \
		   $(srcdir)/tests/syscall_tst.192.2.c \
		   $(srcdir)/tests/syscall_tst.192.3.c \
		   $(srcdir)/tests/syscall_tst.192.4.c \
		   $(srcdir)/tests/syscall_tst.192.5.c \
		   $(srcdir)/tests/syscall_tst.192.6.c \
		   $(srcdir)/tests/syscall_tst.192.7.c \
		   $(srcdir)/tests/syscall_tst.192.8.c \
		   $(srcdir)/tests/syscall_tst.192.9.c \
		   $(srcdir)/tests/syscall_tst.195.5.c \
		   $(srcdir)/tests/syscall_tst.195.6.c \
		   $(srcdir)/tests/syscall_tst.196.1.c \
		   $(srcdir)/tests/syscall_tst.197.1.c \
		   $(srcdir)/tests/syscall_tst.197.2.c \
		   $(srcdir)/tests/syscall_tst.199.1.c \
		   $(srcdir)/tests/syscall_tst.199.2.c \
		   $(srcdir)/tests/syscall_tst.199.3.c \
		   $(srcdir)/tests/syscall_tst.200.1.c \
		   $(srcdir)/tests/syscall_tst.200.3.c \
		   $(srcdir)/tests/syscall_tst.201.1.c \
		   $(srcdir)/tests/syscall_tst.205.1.c \
		   $(srcdir)/tests/syscall_tst.205.2.c \
		   $(srcdir)/tests/syscall_tst.205.4.c \
		   $(srcdir)/tests/syscall_tst.207.c \
		   $(srcdir)/tests/syscall_tst.212.c \
		   $(srcdir)/tests/syscall_tst.220.1.c \
		   $(srcdir)/tests/syscall_tst.220.2.c \
		   $(srcdir)/tests/syscall_tst.220.3.c \
		   $(srcdir)/tests/syscall_tst.220.4.c \
		   $(srcdir)/tests/syscall_tst.221.01.c \
		   $(srcdir)/tests/syscall_tst.221.02.c \
		   $(srcdir)/tests/syscall_tst.221.03.c \
		   $(srcdir)/tests/syscall_tst.221.04.c \
		   $(srcdir)/tests/syscall_tst.221.05.c \
		   $(srcdir)/tests/syscall_tst.221.06.c \
		   $(srcdir)/tests/syscall_tst.221.07.c \
		   $(srcdir)/tests/syscall_tst.221.08.c \
		   $(srcdir)/tests/syscall_tst.221.09.c \
		   $(srcdir)/tests/syscall_tst.221.10.c \
		   $(srcdir)/tests/syscall_tst.221.11.c \
		   $(srcdir)/tests/syscall_tst.221.12.c \
		   $(srcdir)/tests/syscall_tst.221.13.c \
		   $(srcdir)/tests/syscall_tst.221.16.c \
		   $(srcdir)/tests/syscall_tst.221.17.c \
		   $(srcdir)/tests/syscall_tst.221.19.c \
		   $(srcdir)/tests/syscall_tst.221.20.c \
		   $(srcdir)/tests/syscall_tst.221.21.c \
		   $(srcdir)/tests/syscall_tst.221.22.c \
		   $(srcdir)/tests/syscall_tst.221.23.c \
		   $(srcdir)/tests/syscall_tst.221.24.c \
		   $(srcdir)/tests/syscall_tst.221.25.c \
		   $(srcdir)/tests/syscall_tst.221.26.c \
		   $(srcdir)/tests/syscall_tst.221.27.c \
		   $(srcdir)/tests/syscall_tst.221.28.c \
		   $(srcdir)/tests/syscall_tst.224.c \
		   $(srcdir)/tests/syscall_tst.243.1.c \
		   $(srcdir)/tests/syscall_tst.243.2.c \
		   $(srcdir)/tests/syscall_tst.252.c \
		   $(srcdir)/tests/syscall_tst.258.c \
		   $(srcdir)/tests/syscall_tst.265.c \
		   $(srcdir)/tests/syscall_tst.266.c \
		   $(srcdir)/tests/syscall_tst.306.c \
		   $(srcdir)/tests/syscall_tst.1.1.c \
		   $(srcdir)/tests/syscall_tst.1.2.c \
		   $(srcdir)/tests/syscall_tst.3.1.c \
		   $(srcdir)/tests/syscall_tst.3.2.c \
		   $(srcdir)/tests/syscall_tst.3.3.c \
		   $(srcdir)/tests/syscall_tst.3.4.c \
		   $(srcdir)/tests/syscall_tst.4.1.c \
		   $(srcdir)/tests/syscall_tst.4.2.c \
		   $(srcdir)/tests/syscall_tst.4.3.c \
		   $(srcdir)/tests/syscall_tst.4.4.c \
		   $(srcdir)/tests/syscall_tst.4.5.c \
		   $(srcdir)/tests/syscall_tst.9.1.c \
		   $(srcdir)/tests/syscall_tst.9.2.c \
		   $(srcdir)/tests/syscall_tst.9.3.c \
		   $(srcdir)/tests/syscall_tst.9.4.c \
		   $(srcdir)/tests/syscall_tst.13.1.c \
		   $(srcdir)/tests/syscall_tst.13.2.c \
		   $(srcdir)/tests/syscall_tst.19.1.c \
		   $(srcdir)/tests/syscall_tst.19.2.c \
		   $(srcdir)/tests/syscall_tst.19.3.c \
		   $(srcdir)/tests/syscall_tst.19.4.c \
		   $(srcdir)/tests/syscall_tst.19.5.c \
		   $(srcdir)/tests/syscall_tst.19.6.c \
		   $(srcdir)/tests/syscall_tst.19.7.c \
		   $(srcdir)/tests/syscall_tst.19.8.c \
		   $(srcdir)/tests/syscall_tst.19.9.c \
		   $(srcdir)/tests/syscall_tst.19.10.c \
		   $(srcdir)/tests/syscall_tst.20.1.c \
		   $(srcdir)/tests/syscall_tst.20.2.c \
		   $(srcdir)/tests/syscall_tst.29.1.c \
		   $(srcdir)/tests/syscall_tst.29.2.c \
		   $(srcdir)/tests/syscall_tst.29.3.c \
		   $(srcdir)/tests/syscall_tst.30.c \
		   $(srcdir)/tests/syscall_tst.311.c \
		   $(srcdir)/tests/syscall_tst.33.1.c \
		   $(srcdir)/tests/syscall_tst.33.2.c \
		   $(srcdir)/tests/syscall_tst.36.1.c \
		   $(srcdir)/tests/syscall_tst.36.2.c \
		   $(srcdir)/tests/syscall_tst.38.1.c \
		   $(srcdir)/tests/syscall_tst.38.2.c \
		   $(srcdir)/tests/syscall_tst.38.3.c \
		   $(srcdir)/tests/syscall_tst.38.4.c \
		   $(srcdir)/tests/syscall_tst.38.5.c \
		   $(srcdir)/tests/syscall_tst.38.6.c \
		   $(srcdir)/tests/syscall_tst.38.7.c \
		   $(srcdir)/tests/syscall_tst.38.8.c \
		   $(srcdir)/tests/syscall_tst.38.10.c \
		   $(srcdir)/tests/syscall_tst.38.13.c \
		   $(srcdir)/tests/syscall_tst.38.14.c \
		   $(srcdir)/tests/syscall_tst.54.c \
		   $(srcdir)/tests/syscall_tst.24.1.c \
		   $(srcdir)/tests/syscall_tst.24.2.c \
		   $(srcdir)/tests/syscall_tst.24.3.c \
		   $(srcdir)/tests/syscall_tst.57.1.c \
		   $(srcdir)/tests/syscall_tst.57.2.c \
		   $(srcdir)/tests/syscall_tst.57.3.c \
		   $(srcdir)/tests/syscall_tst.60.1.c \
		   $(srcdir)/tests/syscall_tst.60.2.c \
		   $(srcdir)/tests/syscall_tst.60.3.c \
		   $(srcdir)/tests/syscall_tst.63.1.c \
		   $(srcdir)/tests/syscall_tst.63.2.c \
		   $(srcdir)/tests/syscall_tst.63.3.c \
		   $(srcdir)/tests/syscall_tst.63.4.c \
		   $(srcdir)/tests/syscall_tst.63.5.c \
		   $(srcdir)/tests/syscall_tst.64.1.c \
		   $(srcdir)/tests/syscall_tst.64.2.c \
		   $(srcdir)/tests/syscall_tst.76.1.c \
		   $(srcdir)/tests/syscall_tst.76.2.c \
		   $(srcdir)/tests/syscall_tst.78.1.c \
		   $(srcdir)/tests/syscall_tst.83.1.c \
		   $(srcdir)/tests/syscall_tst.83.2.c \
		   $(srcdir)/tests/syscall_tst.83.4.c \
		   $(srcdir)/tests/syscall_tst.83.5.c \
		   $(srcdir)/tests/syscall_tst.91.1.c \
		   $(srcdir)/tests/syscall_tst.91.2.c \
		   $(srcdir)/tests/syscall_tst.91.3.c \
		   $(srcdir)/tests/syscall_tst.93.1.c \
		   $(srcdir)/tests/syscall_tst.93.2.c \
		   $(srcdir)/tests/syscall_tst.93.3.c \
		   $(srcdir)/tests/syscall_tst.93.4.c \
		   $(srcdir)/tests/syscall_tst.94.1.c \
		   $(srcdir)/tests/syscall_tst.94.2.c \
		   $(srcdir)/tests/syscall_tst.99.1.c \
		   $(srcdir)/tests/syscall_tst.99.2.c


# These cannot be run reliably (at least not concurrently with other tests.
#		   $(srcdir)/tests/syscall_tst.117.msgget.03.c
#		   $(srcdir)/tests/syscall_tst.117.shmget.03.c
#  			Tries to create message queues or shared memory segments until all resources are exhausted in order
#                       to see what kind of error number is returned. Unfortunately, other tests are also requiring these
#			resources at the same time.
#		   $(srcdir)/tests/syscall_tst.78.2.c
#			Calls gettimeofday() in rapid succession for 30 seconds to make sure the value is monotonically
#			increasing. However, some versions of the kernel have a bug in the way they interact with the RTC
#			which can cause the clock to go backward by small amounts every so often.  See this discussion
#			for an example: http://www.gossamer-threads.com/lists/linux/kernel/813344
#		   $(srcdir)/tests/syscall_tst.95.c 
#			This test does not pass natively on some systems, therefore we shouldn't expect it to pass
#			under x86sim either.
#		   $(srcdir)/tests/syscall_tst.117.msgctl.06.c
#		   $(srcdir)/tests/syscall_tst.117.msgctl.07.c
#		   $(srcdir)/tests/syscall_tst.117.msgget.04.c
#		   $(srcdir)/tests/syscall_tst.117.msgrcv.02.c
#		   $(srcdir)/tests/syscall_tst.117.msgsnd.02.c
#		   $(srcdir)/tests/syscall_tst.117.semctl.02.c
#		   $(srcdir)/tests/syscall_tst.117.semctl.03.c
#		   $(srcdir)/tests/syscall_tst.117.semctl.04.c
#		   $(srcdir)/tests/syscall_tst.117.semget.02.c
#		   $(srcdir)/tests/syscall_tst.117.semop.02.c
#		   $(srcdir)/tests/syscall_tst.117.shmat.02.c
#		   $(srcdir)/tests/syscall_tst.117.shmat.03.c
#		   $(srcdir)/tests/syscall_tst.117.shmctl.02.c
#		   $(srcdir)/tests/syscall_tst.117.shmctl.03.c
#		   $(srcdir)/tests/syscall_tst.117.shmget.04.c
#		   $(srcdir)/tests/syscall_tst.117.shmget.05.c
#		   $(srcdir)/tests/syscall_tst.195.1.c
#		   $(srcdir)/tests/syscall_tst.195.2.c
#		   $(srcdir)/tests/syscall_tst.195.3.c
#		   $(srcdir)/tests/syscall_tst.196.2.c
#		   $(srcdir)/tests/syscall_tst.196.3.c
#		   $(srcdir)/tests/syscall_tst.221.18.c  (tries to setreud in a privileged way)
#		   $(srcdir)/tests/syscall_tst.83.3.c
#		   $(srcdir)/tests/syscall_tst.99.3.c
#			These tests either explicitly check for root effective uid, or the fail with EACCESS on some
#			kernels. We can't be testing ROSE as root!
#		   $(srcdir)/tests/syscall_tst.117.msgctl.09.c
#		   $(srcdir)/tests/syscall_tst.117.msgctl.10.c
#		   $(srcdir)/tests/syscall_tst.117.msgctl.11.c
#		   $(srcdir)/tests/syscall_tst.117.semctl.06.c
#		   $(srcdir)/tests/syscall_tst.221.14.c
#		   $(srcdir)/tests/syscall_tst.221.15.c
#			Disabled because of deadlocks in simulated futex() call.  These need more work and should be enabled
#			when possible. [FIXME RPM 2011-01-07]
#		   $(srcdir)/tests/syscall_tst.140.1.c
#			This test cannot be run under the simulator with stderr redirected to a file (it enters an infinite loop
#			somewhere in the setrlimit() syscall emulation). Since "make check" runs tests with their stderr
#			redirected to a file, we will skip this test.
TEST_INPUTS_NM_SRC = \
		   $(srcdir)/tests/syscall.114.c \
		   $(srcdir)/tests/syscall.122.01.c \
		   $(srcdir)/tests/syscall.122.02.c \
		   $(srcdir)/tests/syscall.122.03.c \
		   $(srcdir)/tests/syscall.13.c \
		   $(srcdir)/tests/syscall.197.1.c \
		   $(srcdir)/tests/syscall.197.3.c \
		   $(srcdir)/tests/syscall.199.c \
		   $(srcdir)/tests/syscall.200.c \
		   $(srcdir)/tests/syscall.201.c \
		   $(srcdir)/tests/syscall.202.c \
		   $(srcdir)/tests/syscall.20.c \
		   $(srcdir)/tests/syscall.224.c \
		   $(srcdir)/tests/syscall.3.c \
		   $(srcdir)/tests/syscall.4.1.c \
		   $(srcdir)/tests/syscall.41.c \
		   $(srcdir)/tests/syscall.4.2.c \
		   $(srcdir)/tests/syscall.47.c \
		   $(srcdir)/tests/syscall.49.c \
		   $(srcdir)/tests/syscall.50.c \
		   $(srcdir)/tests/syscall.5.1.c \
		   $(srcdir)/tests/syscall.5.2.c \
		   $(srcdir)/tests/syscall.5.4.c \
		   $(srcdir)/tests/syscall.5.6.c \
		   $(srcdir)/tests/syscall.57.c \
		   $(srcdir)/tests/syscall.5.9.c \
		   $(srcdir)/tests/syscall.64.c \
		   $(srcdir)/tests/syscall.65.c \
		   $(srcdir)/tests/syscall.78.c \
		   $(srcdir)/tests/syscall.83.c \
		   $(srcdir)/tests/syscall.85.c 

TEST_INPUTS_SRC = $(TEST_INPUTS_SA_SRC) $(TEST_INPUTS_RT_SRC) $(TEST_INPUTS_TS_SRC) $(TEST_INPUTS_NM_SRC)
TEST_INPUTS_SA = $(basename $(notdir $(TEST_INPUTS_SA_SRC)))
TEST_INPUTS_RT = $(basename $(notdir $(TEST_INPUTS_RT_SRC)))
TEST_INPUTS_TS = $(basename $(notdir $(TEST_INPUTS_TS_SRC)))
TEST_INPUTS_NM = $(basename $(notdir $(TEST_INPUTS_NM_SRC)))
TEST_INPUTS = $(TEST_INPUTS_SA) $(TEST_INPUTS_RT) $(TEST_INPUTS_TS) $(TEST_INPUTS_NM)

# The test support library. These will not be generated if ENABLE_I386 is not defined.
TEST_SUPPORT_OBJ = $(patsubst %.c, %.o, $(notdir $(TEST_SUPPORT_SRC)))
IPC_SUPPORT_SRC = $(srcdir)/tests/libipc.c
IPC_SUPPORT_OBJ = $(patsubst %.c, %.o, $(notdir $(IPC_SUPPORT_SRC)))
all: all-am

.SUFFIXES:
.SUFFIXES: .C .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps projects/simulator/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps projects/simulator/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(mkdir_p) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(libLIBRARIES_INSTALL) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(libLIBRARIES_INSTALL) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p=$(am__strip_dir) \
	    echo " $(RANLIB) '$(DESTDIR)$(libdir)/$$p'"; \
	    $(RANLIB) "$(DESTDIR)$(libdir)/$$p"; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
sandbox$(EXEEXT): $(sandbox_OBJECTS) $(sandbox_DEPENDENCIES) 
	@rm -f sandbox$(EXEEXT)
	$(CXXLINK) $(sandbox_LDFLAGS) $(sandbox_OBJECTS) $(sandbox_LDADD) $(LIBS)
x86sim$(EXEEXT): $(x86sim_OBJECTS) $(x86sim_DEPENDENCIES) 
	@rm -f x86sim$(EXEEXT)
	$(CXXLINK) $(x86sim_LDFLAGS) $(x86sim_OBJECTS) $(x86sim_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(LTCXXCOMPILE) -c -o $@ $<

sandbox-emulator.o: emulator.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-emulator.o `test -f 'emulator.C' || echo '$(srcdir)/'`emulator.C

sandbox-emulator.obj: emulator.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-emulator.obj `if test -f 'emulator.C'; then $(CYGPATH_W) 'emulator.C'; else $(CYGPATH_W) '$(srcdir)/emulator.C'; fi`

sandbox-simulate.o: simulate.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-simulate.o `test -f 'simulate.C' || echo '$(srcdir)/'`simulate.C

sandbox-simulate.obj: simulate.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-simulate.obj `if test -f 'simulate.C'; then $(CYGPATH_W) 'simulate.C'; else $(CYGPATH_W) '$(srcdir)/simulate.C'; fi`

sandbox-linuxcalls.o: linuxcalls.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-linuxcalls.o `test -f 'linuxcalls.C' || echo '$(srcdir)/'`linuxcalls.C

sandbox-linuxcalls.obj: linuxcalls.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-linuxcalls.obj `if test -f 'linuxcalls.C'; then $(CYGPATH_W) 'linuxcalls.C'; else $(CYGPATH_W) '$(srcdir)/linuxcalls.C'; fi`

sandbox-elfload.o: elfload.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-elfload.o `test -f 'elfload.C' || echo '$(srcdir)/'`elfload.C

sandbox-elfload.obj: elfload.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(sandbox_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sandbox-elfload.obj `if test -f 'elfload.C'; then $(CYGPATH_W) 'elfload.C'; else $(CYGPATH_W) '$(srcdir)/elfload.C'; fi`

x86sim-x86sim.o: x86sim.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86sim_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86sim-x86sim.o `test -f 'x86sim.C' || echo '$(srcdir)/'`x86sim.C

x86sim-x86sim.obj: x86sim.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86sim_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86sim-x86sim.obj `if test -f 'x86sim.C'; then $(CYGPATH_W) 'x86sim.C'; else $(CYGPATH_W) '$(srcdir)/x86sim.C'; fi`

x86sim-x86print.o: x86print.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86sim_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86sim-x86print.o `test -f 'x86print.C' || echo '$(srcdir)/'`x86print.C

x86sim-x86print.obj: x86print.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(x86sim_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o x86sim-x86print.obj `if test -f 'x86print.C'; then $(CYGPATH_W) 'x86print.C'; else $(CYGPATH_W) '$(srcdir)/x86print.C'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(includedir)" || $(mkdir_p) "$(DESTDIR)$(includedir)"
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(includeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(includedir)/$$f'"; \
	  $(includeHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(includedir)/$$f"; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(includedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(includedir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/$(srcdir)/tests $(distdir)/../../config $(distdir)/tests
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES clean-libtool clean-local \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-exec-am: install-libLIBRARIES

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-includeHEADERS uninstall-info-am \
	uninstall-libLIBRARIES

.PHONY: CTAGS GTAGS all all-am check check-am check-local clean \
	clean-generic clean-libLIBRARIES clean-libtool clean-local \
	clean-noinstPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-includeHEADERS install-info install-info-am \
	install-libLIBRARIES install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-includeHEADERS \
	uninstall-info-am uninstall-libLIBRARIES


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

# The test inputs. These will not be generated if ENABLE_I386 is not defined.
$(TEST_INPUTS_SA): %: $(srcdir)/tests/%.c
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ $^
$(TEST_INPUTS_RT): %: $(srcdir)/tests/%.c
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ $^ -lrt
$(TEST_INPUTS_TS): %: $(srcdir)/tests/%.c libtestsupport.a libipc.a
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ $^ -lrt 
$(TEST_INPUTS_NM): %: $(srcdir)/tests/%.c
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ $^ 
# Target to manually build the test inputs. (Not used internally)
.PHONY: test_inputs
test_inputs: $(TEST_INPUTS)
libtestsupport.a: $(TEST_SUPPORT_OBJ)
	@echo "  AR      $@"
	@ar -rc $@ $(TEST_SUPPORT_OBJ)
$(TEST_SUPPORT_OBJ): %.o: $(srcdir)/tests/%.c
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ -c $^
libipc.a: $(IPC_SUPPORT_OBJ)
	@echo "  AR      $@"
	@ar -rc $@ $(IPC_SUPPORT_OBJ)
$(IPC_SUPPORT_OBJ): %.o: $(srcdir)/tests/%.c
	@echo "  CC32    $@"
	@$(CC) $(CFLAGS32) -g -I$(srcdir)/tests -Wall -o $@ -c $^
@ENABLE_I386_TRUE@$(TEST_TARGETS): %.passed: % $(srcdir)/x86sim.conf x86sim
@ENABLE_I386_TRUE@	@$(RTH_RUN) INPUT=./$< $(srcdir)/x86sim.conf $@
@ENABLE_I386_FALSE@warn_no_tests:
@ENABLE_I386_FALSE@	@echo "  NOTE    x86sim testing is disabled (no i386 support)"
check-local: $(TEST_TARGETS)
	@$(RTH_STATS)

# "tmp-sim" is the temp directory used to run the tests. See x86sim.conf.
clean-local:
	if [ -d tmp-sim ]; then chmod -f a+rwx -R tmp-sim; fi
	rm -rf tmp-sim x-core.rose test-file-fchown32
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
