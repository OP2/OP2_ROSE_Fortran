#!/usr/bin/perl
my $desc = <<"EOF";
ASCII TAB characters appearing in source code are interpreted to mean "indent
to the next column which is a multiple of eight."  Editor choice and indentation
tend to be religious matters for many programmers, yet editors have differing
capabilities when it comes to TAB characters, tabstops, and the keyboard button
labeled "Tab" [see http://www.jwz.org/doc/tabs-vs-spaces.html].  Therefore,
if a TAB character appears in a source file, it must be possible to interpret
its meaning consistently. The following files appear (heuristically) to violate
this policy.  You may rerun this script as "@{[$0=~/([^\/]+)$/]} --verbose"
to see a list of lines that appear to violate this policy.  To fix a line,
replace the TAB characters with the appropriate number of SPC characters based
on the amount of line indentation desired. The files in possible volation are:
EOF

BEGIN {push @INC, $1 if $0 =~ /(.*)\//}
use strict;
use FileLister;
use Text::Tabs;
use Policies;

my $verbose;
while ($ARGV[0] =~ /^-/) {
  if ($ARGV[0] eq "--") {
    shift @ARGV;
    last;
  } elsif ($ARGV[0] eq "--verbose") {
    $verbose = 1;
    shift @ARGV;
  } else {
    die "$0: unknown switch: $ARGV[0]\n";
  }
}

# Return the total counts represented by the delta hash
sub total {
  my($deltas) = @_;
  my $total = 0;
  $total += $_ for values %$deltas;
  return $total;
}

# Show a histogram
sub show {
  my($deltas) = @_;
  my $total = total($deltas);
  for my $delta (sort {$a <=> $b} keys %$deltas) {
    my $pct = 100 * $deltas->{$delta} / $total;
    printf "  %3d %4d (%3d%%) %1s\n", $delta, $deltas->{$delta}, $pct, '-' x int($pct);
  }
}

# Basic indentation amount is the lowest delta with at least 40% occurrence.
sub base_indentation {
  my($deltas) = @_;
  my $total = total($deltas);
  for my $delta (sort {$a <=> $b} keys %$deltas) {
    return $delta if $deltas->{$delta} / $total > 0.4;
  }
  return 1;
}

# Returns a list of basic indentation amounts for files where more than one amount is used.


sub DEBUG {
  my $prefix = sprintf "%-8s", shift @_;
  my @data = split /\n/, join "", @_;
  print "$prefix |", shift(@data), "\n";
  print " " x length($prefix), " |", $_, "\n" for @data;
}

# Returns a closure that reads one line. String literals and comments that span multiple lines are treated as a single line
# as are certain other constructs that are typically not indented like others.
sub line_factory {
  my $s = join "", @_;
  return sub {
    my $plevel=0;		# nesting level for parentheses
    my $eos=0;			# if true, parse to at least the next ';'
    my $ret;			# return value

    # CPP directives don't always contain balanced parens, so match them as a whole at the beginning of a line.
    # Furthermore, they don't typically follow the C/C++ indentation since they're not part of the language, so ignore them.
    if ($s =~ /\G(\s*#(.*?\\\n)*(.*?)\n)/cg) {
      my $cpp = $1;
      return "\n" x $cpp =~ tr/\n/\n/;
    }

    while (1) {
      $s =~ /\G([ \t]+)/cg       and do {$ret.=$1;next};
      $s =~ /\G(\()/cg           and do {$ret.=$1;$plevel++;next};
      $s =~ /\G(\))/cg           and do {$ret.=$1;$plevel-=1 if $plevel;next};
      $s =~ /\G(<<)/cg           and do {$ret.=$1;$eos=1;next};
      $s =~ /\G(\/\/.*)/cg       and do {$ret.=$1;next};		# "//" comment
      $s =~ /\G(\/\*.*?\*\/)/cgs and do {$ret.=$1;next};	# C style comment
      $s =~ /\G("(\\[0-7]{,3}|\\.|[^"\\])*")/cgs and do {$ret.=$1;next}; # string literal
      $s =~ /\G(\n)/cg 		 and do {$ret.=$1;return $ret unless $plevel || $eos};
      $s =~ /\G(;)/cg            and do {$ret.=$1;$eos=0;next};
      $s =~ /\G(.)/cgs 		 and do {$ret.=$1;next};
      $s =~ /\G$/      		 and return $ret;
    }
    return $ret;
  }
}

# Returns a list of logical "lines" from a file.
sub lines {
  local(*FILE) = @_;
  my $line_factory = line_factory <FILE>;
  my @lines;
  local($_);
  while ($_=&$line_factory) {
    push @lines, $_;
  }
  return @lines;
}

my $nfail=0;
my $files = FileLister->new(@ARGV);
while (my $filename = $files->next_file) {
  if ($filename =~ /\.(h|hh|hpp|c|cpp|C)$/ && !is_disabled($filename) && open FILE, "<", $filename) {
    #DEBUG "FILE", $filename;
    my @lines = lines(\*FILE);
    close FILE;

    # Look for certain settings in the first line of source code.  This allows authors to override this policy checker
    # and to advertise how indentation is handled.
    next if $lines[0] =~ /\bECTS_skip\b/;
    my $base;
    $base = $1 if $lines[0] =~ /\bECTS_base=(\d+)/;

    # Determine indentation delta distributions for space-only indentation vs. tab indentation. Look only at increasing
    # levels of indentation.  We look at changes in indentation rather than absolute indentation because it often happens
    # that some one writes a bunch of code, and then someone else inserts more code using a different indentation style
    # but offsetting their new code according to the indentation level of the old code at the insertion point.
    my($indent,$nspc,$ntab,%spc_deltas,%tab_deltas);
    for (@lines) {
      my $line = expand($_); # uses 8-column tab-stops
      #DEBUG "LINE", $line;
      my $actual = length $1 if $line =~ /^(\s*)\S/;
      my $delta = $actual - $indent;
      $indent = $actual;
      if ($delta>0) {
	if (/^\s*?\t/) {
	  $ntab++;
	  $tab_deltas{$delta}++;
	  #DEBUG "TAB", $delta;
	} else {
	  $nspc++;
	  $spc_deltas{$delta}++;
	  #DEBUG "SPC", $delta;
	}
      }
    }

    # Base indentation is computed from spaces since spaces are a known width and generally more common than tabs. We cannot
    # use TAB characters to compute base indentation because their size is ambiguous, depending on where tab stops were set
    # in the editor where the source was composed.  However, if less than 10% of the lines are SPC indented then there is
    # probably not enough data to make the determination. If there are at least 25 lines then assume that the base indentation
    # is eight since a TAB-indented file will appear as eight-column indentation in most default-configured editors, printers,
    # terminals, web browsers, etc.
    next if $ntab==0;
    if (!defined $base) {
      if ($nspc<10 || $nspc / ($nspc+$ntab) < 0.1) {
	next if $nspc+$ntab < 25;
	$base = 8;
      } else {
	$base = base_indentation \%spc_deltas;
      }
    }

    # Does file violate this policy?
    my $nviolations=0;
    for my $delta (sort {$a <=> $b} keys %tab_deltas) {
      $nviolations += $tab_deltas{$delta} if $delta % $base;
    }
    next unless $nviolations;

    print $desc if 0==$nfail++ && !$verbose;
    print "  $filename (base=$base, violations=$nviolations)\n";

    if (1) {
      printf "    nspc=%d(%d%%); ntab=%d(%d%%)\n", $nspc, 100*$nspc/($nspc+$ntab), $ntab, 100*$ntab/($nspc+$ntab);
      show \%spc_deltas;
      #show \%tab_deltas;
    }

    # Look for TAB indentation that is not a multiple of the base indentation.  Use the same rule as used to build the
    # %tab_deltas, otherwise we might get errors in verbose mode that aren't reported for non-verbose, or vice versa.
    if ($verbose && $nviolations) {
      $indent = 0;
      my $linenum=1;
      for (@lines) {
	my $line = expand($_);
	my $actual = length $1 if $line =~ /^(\s*)\S/;
	my $delta = $actual - $indent;
	$indent = $actual;
        #DEBUG $linenum, $line;
	if ($delta>0 && /^\s*?\t/ && $delta % $base) {
	  if ($verbose) {
	    $nfail++;
	    print "$filename:$linenum: TAB-based indentation (delta=$delta) is not a multiple of $base\n";
	  } else {
	    print $desc unless $nfail++;
	    print "  $filename\n";
	    last;
	  }
	}
	$linenum += tr/\n/\n/;
      }
    }
  }
}
exit($nfail>0 ? 1 : 0);
