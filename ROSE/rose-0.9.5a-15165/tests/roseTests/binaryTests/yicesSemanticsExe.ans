=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482c8:push   ebp
    ax=v32[32]
    cx=v33[32]
    dx=v34[32]
    bx=v35[32]
    sp=(add[32] v36[32] -4[32])
    bp=v37[32]
    si=v38[32]
    di=v39[32]
    es=v40[16]
    cs=v41[16]
    ss=v42[16]
    ds=v43[16]
    fs=v44[16]
    gs=v45[16]
    cf=v46[1]
    ?1=v47[1]
    pf=v48[1]
    ?3=v49[1]
    af=v50[1]
    ?5=v51[1]
    zf=v52[1]
    sf=v53[1]
    tf=v54[1]
    if=v55[1]
    df=v56[1]
    of=v57[1]
    iopl0=v58[1]
    iopl1=v59[1]
    nt=v60[1]
    ?15=v61[1]
    ip=134513353[32]
    memory:
        (add[32] v36[32] -4[32]): v37[32] 4 bytes
    ip = 134513353[32]
0x80482c9:mov    ebp, esp
    ax=v32[32]
    cx=v33[32]
    dx=v34[32]
    bx=v35[32]
    sp=(add[32] v36[32] -4[32])
    bp=(add[32] v36[32] -4[32])
    si=v38[32]
    di=v39[32]
    es=v40[16]
    cs=v41[16]
    ss=v42[16]
    ds=v43[16]
    fs=v44[16]
    gs=v45[16]
    cf=v46[1]
    ?1=v47[1]
    pf=v48[1]
    ?3=v49[1]
    af=v50[1]
    ?5=v51[1]
    zf=v52[1]
    sf=v53[1]
    tf=v54[1]
    if=v55[1]
    df=v56[1]
    of=v57[1]
    iopl0=v58[1]
    iopl1=v59[1]
    nt=v60[1]
    ?15=v61[1]
    ip=134513355[32]
    memory:
        (add[32] v36[32] -4[32]): v37[32] 4 bytes
    ip = 134513355[32]
0x80482cb:sub    esp, 0x08
    ax=v32[32]
    cx=v33[32]
    dx=v34[32]
    bx=v35[32]
    sp=(add[32] (add[32] v36[32] -4[32]) -8[32])
    bp=(add[32] v36[32] -4[32])
    si=v38[32]
    di=v39[32]
    es=v40[16]
    cs=v41[16]
    ss=v42[16]
    ds=v43[16]
    fs=v44[16]
    gs=v45[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    ?1=v47[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))))))
    ?3=v49[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    ?5=v51[1]
    zf=(zerop[1] (add[32] (add[32] v36[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))
    tf=v54[1]
    if=v55[1]
    df=v56[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    iopl0=v58[1]
    iopl1=v59[1]
    nt=v60[1]
    ?15=v61[1]
    ip=134513358[32]
    memory:
        (add[32] v36[32] -4[32]): v37[32] 4 bytes
    ip = 134513358[32]
0x80482ce:call   0x08048364
    ax=v32[32]
    cx=v33[32]
    dx=v34[32]
    bx=v35[32]
    sp=(add[32] (add[32] (add[32] v36[32] -4[32]) -8[32]) -4[32])
    bp=(add[32] v36[32] -4[32])
    si=v38[32]
    di=v39[32]
    es=v40[16]
    cs=v41[16]
    ss=v42[16]
    ds=v43[16]
    fs=v44[16]
    gs=v45[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    ?1=v47[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v36[32] -4[32]) -8[32])))))))
    ?3=v49[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    ?5=v51[1]
    zf=(zerop[1] (add[32] (add[32] v36[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v36[32] -4[32]) -8[32]))
    tf=v54[1]
    if=v55[1]
    df=v56[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v36[32] -4[32])) 4294967288[33]))))))
    iopl0=v58[1]
    iopl1=v59[1]
    nt=v60[1]
    ?15=v61[1]
    ip=134513508[32]
    memory:
        (add[32] v36[32] -4[32]): v37[32] 4 bytes
        (add[32] (add[32] (add[32] v36[32] -4[32]) -8[32]) -4[32]): 134513363[32] 4 bytes
    ip = 134513508[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d3:call   0x080483d0
    ax=v94[32]
    cx=v95[32]
    dx=v96[32]
    bx=v97[32]
    sp=(add[32] v98[32] -4[32])
    bp=v99[32]
    si=v100[32]
    di=v101[32]
    es=v102[16]
    cs=v103[16]
    ss=v104[16]
    ds=v105[16]
    fs=v106[16]
    gs=v107[16]
    cf=v108[1]
    ?1=v109[1]
    pf=v110[1]
    ?3=v111[1]
    af=v112[1]
    ?5=v113[1]
    zf=v114[1]
    sf=v115[1]
    tf=v116[1]
    if=v117[1]
    df=v118[1]
    of=v119[1]
    iopl0=v120[1]
    iopl1=v121[1]
    nt=v122[1]
    ?15=v123[1]
    ip=134513616[32]
    memory:
        (add[32] v98[32] -4[32]): 134513368[32] 4 bytes
    ip = 134513616[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482d8:call   0x08048580
    ax=v156[32]
    cx=v157[32]
    dx=v158[32]
    bx=v159[32]
    sp=(add[32] v160[32] -4[32])
    bp=v161[32]
    si=v162[32]
    di=v163[32]
    es=v164[16]
    cs=v165[16]
    ss=v166[16]
    ds=v167[16]
    fs=v168[16]
    gs=v169[16]
    cf=v170[1]
    ?1=v171[1]
    pf=v172[1]
    ?3=v173[1]
    af=v174[1]
    ?5=v175[1]
    zf=v176[1]
    sf=v177[1]
    tf=v178[1]
    if=v179[1]
    df=v180[1]
    of=v181[1]
    iopl0=v182[1]
    iopl1=v183[1]
    nt=v184[1]
    ?15=v185[1]
    ip=134514048[32]
    memory:
        (add[32] v160[32] -4[32]): 134513373[32] 4 bytes
    ip = 134514048[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482dd:leave  
    ax=v218[32]
    cx=v219[32]
    dx=v220[32]
    bx=v221[32]
    sp=(add[32] v223[32] 4[32])
    bp=v248[32]
    si=v224[32]
    di=v225[32]
    es=v226[16]
    cs=v227[16]
    ss=v228[16]
    ds=v229[16]
    fs=v230[16]
    gs=v231[16]
    cf=v232[1]
    ?1=v233[1]
    pf=v234[1]
    ?3=v235[1]
    af=v236[1]
    ?5=v237[1]
    zf=v238[1]
    sf=v239[1]
    tf=v240[1]
    if=v241[1]
    df=v242[1]
    of=v243[1]
    iopl0=v244[1]
    iopl1=v245[1]
    nt=v246[1]
    ?15=v247[1]
    ip=134513374[32]
    memory:
        v223[32]: v248[32] 4 bytes read-only
    ip = 134513374[32]
0x80482de:ret    
    ax=v218[32]
    cx=v219[32]
    dx=v220[32]
    bx=v221[32]
    sp=(add[32] (add[32] v223[32] 4[32]) 4[32])
    bp=v248[32]
    si=v224[32]
    di=v225[32]
    es=v226[16]
    cs=v227[16]
    ss=v228[16]
    ds=v229[16]
    fs=v230[16]
    gs=v231[16]
    cf=v232[1]
    ?1=v233[1]
    pf=v234[1]
    ?3=v235[1]
    af=v236[1]
    ?5=v237[1]
    zf=v238[1]
    sf=v239[1]
    tf=v240[1]
    if=v241[1]
    df=v242[1]
    of=v243[1]
    iopl0=v244[1]
    iopl1=v245[1]
    nt=v246[1]
    ?15=v247[1]
    ip=v249[32]
    memory:
        v223[32]: v248[32] 4 bytes read-only
        (add[32] v223[32] 4[32]): v249[32] 4 bytes read-only
    ip = v249[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482df:add    bh, bh
    ax=v282[32]
    cx=v283[32]
    dx=v284[32]
    bx=(concat[32] (extract[8] 0[32] 8[32] v285[32]) (concat[24] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])) (extract[16] 16[32] 32[32] v285[32])))
    sp=v286[32]
    bp=v287[32]
    si=v288[32]
    di=v289[32]
    es=v290[16]
    cs=v291[16]
    ss=v292[16]
    ds=v293[16]
    fs=v294[16]
    gs=v295[16]
    cf=(extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (add[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])))))))
    ?1=v297[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32]))) (extract[1] 1[32] 2[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32]))) (extract[1] 3[32] 4[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32]))) (extract[1] 5[32] 6[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32]))) (extract[1] 7[32] 8[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])))))))
    ?3=v299[1]
    af=(extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (add[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])))))))
    ?5=v301[1]
    zf=(zerop[1] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])))
    sf=(extract[1] 7[32] 8[32] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])))
    tf=v304[1]
    if=v305[1]
    df=v306[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (add[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32]))))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (add[9] (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32])) (uextend[9] 9[32] (extract[8] 8[32] 16[32] v285[32]))))))))
    iopl0=v308[1]
    iopl1=v309[1]
    nt=v310[1]
    ?15=v311[1]
    ip=134513377[32]
    memory:
    ip = 134513377[32]
0x80482e1:xor    eax, 0x080496cc
    ax=(bv-xor[32] v282[32] 134518476[32])
    cx=v283[32]
    dx=v284[32]
    bx=(concat[32] (extract[8] 0[32] 8[32] v285[32]) (concat[24] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])) (extract[16] 16[32] 32[32] v285[32])))
    sp=v286[32]
    bp=v287[32]
    si=v288[32]
    di=v289[32]
    es=v290[16]
    cs=v291[16]
    ss=v292[16]
    ds=v293[16]
    fs=v294[16]
    gs=v295[16]
    cf=0[1]
    ?1=v297[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))))))
    ?3=v299[1]
    af=v312[1]
    ?5=v301[1]
    zf=(zerop[1] (bv-xor[32] v282[32] 134518476[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v282[32] 134518476[32]))
    tf=v304[1]
    if=v305[1]
    df=v306[1]
    of=0[1]
    iopl0=v308[1]
    iopl1=v309[1]
    nt=v310[1]
    ?15=v311[1]
    ip=134513382[32]
    memory:
    ip = 134513382[32]
0x80482e6:jmp    DWORD PTR ds:[0x080496d0]
    ax=(bv-xor[32] v282[32] 134518476[32])
    cx=v283[32]
    dx=v284[32]
    bx=(concat[32] (extract[8] 0[32] 8[32] v285[32]) (concat[24] (add[8] (extract[8] 8[32] 16[32] v285[32]) (extract[8] 8[32] 16[32] v285[32])) (extract[16] 16[32] 32[32] v285[32])))
    sp=v286[32]
    bp=v287[32]
    si=v288[32]
    di=v289[32]
    es=v290[16]
    cs=v291[16]
    ss=v292[16]
    ds=v293[16]
    fs=v294[16]
    gs=v295[16]
    cf=0[1]
    ?1=v297[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v282[32] 134518476[32])))))))
    ?3=v299[1]
    af=v312[1]
    ?5=v301[1]
    zf=(zerop[1] (bv-xor[32] v282[32] 134518476[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v282[32] 134518476[32]))
    tf=v304[1]
    if=v305[1]
    df=v306[1]
    of=0[1]
    iopl0=v308[1]
    iopl1=v309[1]
    nt=v310[1]
    ?15=v311[1]
    ip=v313[32]
    memory:
        134518480[32]: v313[32] 4 bytes read-only
    ip = v313[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482e0:push   DWORD PTR ds:[0x080496cc]
    ax=v346[32]
    cx=v347[32]
    dx=v348[32]
    bx=v349[32]
    sp=(add[32] v350[32] -4[32])
    bp=v351[32]
    si=v352[32]
    di=v353[32]
    es=v354[16]
    cs=v355[16]
    ss=v356[16]
    ds=v357[16]
    fs=v358[16]
    gs=v359[16]
    cf=v360[1]
    ?1=v361[1]
    pf=v362[1]
    ?3=v363[1]
    af=v364[1]
    ?5=v365[1]
    zf=v366[1]
    sf=v367[1]
    tf=v368[1]
    if=v369[1]
    df=v370[1]
    of=v371[1]
    iopl0=v372[1]
    iopl1=v373[1]
    nt=v374[1]
    ?15=v375[1]
    ip=134513382[32]
    memory:
        134518476[32]: v376[32] 4 bytes read-only clobbered
        (add[32] v350[32] -4[32]): v376[32] 4 bytes
    ip = 134513382[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482ec:add    BYTE PTR ds:[eax], al
    ax=v409[32]
    cx=v410[32]
    dx=v411[32]
    bx=v412[32]
    sp=v413[32]
    bp=v414[32]
    si=v415[32]
    di=v416[32]
    es=v417[16]
    cs=v418[16]
    ss=v419[16]
    ds=v420[16]
    fs=v421[16]
    gs=v422[16]
    cf=(extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?1=v424[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 1[32] 2[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 3[32] 4[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 5[32] 6[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))))))
    ?3=v426[1]
    af=(extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?5=v428[1]
    zf=(zerop[1] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))
    sf=(extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))
    tf=v431[1]
    if=v432[1]
    df=v433[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v439[32])) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))))
    iopl0=v435[1]
    iopl1=v436[1]
    nt=v437[1]
    ?15=v438[1]
    ip=134513390[32]
    memory:
        v409[32]: (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))) 1 byte
    ip = 134513390[32]
0x80482ee:add    BYTE PTR ds:[eax], al
    ax=v409[32]
    cx=v410[32]
    dx=v411[32]
    bx=v412[32]
    sp=v413[32]
    bp=v414[32]
    si=v415[32]
    di=v416[32]
    es=v417[16]
    cs=v418[16]
    ss=v419[16]
    ds=v420[16]
    fs=v421[16]
    gs=v422[16]
    cf=(extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?1=v424[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 1[32] 2[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 3[32] 4[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 5[32] 6[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))))))
    ?3=v426[1]
    af=(extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?5=v428[1]
    zf=(zerop[1] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))
    sf=(extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))
    tf=v431[1]
    if=v432[1]
    df=v433[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))))
    iopl0=v435[1]
    iopl1=v436[1]
    nt=v437[1]
    ?15=v438[1]
    ip=134513392[32]
    memory:
        v409[32]: (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) 1 byte
    ip = 134513392[32]
0x80482f0:jmp    DWORD PTR ds:[0x080496d4]
    ax=v409[32]
    cx=v410[32]
    dx=v411[32]
    bx=v412[32]
    sp=v413[32]
    bp=v414[32]
    si=v415[32]
    di=v416[32]
    es=v417[16]
    cs=v418[16]
    ss=v419[16]
    ds=v420[16]
    fs=v421[16]
    gs=v422[16]
    cf=(extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?1=v424[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 1[32] 2[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 3[32] 4[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 5[32] 6[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) (extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))))))
    ?3=v426[1]
    af=(extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])))))))
    ?5=v428[1]
    zf=(zerop[1] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))
    sf=(extract[1] 7[32] 8[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32])))
    tf=v431[1]
    if=v432[1]
    df=v433[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32])) (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32]))))) (uextend[9] 9[32] (extract[8] 0[32] 8[32] v409[32]))))))))
    iopl0=v435[1]
    iopl1=v436[1]
    nt=v437[1]
    ?15=v438[1]
    ip=v441[32]
    memory:
        v409[32]: (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] (uextend[32] 32[32] (add[8] (extract[8] 0[32] 8[32] v439[32]) (extract[8] 0[32] 8[32] v409[32])))) (extract[8] 0[32] 8[32] v409[32]))) 1 byte
        134518484[32]: v441[32] 4 bytes read-only
    ip = v441[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80482f6:push   0x00000000
    ax=v474[32]
    cx=v475[32]
    dx=v476[32]
    bx=v477[32]
    sp=(add[32] v478[32] -4[32])
    bp=v479[32]
    si=v480[32]
    di=v481[32]
    es=v482[16]
    cs=v483[16]
    ss=v484[16]
    ds=v485[16]
    fs=v486[16]
    gs=v487[16]
    cf=v488[1]
    ?1=v489[1]
    pf=v490[1]
    ?3=v491[1]
    af=v492[1]
    ?5=v493[1]
    zf=v494[1]
    sf=v495[1]
    tf=v496[1]
    if=v497[1]
    df=v498[1]
    of=v499[1]
    iopl0=v500[1]
    iopl1=v501[1]
    nt=v502[1]
    ?15=v503[1]
    ip=134513403[32]
    memory:
        (add[32] v478[32] -4[32]): 0[32] 4 bytes
    ip = 134513403[32]
0x80482fb:jmp    0x080482e0
    ax=v474[32]
    cx=v475[32]
    dx=v476[32]
    bx=v477[32]
    sp=(add[32] v478[32] -4[32])
    bp=v479[32]
    si=v480[32]
    di=v481[32]
    es=v482[16]
    cs=v483[16]
    ss=v484[16]
    ds=v485[16]
    fs=v486[16]
    gs=v487[16]
    cf=v488[1]
    ?1=v489[1]
    pf=v490[1]
    ?3=v491[1]
    af=v492[1]
    ?5=v493[1]
    zf=v494[1]
    sf=v495[1]
    tf=v496[1]
    if=v497[1]
    df=v498[1]
    of=v499[1]
    iopl0=v500[1]
    iopl1=v501[1]
    nt=v502[1]
    ?15=v503[1]
    ip=134513376[32]
    memory:
        (add[32] v478[32] -4[32]): 0[32] 4 bytes
    ip = 134513376[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048300:jmp    DWORD PTR ds:[0x080496d8]
    ax=v536[32]
    cx=v537[32]
    dx=v538[32]
    bx=v539[32]
    sp=v540[32]
    bp=v541[32]
    si=v542[32]
    di=v543[32]
    es=v544[16]
    cs=v545[16]
    ss=v546[16]
    ds=v547[16]
    fs=v548[16]
    gs=v549[16]
    cf=v550[1]
    ?1=v551[1]
    pf=v552[1]
    ?3=v553[1]
    af=v554[1]
    ?5=v555[1]
    zf=v556[1]
    sf=v557[1]
    tf=v558[1]
    if=v559[1]
    df=v560[1]
    of=v561[1]
    iopl0=v562[1]
    iopl1=v563[1]
    nt=v564[1]
    ?15=v565[1]
    ip=v566[32]
    memory:
        134518488[32]: v566[32] 4 bytes read-only
    ip = v566[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048306:push   0x00000008
    ax=v599[32]
    cx=v600[32]
    dx=v601[32]
    bx=v602[32]
    sp=(add[32] v603[32] -4[32])
    bp=v604[32]
    si=v605[32]
    di=v606[32]
    es=v607[16]
    cs=v608[16]
    ss=v609[16]
    ds=v610[16]
    fs=v611[16]
    gs=v612[16]
    cf=v613[1]
    ?1=v614[1]
    pf=v615[1]
    ?3=v616[1]
    af=v617[1]
    ?5=v618[1]
    zf=v619[1]
    sf=v620[1]
    tf=v621[1]
    if=v622[1]
    df=v623[1]
    of=v624[1]
    iopl0=v625[1]
    iopl1=v626[1]
    nt=v627[1]
    ?15=v628[1]
    ip=134513419[32]
    memory:
        (add[32] v603[32] -4[32]): 8[32] 4 bytes
    ip = 134513419[32]
0x804830b:jmp    0x080482e0
    ax=v599[32]
    cx=v600[32]
    dx=v601[32]
    bx=v602[32]
    sp=(add[32] v603[32] -4[32])
    bp=v604[32]
    si=v605[32]
    di=v606[32]
    es=v607[16]
    cs=v608[16]
    ss=v609[16]
    ds=v610[16]
    fs=v611[16]
    gs=v612[16]
    cf=v613[1]
    ?1=v614[1]
    pf=v615[1]
    ?3=v616[1]
    af=v617[1]
    ?5=v618[1]
    zf=v619[1]
    sf=v620[1]
    tf=v621[1]
    if=v622[1]
    df=v623[1]
    of=v624[1]
    iopl0=v625[1]
    iopl1=v626[1]
    nt=v627[1]
    ?15=v628[1]
    ip=134513376[32]
    memory:
        (add[32] v603[32] -4[32]): 8[32] 4 bytes
    ip = 134513376[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048310:jmp    DWORD PTR ds:[0x080496dc]
    ax=v661[32]
    cx=v662[32]
    dx=v663[32]
    bx=v664[32]
    sp=v665[32]
    bp=v666[32]
    si=v667[32]
    di=v668[32]
    es=v669[16]
    cs=v670[16]
    ss=v671[16]
    ds=v672[16]
    fs=v673[16]
    gs=v674[16]
    cf=v675[1]
    ?1=v676[1]
    pf=v677[1]
    ?3=v678[1]
    af=v679[1]
    ?5=v680[1]
    zf=v681[1]
    sf=v682[1]
    tf=v683[1]
    if=v684[1]
    df=v685[1]
    of=v686[1]
    iopl0=v687[1]
    iopl1=v688[1]
    nt=v689[1]
    ?15=v690[1]
    ip=v691[32]
    memory:
        134518492[32]: v691[32] 4 bytes read-only
    ip = v691[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048316:push   0x00000010
    ax=v724[32]
    cx=v725[32]
    dx=v726[32]
    bx=v727[32]
    sp=(add[32] v728[32] -4[32])
    bp=v729[32]
    si=v730[32]
    di=v731[32]
    es=v732[16]
    cs=v733[16]
    ss=v734[16]
    ds=v735[16]
    fs=v736[16]
    gs=v737[16]
    cf=v738[1]
    ?1=v739[1]
    pf=v740[1]
    ?3=v741[1]
    af=v742[1]
    ?5=v743[1]
    zf=v744[1]
    sf=v745[1]
    tf=v746[1]
    if=v747[1]
    df=v748[1]
    of=v749[1]
    iopl0=v750[1]
    iopl1=v751[1]
    nt=v752[1]
    ?15=v753[1]
    ip=134513435[32]
    memory:
        (add[32] v728[32] -4[32]): 16[32] 4 bytes
    ip = 134513435[32]
0x804831b:jmp    0x080482e0
    ax=v724[32]
    cx=v725[32]
    dx=v726[32]
    bx=v727[32]
    sp=(add[32] v728[32] -4[32])
    bp=v729[32]
    si=v730[32]
    di=v731[32]
    es=v732[16]
    cs=v733[16]
    ss=v734[16]
    ds=v735[16]
    fs=v736[16]
    gs=v737[16]
    cf=v738[1]
    ?1=v739[1]
    pf=v740[1]
    ?3=v741[1]
    af=v742[1]
    ?5=v743[1]
    zf=v744[1]
    sf=v745[1]
    tf=v746[1]
    if=v747[1]
    df=v748[1]
    of=v749[1]
    iopl0=v750[1]
    iopl1=v751[1]
    nt=v752[1]
    ?15=v753[1]
    ip=134513376[32]
    memory:
        (add[32] v728[32] -4[32]): 16[32] 4 bytes
    ip = 134513376[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048320:jmp    DWORD PTR ds:[0x080496e0]
    ax=v786[32]
    cx=v787[32]
    dx=v788[32]
    bx=v789[32]
    sp=v790[32]
    bp=v791[32]
    si=v792[32]
    di=v793[32]
    es=v794[16]
    cs=v795[16]
    ss=v796[16]
    ds=v797[16]
    fs=v798[16]
    gs=v799[16]
    cf=v800[1]
    ?1=v801[1]
    pf=v802[1]
    ?3=v803[1]
    af=v804[1]
    ?5=v805[1]
    zf=v806[1]
    sf=v807[1]
    tf=v808[1]
    if=v809[1]
    df=v810[1]
    of=v811[1]
    iopl0=v812[1]
    iopl1=v813[1]
    nt=v814[1]
    ?15=v815[1]
    ip=v816[32]
    memory:
        134518496[32]: v816[32] 4 bytes read-only
    ip = v816[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048326:push   0x00000018
    ax=v849[32]
    cx=v850[32]
    dx=v851[32]
    bx=v852[32]
    sp=(add[32] v853[32] -4[32])
    bp=v854[32]
    si=v855[32]
    di=v856[32]
    es=v857[16]
    cs=v858[16]
    ss=v859[16]
    ds=v860[16]
    fs=v861[16]
    gs=v862[16]
    cf=v863[1]
    ?1=v864[1]
    pf=v865[1]
    ?3=v866[1]
    af=v867[1]
    ?5=v868[1]
    zf=v869[1]
    sf=v870[1]
    tf=v871[1]
    if=v872[1]
    df=v873[1]
    of=v874[1]
    iopl0=v875[1]
    iopl1=v876[1]
    nt=v877[1]
    ?15=v878[1]
    ip=134513451[32]
    memory:
        (add[32] v853[32] -4[32]): 24[32] 4 bytes
    ip = 134513451[32]
0x804832b:jmp    0x080482e0
    ax=v849[32]
    cx=v850[32]
    dx=v851[32]
    bx=v852[32]
    sp=(add[32] v853[32] -4[32])
    bp=v854[32]
    si=v855[32]
    di=v856[32]
    es=v857[16]
    cs=v858[16]
    ss=v859[16]
    ds=v860[16]
    fs=v861[16]
    gs=v862[16]
    cf=v863[1]
    ?1=v864[1]
    pf=v865[1]
    ?3=v866[1]
    af=v867[1]
    ?5=v868[1]
    zf=v869[1]
    sf=v870[1]
    tf=v871[1]
    if=v872[1]
    df=v873[1]
    of=v874[1]
    iopl0=v875[1]
    iopl1=v876[1]
    nt=v877[1]
    ?15=v878[1]
    ip=134513376[32]
    memory:
        (add[32] v853[32] -4[32]): 24[32] 4 bytes
    ip = 134513376[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048330:jmp    DWORD PTR ds:[0x080496e4]
    ax=v911[32]
    cx=v912[32]
    dx=v913[32]
    bx=v914[32]
    sp=v915[32]
    bp=v916[32]
    si=v917[32]
    di=v918[32]
    es=v919[16]
    cs=v920[16]
    ss=v921[16]
    ds=v922[16]
    fs=v923[16]
    gs=v924[16]
    cf=v925[1]
    ?1=v926[1]
    pf=v927[1]
    ?3=v928[1]
    af=v929[1]
    ?5=v930[1]
    zf=v931[1]
    sf=v932[1]
    tf=v933[1]
    if=v934[1]
    df=v935[1]
    of=v936[1]
    iopl0=v937[1]
    iopl1=v938[1]
    nt=v939[1]
    ?15=v940[1]
    ip=v941[32]
    memory:
        134518500[32]: v941[32] 4 bytes read-only
    ip = v941[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048336:push   0x00000020
    ax=v974[32]
    cx=v975[32]
    dx=v976[32]
    bx=v977[32]
    sp=(add[32] v978[32] -4[32])
    bp=v979[32]
    si=v980[32]
    di=v981[32]
    es=v982[16]
    cs=v983[16]
    ss=v984[16]
    ds=v985[16]
    fs=v986[16]
    gs=v987[16]
    cf=v988[1]
    ?1=v989[1]
    pf=v990[1]
    ?3=v991[1]
    af=v992[1]
    ?5=v993[1]
    zf=v994[1]
    sf=v995[1]
    tf=v996[1]
    if=v997[1]
    df=v998[1]
    of=v999[1]
    iopl0=v1000[1]
    iopl1=v1001[1]
    nt=v1002[1]
    ?15=v1003[1]
    ip=134513467[32]
    memory:
        (add[32] v978[32] -4[32]): 32[32] 4 bytes
    ip = 134513467[32]
0x804833b:jmp    0x080482e0
    ax=v974[32]
    cx=v975[32]
    dx=v976[32]
    bx=v977[32]
    sp=(add[32] v978[32] -4[32])
    bp=v979[32]
    si=v980[32]
    di=v981[32]
    es=v982[16]
    cs=v983[16]
    ss=v984[16]
    ds=v985[16]
    fs=v986[16]
    gs=v987[16]
    cf=v988[1]
    ?1=v989[1]
    pf=v990[1]
    ?3=v991[1]
    af=v992[1]
    ?5=v993[1]
    zf=v994[1]
    sf=v995[1]
    tf=v996[1]
    if=v997[1]
    df=v998[1]
    of=v999[1]
    iopl0=v1000[1]
    iopl1=v1001[1]
    nt=v1002[1]
    ?15=v1003[1]
    ip=134513376[32]
    memory:
        (add[32] v978[32] -4[32]): 32[32] 4 bytes
    ip = 134513376[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048340:xor    ebp, ebp
    ax=v1036[32]
    cx=v1037[32]
    dx=v1038[32]
    bx=v1039[32]
    sp=v1040[32]
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1042[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))))))
    ?3=v1053[1]
    af=v1066[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-xor[32] v1041[32] v1041[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v1041[32] v1041[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513474[32]
    memory:
    ip = 134513474[32]
0x8048342:pop    esi
    ax=v1036[32]
    cx=v1037[32]
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] v1040[32] 4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))))))
    ?3=v1053[1]
    af=v1066[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-xor[32] v1041[32] v1041[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v1041[32] v1041[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513475[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only
    ip = 134513475[32]
0x8048343:mov    ecx, esp
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] v1040[32] 4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v1041[32] v1041[32])))))))
    ?3=v1053[1]
    af=v1066[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-xor[32] v1041[32] v1041[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v1041[32] v1041[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513477[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only
    ip = 134513477[32]
0x8048345:and    esp, 0xf0<-0x10>
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(bv-and[32] (add[32] v1040[32] 4[32]) -16[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513480[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only
    ip = 134513480[32]
0x8048348:push   eax
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513481[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
    ip = 134513481[32]
0x8048349:push   esp
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513482[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
    ip = 134513482[32]
0x804834a:push   edx
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513483[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
    ip = 134513483[32]
0x804834b:push   0x08048520
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513488[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
    ip = 134513488[32]
0x8048350:push   0x080484b0
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513493[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513840[32] 4 bytes
    ip = 134513493[32]
0x8048355:push   ecx
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513494[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513840[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): (add[32] v1040[32] 4[32]) 4 bytes
    ip = 134513494[32]
0x8048356:push   esi
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513495[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513840[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): (add[32] v1040[32] 4[32]) 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): v1067[32] 4 bytes
    ip = 134513495[32]
0x8048357:push   0x08048410
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513500[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513840[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): (add[32] v1040[32] 4[32]) 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): v1067[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513680[32] 4 bytes
    ip = 134513500[32]
0x804835c:call   0x08048310
    ax=v1036[32]
    cx=(add[32] v1040[32] 4[32])
    dx=v1038[32]
    bx=v1039[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32])
    bp=(bv-xor[32] v1041[32] v1041[32])
    si=v1067[32]
    di=v1043[32]
    es=v1044[16]
    cs=v1045[16]
    ss=v1046[16]
    ds=v1047[16]
    fs=v1048[16]
    gs=v1049[16]
    cf=0[1]
    ?1=v1051[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32])))))))
    ?3=v1053[1]
    af=v1068[1]
    ?5=v1055[1]
    zf=(zerop[1] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]))
    tf=v1058[1]
    if=v1059[1]
    df=v1060[1]
    of=0[1]
    iopl0=v1062[1]
    iopl1=v1063[1]
    nt=v1064[1]
    ?15=v1065[1]
    ip=134513424[32]
    memory:
        v1040[32]: v1067[32] 4 bytes read-only clobbered
        (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]): v1036[32] 4 bytes
        (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]): (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) 4 bytes
        (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]): v1038[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513952[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513840[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): (add[32] v1040[32] 4[32]) 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): v1067[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513680[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] (bv-and[32] (add[32] v1040[32] 4[32]) -16[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]) -4[32]): 134513505[32] 4 bytes
    ip = 134513424[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048361:hlt    
    ax=v1101[32]
    cx=v1102[32]
    dx=v1103[32]
    bx=v1104[32]
    sp=v1105[32]
    bp=v1106[32]
    si=v1107[32]
    di=v1108[32]
    es=v1109[16]
    cs=v1110[16]
    ss=v1111[16]
    ds=v1112[16]
    fs=v1113[16]
    gs=v1114[16]
    cf=v1115[1]
    ?1=v1116[1]
    pf=v1117[1]
    ?3=v1118[1]
    af=v1119[1]
    ?5=v1120[1]
    zf=v1121[1]
    sf=v1122[1]
    tf=v1123[1]
    if=v1124[1]
    df=v1125[1]
    of=v1126[1]
    iopl0=v1127[1]
    iopl1=v1128[1]
    nt=v1129[1]
    ?15=v1130[1]
    ip=134513505[32]
    memory:
    ip = 134513505[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048362:nop    
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=v1167[32]
    bp=v1168[32]
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513507[32]
    memory:
    ip = 134513507[32]
0x8048363:nop    
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=v1167[32]
    bp=v1168[32]
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513508[32]
    memory:
    ip = 134513508[32]
0x8048364:push   ebp
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=(add[32] v1167[32] -4[32])
    bp=v1168[32]
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513509[32]
    memory:
        (add[32] v1167[32] -4[32]): v1168[32] 4 bytes
    ip = 134513509[32]
0x8048365:mov    ebp, esp
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=(add[32] v1167[32] -4[32])
    bp=(add[32] v1167[32] -4[32])
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513511[32]
    memory:
        (add[32] v1167[32] -4[32]): v1168[32] 4 bytes
    ip = 134513511[32]
0x8048367:push   ebx
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=(add[32] (add[32] v1167[32] -4[32]) -4[32])
    bp=(add[32] v1167[32] -4[32])
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513512[32]
    memory:
        (add[32] v1167[32] -4[32]): v1168[32] 4 bytes
        (add[32] (add[32] v1167[32] -4[32]) -4[32]): v1166[32] 4 bytes
    ip = 134513512[32]
0x8048368:push   ecx
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=(add[32] (add[32] (add[32] v1167[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v1167[32] -4[32])
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513513[32]
    memory:
        (add[32] v1167[32] -4[32]): v1168[32] 4 bytes
        (add[32] (add[32] v1167[32] -4[32]) -4[32]): v1166[32] 4 bytes
        (add[32] (add[32] (add[32] v1167[32] -4[32]) -4[32]) -4[32]): v1164[32] 4 bytes
    ip = 134513513[32]
0x8048369:call   0x0804836e
    ax=v1163[32]
    cx=v1164[32]
    dx=v1165[32]
    bx=v1166[32]
    sp=(add[32] (add[32] (add[32] (add[32] v1167[32] -4[32]) -4[32]) -4[32]) -4[32])
    bp=(add[32] v1167[32] -4[32])
    si=v1169[32]
    di=v1170[32]
    es=v1171[16]
    cs=v1172[16]
    ss=v1173[16]
    ds=v1174[16]
    fs=v1175[16]
    gs=v1176[16]
    cf=v1177[1]
    ?1=v1178[1]
    pf=v1179[1]
    ?3=v1180[1]
    af=v1181[1]
    ?5=v1182[1]
    zf=v1183[1]
    sf=v1184[1]
    tf=v1185[1]
    if=v1186[1]
    df=v1187[1]
    of=v1188[1]
    iopl0=v1189[1]
    iopl1=v1190[1]
    nt=v1191[1]
    ?15=v1192[1]
    ip=134513518[32]
    memory:
        (add[32] v1167[32] -4[32]): v1168[32] 4 bytes
        (add[32] (add[32] v1167[32] -4[32]) -4[32]): v1166[32] 4 bytes
        (add[32] (add[32] (add[32] v1167[32] -4[32]) -4[32]) -4[32]): v1164[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v1167[32] -4[32]) -4[32]) -4[32]) -4[32]): 134513518[32] 4 bytes
    ip = 134513518[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804836e:pop    ebx
    ax=v1225[32]
    cx=v1226[32]
    dx=v1227[32]
    bx=v1255[32]
    sp=(add[32] v1229[32] 4[32])
    bp=v1230[32]
    si=v1231[32]
    di=v1232[32]
    es=v1233[16]
    cs=v1234[16]
    ss=v1235[16]
    ds=v1236[16]
    fs=v1237[16]
    gs=v1238[16]
    cf=v1239[1]
    ?1=v1240[1]
    pf=v1241[1]
    ?3=v1242[1]
    af=v1243[1]
    ?5=v1244[1]
    zf=v1245[1]
    sf=v1246[1]
    tf=v1247[1]
    if=v1248[1]
    df=v1249[1]
    of=v1250[1]
    iopl0=v1251[1]
    iopl1=v1252[1]
    nt=v1253[1]
    ?15=v1254[1]
    ip=134513519[32]
    memory:
        v1229[32]: v1255[32] 4 bytes read-only
    ip = 134513519[32]
0x804836f:add    ebx, 0x0000135a
    ax=v1225[32]
    cx=v1226[32]
    dx=v1227[32]
    bx=(add[32] v1255[32] 4954[32])
    sp=(add[32] v1229[32] 4[32])
    bp=v1230[32]
    si=v1231[32]
    di=v1232[32]
    es=v1233[16]
    cs=v1234[16]
    ss=v1235[16]
    ds=v1236[16]
    fs=v1237[16]
    gs=v1238[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33])))))
    ?1=v1240[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))))))
    ?3=v1242[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33])))))
    ?5=v1244[1]
    zf=(zerop[1] (add[32] v1255[32] 4954[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v1255[32] 4954[32]))
    tf=v1247[1]
    if=v1248[1]
    df=v1249[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33]))))))
    iopl0=v1251[1]
    iopl1=v1252[1]
    nt=v1253[1]
    ?15=v1254[1]
    ip=134513525[32]
    memory:
        v1229[32]: v1255[32] 4 bytes read-only
    ip = 134513525[32]
0x8048375:mov    edx, DWORD PTR ds:[ebx + 0xfffffffc<-0x00000004>]
    ax=v1225[32]
    cx=v1226[32]
    dx=v1256[32]
    bx=(add[32] v1255[32] 4954[32])
    sp=(add[32] v1229[32] 4[32])
    bp=v1230[32]
    si=v1231[32]
    di=v1232[32]
    es=v1233[16]
    cs=v1234[16]
    ss=v1235[16]
    ds=v1236[16]
    fs=v1237[16]
    gs=v1238[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33])))))
    ?1=v1240[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1255[32] 4954[32])))))))
    ?3=v1242[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33])))))
    ?5=v1244[1]
    zf=(zerop[1] (add[32] v1255[32] 4954[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v1255[32] 4954[32]))
    tf=v1247[1]
    if=v1248[1]
    df=v1249[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1255[32]) (bv-xor[33] 4954[33] (add[33] (uextend[33] 33[32] v1255[32]) 4954[33]))))))
    iopl0=v1251[1]
    iopl1=v1252[1]
    nt=v1253[1]
    ?15=v1254[1]
    ip=134513531[32]
    memory:
        v1229[32]: v1255[32] 4 bytes read-only
        (add[32] (add[32] v1255[32] 4954[32]) -4[32]): v1256[32] 4 bytes read-only
    ip = 134513531[32]
0x804837b:test   edx, edx
    ax=v1225[32]
    cx=v1226[32]
    dx=v1256[32]
    bx=(add[32] v1255[32] 4954[32])
    sp=(add[32] v1229[32] 4[32])
    bp=v1230[32]
    si=v1231[32]
    di=v1232[32]
    es=v1233[16]
    cs=v1234[16]
    ss=v1235[16]
    ds=v1236[16]
    fs=v1237[16]
    gs=v1238[16]
    cf=0[1]
    ?1=v1240[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))))))
    ?3=v1242[1]
    af=v1257[1]
    ?5=v1244[1]
    zf=(zerop[1] (bv-and[32] v1256[32] v1256[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1256[32] v1256[32]))
    tf=v1247[1]
    if=v1248[1]
    df=v1249[1]
    of=0[1]
    iopl0=v1251[1]
    iopl1=v1252[1]
    nt=v1253[1]
    ?15=v1254[1]
    ip=134513533[32]
    memory:
        v1229[32]: v1255[32] 4 bytes read-only
        (add[32] (add[32] v1255[32] 4954[32]) -4[32]): v1256[32] 4 bytes read-only
    ip = 134513533[32]
0x804837d:je     0x08048384
    ax=v1225[32]
    cx=v1226[32]
    dx=v1256[32]
    bx=(add[32] v1255[32] 4954[32])
    sp=(add[32] v1229[32] 4[32])
    bp=v1230[32]
    si=v1231[32]
    di=v1232[32]
    es=v1233[16]
    cs=v1234[16]
    ss=v1235[16]
    ds=v1236[16]
    fs=v1237[16]
    gs=v1238[16]
    cf=0[1]
    ?1=v1240[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1256[32] v1256[32])))))))
    ?3=v1242[1]
    af=v1257[1]
    ?5=v1244[1]
    zf=(zerop[1] (bv-and[32] v1256[32] v1256[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1256[32] v1256[32]))
    tf=v1247[1]
    if=v1248[1]
    df=v1249[1]
    of=0[1]
    iopl0=v1251[1]
    iopl1=v1252[1]
    nt=v1253[1]
    ?15=v1254[1]
    ip=(ite[32] (zerop[1] (bv-and[32] v1256[32] v1256[32])) 134513540[32] 134513535[32])
    memory:
        v1229[32]: v1255[32] 4 bytes read-only
        (add[32] (add[32] v1255[32] 4954[32]) -4[32]): v1256[32] 4 bytes read-only
    ip = (ite[32] (zerop[1] (bv-and[32] v1256[32] v1256[32])) 134513540[32] 134513535[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804837f:call   0x08048330
    ax=v1290[32]
    cx=v1291[32]
    dx=v1292[32]
    bx=v1293[32]
    sp=(add[32] v1294[32] -4[32])
    bp=v1295[32]
    si=v1296[32]
    di=v1297[32]
    es=v1298[16]
    cs=v1299[16]
    ss=v1300[16]
    ds=v1301[16]
    fs=v1302[16]
    gs=v1303[16]
    cf=v1304[1]
    ?1=v1305[1]
    pf=v1306[1]
    ?3=v1307[1]
    af=v1308[1]
    ?5=v1309[1]
    zf=v1310[1]
    sf=v1311[1]
    tf=v1312[1]
    if=v1313[1]
    df=v1314[1]
    of=v1315[1]
    iopl0=v1316[1]
    iopl1=v1317[1]
    nt=v1318[1]
    ?15=v1319[1]
    ip=134513456[32]
    memory:
        (add[32] v1294[32] -4[32]): 134513540[32] 4 bytes
    ip = 134513456[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048384:pop    eax
    ax=v1382[32]
    cx=v1353[32]
    dx=v1354[32]
    bx=v1355[32]
    sp=(add[32] v1356[32] 4[32])
    bp=v1357[32]
    si=v1358[32]
    di=v1359[32]
    es=v1360[16]
    cs=v1361[16]
    ss=v1362[16]
    ds=v1363[16]
    fs=v1364[16]
    gs=v1365[16]
    cf=v1366[1]
    ?1=v1367[1]
    pf=v1368[1]
    ?3=v1369[1]
    af=v1370[1]
    ?5=v1371[1]
    zf=v1372[1]
    sf=v1373[1]
    tf=v1374[1]
    if=v1375[1]
    df=v1376[1]
    of=v1377[1]
    iopl0=v1378[1]
    iopl1=v1379[1]
    nt=v1380[1]
    ?15=v1381[1]
    ip=134513541[32]
    memory:
        v1356[32]: v1382[32] 4 bytes read-only
    ip = 134513541[32]
0x8048385:pop    ebx
    ax=v1382[32]
    cx=v1353[32]
    dx=v1354[32]
    bx=v1383[32]
    sp=(add[32] (add[32] v1356[32] 4[32]) 4[32])
    bp=v1357[32]
    si=v1358[32]
    di=v1359[32]
    es=v1360[16]
    cs=v1361[16]
    ss=v1362[16]
    ds=v1363[16]
    fs=v1364[16]
    gs=v1365[16]
    cf=v1366[1]
    ?1=v1367[1]
    pf=v1368[1]
    ?3=v1369[1]
    af=v1370[1]
    ?5=v1371[1]
    zf=v1372[1]
    sf=v1373[1]
    tf=v1374[1]
    if=v1375[1]
    df=v1376[1]
    of=v1377[1]
    iopl0=v1378[1]
    iopl1=v1379[1]
    nt=v1380[1]
    ?15=v1381[1]
    ip=134513542[32]
    memory:
        v1356[32]: v1382[32] 4 bytes read-only
        (add[32] v1356[32] 4[32]): v1383[32] 4 bytes read-only
    ip = 134513542[32]
0x8048386:leave  
    ax=v1382[32]
    cx=v1353[32]
    dx=v1354[32]
    bx=v1383[32]
    sp=(add[32] v1357[32] 4[32])
    bp=v1384[32]
    si=v1358[32]
    di=v1359[32]
    es=v1360[16]
    cs=v1361[16]
    ss=v1362[16]
    ds=v1363[16]
    fs=v1364[16]
    gs=v1365[16]
    cf=v1366[1]
    ?1=v1367[1]
    pf=v1368[1]
    ?3=v1369[1]
    af=v1370[1]
    ?5=v1371[1]
    zf=v1372[1]
    sf=v1373[1]
    tf=v1374[1]
    if=v1375[1]
    df=v1376[1]
    of=v1377[1]
    iopl0=v1378[1]
    iopl1=v1379[1]
    nt=v1380[1]
    ?15=v1381[1]
    ip=134513543[32]
    memory:
        v1356[32]: v1382[32] 4 bytes read-only
        (add[32] v1356[32] 4[32]): v1383[32] 4 bytes read-only
        v1357[32]: v1384[32] 4 bytes read-only
    ip = 134513543[32]
0x8048387:ret    
    ax=v1382[32]
    cx=v1353[32]
    dx=v1354[32]
    bx=v1383[32]
    sp=(add[32] (add[32] v1357[32] 4[32]) 4[32])
    bp=v1384[32]
    si=v1358[32]
    di=v1359[32]
    es=v1360[16]
    cs=v1361[16]
    ss=v1362[16]
    ds=v1363[16]
    fs=v1364[16]
    gs=v1365[16]
    cf=v1366[1]
    ?1=v1367[1]
    pf=v1368[1]
    ?3=v1369[1]
    af=v1370[1]
    ?5=v1371[1]
    zf=v1372[1]
    sf=v1373[1]
    tf=v1374[1]
    if=v1375[1]
    df=v1376[1]
    of=v1377[1]
    iopl0=v1378[1]
    iopl1=v1379[1]
    nt=v1380[1]
    ?15=v1381[1]
    ip=v1385[32]
    memory:
        v1356[32]: v1382[32] 4 bytes read-only
        (add[32] v1356[32] 4[32]): v1383[32] 4 bytes read-only
        v1357[32]: v1384[32] 4 bytes read-only
        (add[32] v1357[32] 4[32]): v1385[32] 4 bytes read-only
    ip = v1385[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048388:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513545[32]
    memory:
    ip = 134513545[32]
0x8048389:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513546[32]
    memory:
    ip = 134513546[32]
0x804838a:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513547[32]
    memory:
    ip = 134513547[32]
0x804838b:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513548[32]
    memory:
    ip = 134513548[32]
0x804838c:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513549[32]
    memory:
    ip = 134513549[32]
0x804838d:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513550[32]
    memory:
    ip = 134513550[32]
0x804838e:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513551[32]
    memory:
    ip = 134513551[32]
0x804838f:nop    
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=v1422[32]
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513552[32]
    memory:
    ip = 134513552[32]
0x8048390:push   ebp
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=(add[32] v1422[32] -4[32])
    bp=v1423[32]
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513553[32]
    memory:
        (add[32] v1422[32] -4[32]): v1423[32] 4 bytes
    ip = 134513553[32]
0x8048391:mov    ebp, esp
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=(add[32] v1422[32] -4[32])
    bp=(add[32] v1422[32] -4[32])
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=v1432[1]
    ?1=v1433[1]
    pf=v1434[1]
    ?3=v1435[1]
    af=v1436[1]
    ?5=v1437[1]
    zf=v1438[1]
    sf=v1439[1]
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=v1443[1]
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513555[32]
    memory:
        (add[32] v1422[32] -4[32]): v1423[32] 4 bytes
    ip = 134513555[32]
0x8048393:sub    esp, 0x08
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=(add[32] (add[32] v1422[32] -4[32]) -8[32])
    bp=(add[32] v1422[32] -4[32])
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) 4294967288[33]))))))
    ?1=v1433[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1422[32] -4[32]) -8[32])))))))
    ?3=v1435[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) 4294967288[33]))))))
    ?5=v1437[1]
    zf=(zerop[1] (add[32] (add[32] v1422[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v1422[32] -4[32]) -8[32]))
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1422[32] -4[32])) 4294967288[33]))))))
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513558[32]
    memory:
        (add[32] v1422[32] -4[32]): v1423[32] 4 bytes
    ip = 134513558[32]
0x8048396:cmp    BYTE PTR ds:[0x080496f4], 0x00
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=(add[32] (add[32] v1422[32] -4[32]) -8[32])
    bp=(add[32] v1422[32] -4[32])
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    ?1=v1433[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] v1448[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] v1448[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] v1448[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] v1448[32]))))))
    ?3=v1435[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    ?5=v1437[1]
    zf=(zerop[1] (extract[8] 0[32] 8[32] v1448[32]))
    sf=(extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] v1448[32]))
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=134513565[32]
    memory:
        (add[32] v1422[32] -4[32]): v1423[32] 4 bytes
        134518516[32]: v1448[32] 1 byte read-only
    ip = 134513565[32]
0x804839d:jne    0x080483cc
    ax=v1418[32]
    cx=v1419[32]
    dx=v1420[32]
    bx=v1421[32]
    sp=(add[32] (add[32] v1422[32] -4[32]) -8[32])
    bp=(add[32] v1422[32] -4[32])
    si=v1424[32]
    di=v1425[32]
    es=v1426[16]
    cs=v1427[16]
    ss=v1428[16]
    ds=v1429[16]
    fs=v1430[16]
    gs=v1431[16]
    cf=(invert[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    ?1=v1433[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] v1448[32]))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] v1448[32])))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] v1448[32]))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] v1448[32])) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] v1448[32]))))))
    ?3=v1435[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    ?5=v1437[1]
    zf=(zerop[1] (extract[8] 0[32] 8[32] v1448[32]))
    sf=(extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] v1448[32]))
    tf=v1440[1]
    if=v1441[1]
    df=v1442[1]
    of=(bv-xor[1] (extract[1] 7[32] 8[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))) (extract[1] 6[32] 7[32] (extract[8] 1[32] 9[32] (bv-xor[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) (bv-xor[9] 255[9] (add[9] (uextend[9] 9[32] (extract[8] 0[32] 8[32] v1448[32])) -256[9]))))))
    iopl0=v1444[1]
    iopl1=v1445[1]
    nt=v1446[1]
    ?15=v1447[1]
    ip=(ite[32] (invert[1] (zerop[1] (extract[8] 0[32] 8[32] v1448[32]))) 134513612[32] 134513567[32])
    memory:
        (add[32] v1422[32] -4[32]): v1423[32] 4 bytes
        134518516[32]: v1448[32] 1 byte read-only
    ip = (ite[32] (invert[1] (zerop[1] (extract[8] 0[32] 8[32] v1448[32]))) 134513612[32] 134513567[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804839f:mov    eax, DWORD PTR ds:[0x080496f0]
    ax=v1511[32]
    cx=v1482[32]
    dx=v1483[32]
    bx=v1484[32]
    sp=v1485[32]
    bp=v1486[32]
    si=v1487[32]
    di=v1488[32]
    es=v1489[16]
    cs=v1490[16]
    ss=v1491[16]
    ds=v1492[16]
    fs=v1493[16]
    gs=v1494[16]
    cf=v1495[1]
    ?1=v1496[1]
    pf=v1497[1]
    ?3=v1498[1]
    af=v1499[1]
    ?5=v1500[1]
    zf=v1501[1]
    sf=v1502[1]
    tf=v1503[1]
    if=v1504[1]
    df=v1505[1]
    of=v1506[1]
    iopl0=v1507[1]
    iopl1=v1508[1]
    nt=v1509[1]
    ?15=v1510[1]
    ip=134513572[32]
    memory:
        134518512[32]: v1511[32] 4 bytes read-only
    ip = 134513572[32]
0x80483a4:mov    edx, DWORD PTR ds:[eax]
    ax=v1511[32]
    cx=v1482[32]
    dx=v1512[32]
    bx=v1484[32]
    sp=v1485[32]
    bp=v1486[32]
    si=v1487[32]
    di=v1488[32]
    es=v1489[16]
    cs=v1490[16]
    ss=v1491[16]
    ds=v1492[16]
    fs=v1493[16]
    gs=v1494[16]
    cf=v1495[1]
    ?1=v1496[1]
    pf=v1497[1]
    ?3=v1498[1]
    af=v1499[1]
    ?5=v1500[1]
    zf=v1501[1]
    sf=v1502[1]
    tf=v1503[1]
    if=v1504[1]
    df=v1505[1]
    of=v1506[1]
    iopl0=v1507[1]
    iopl1=v1508[1]
    nt=v1509[1]
    ?15=v1510[1]
    ip=134513574[32]
    memory:
        134518512[32]: v1511[32] 4 bytes read-only
        v1511[32]: v1512[32] 4 bytes read-only
    ip = 134513574[32]
0x80483a6:test   edx, edx
    ax=v1511[32]
    cx=v1482[32]
    dx=v1512[32]
    bx=v1484[32]
    sp=v1485[32]
    bp=v1486[32]
    si=v1487[32]
    di=v1488[32]
    es=v1489[16]
    cs=v1490[16]
    ss=v1491[16]
    ds=v1492[16]
    fs=v1493[16]
    gs=v1494[16]
    cf=0[1]
    ?1=v1496[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))))))
    ?3=v1498[1]
    af=v1513[1]
    ?5=v1500[1]
    zf=(zerop[1] (bv-and[32] v1512[32] v1512[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1512[32] v1512[32]))
    tf=v1503[1]
    if=v1504[1]
    df=v1505[1]
    of=0[1]
    iopl0=v1507[1]
    iopl1=v1508[1]
    nt=v1509[1]
    ?15=v1510[1]
    ip=134513576[32]
    memory:
        134518512[32]: v1511[32] 4 bytes read-only
        v1511[32]: v1512[32] 4 bytes read-only
    ip = 134513576[32]
0x80483a8:je     0x080483c5
    ax=v1511[32]
    cx=v1482[32]
    dx=v1512[32]
    bx=v1484[32]
    sp=v1485[32]
    bp=v1486[32]
    si=v1487[32]
    di=v1488[32]
    es=v1489[16]
    cs=v1490[16]
    ss=v1491[16]
    ds=v1492[16]
    fs=v1493[16]
    gs=v1494[16]
    cf=0[1]
    ?1=v1496[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1512[32] v1512[32])))))))
    ?3=v1498[1]
    af=v1513[1]
    ?5=v1500[1]
    zf=(zerop[1] (bv-and[32] v1512[32] v1512[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1512[32] v1512[32]))
    tf=v1503[1]
    if=v1504[1]
    df=v1505[1]
    of=0[1]
    iopl0=v1507[1]
    iopl1=v1508[1]
    nt=v1509[1]
    ?15=v1510[1]
    ip=(ite[32] (zerop[1] (bv-and[32] v1512[32] v1512[32])) 134513605[32] 134513578[32])
    memory:
        134518512[32]: v1511[32] 4 bytes read-only
        v1511[32]: v1512[32] 4 bytes read-only
    ip = (ite[32] (zerop[1] (bv-and[32] v1512[32] v1512[32])) 134513605[32] 134513578[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483aa:lea    esi, [esi + 0x00000000]
    ax=v1546[32]
    cx=v1547[32]
    dx=v1548[32]
    bx=v1549[32]
    sp=v1550[32]
    bp=v1551[32]
    si=v1552[32]
    di=v1553[32]
    es=v1554[16]
    cs=v1555[16]
    ss=v1556[16]
    ds=v1557[16]
    fs=v1558[16]
    gs=v1559[16]
    cf=v1560[1]
    ?1=v1561[1]
    pf=v1562[1]
    ?3=v1563[1]
    af=v1564[1]
    ?5=v1565[1]
    zf=v1566[1]
    sf=v1567[1]
    tf=v1568[1]
    if=v1569[1]
    df=v1570[1]
    of=v1571[1]
    iopl0=v1572[1]
    iopl1=v1573[1]
    nt=v1574[1]
    ?15=v1575[1]
    ip=134513584[32]
    memory:
    ip = 134513584[32]
0x80483b0:add    eax, 0x04
    ax=(add[32] v1546[32] 4[32])
    cx=v1547[32]
    dx=v1548[32]
    bx=v1549[32]
    sp=v1550[32]
    bp=v1551[32]
    si=v1552[32]
    di=v1553[32]
    es=v1554[16]
    cs=v1555[16]
    ss=v1556[16]
    ds=v1557[16]
    fs=v1558[16]
    gs=v1559[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?1=v1561[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))))))
    ?3=v1563[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?5=v1565[1]
    zf=(zerop[1] (add[32] v1546[32] 4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v1546[32] 4[32]))
    tf=v1568[1]
    if=v1569[1]
    df=v1570[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))))
    iopl0=v1572[1]
    iopl1=v1573[1]
    nt=v1574[1]
    ?15=v1575[1]
    ip=134513587[32]
    memory:
    ip = 134513587[32]
0x80483b3:mov    DWORD PTR ds:[0x080496f0], eax
    ax=(add[32] v1546[32] 4[32])
    cx=v1547[32]
    dx=v1548[32]
    bx=v1549[32]
    sp=v1550[32]
    bp=v1551[32]
    si=v1552[32]
    di=v1553[32]
    es=v1554[16]
    cs=v1555[16]
    ss=v1556[16]
    ds=v1557[16]
    fs=v1558[16]
    gs=v1559[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?1=v1561[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))))))
    ?3=v1563[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?5=v1565[1]
    zf=(zerop[1] (add[32] v1546[32] 4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v1546[32] 4[32]))
    tf=v1568[1]
    if=v1569[1]
    df=v1570[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))))
    iopl0=v1572[1]
    iopl1=v1573[1]
    nt=v1574[1]
    ?15=v1575[1]
    ip=134513592[32]
    memory:
        134518512[32]: (add[32] v1546[32] 4[32]) 4 bytes
    ip = 134513592[32]
0x80483b8:call   edx
    ax=(add[32] v1546[32] 4[32])
    cx=v1547[32]
    dx=v1548[32]
    bx=v1549[32]
    sp=(add[32] v1550[32] -4[32])
    bp=v1551[32]
    si=v1552[32]
    di=v1553[32]
    es=v1554[16]
    cs=v1555[16]
    ss=v1556[16]
    ds=v1557[16]
    fs=v1558[16]
    gs=v1559[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?1=v1561[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v1546[32] 4[32])))))))
    ?3=v1563[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33])))))
    ?5=v1565[1]
    zf=(zerop[1] (add[32] v1546[32] 4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v1546[32] 4[32]))
    tf=v1568[1]
    if=v1569[1]
    df=v1570[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v1546[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v1546[32]) 4[33]))))))
    iopl0=v1572[1]
    iopl1=v1573[1]
    nt=v1574[1]
    ?15=v1575[1]
    ip=v1548[32]
    memory:
        134518512[32]: (add[32] v1546[32] 4[32]) 4 bytes clobbered
        (add[32] v1550[32] -4[32]): 134513594[32] 4 bytes
    ip = v1548[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ba:mov    eax, DWORD PTR ds:[0x080496f0]
    ax=v1638[32]
    cx=v1609[32]
    dx=v1610[32]
    bx=v1611[32]
    sp=v1612[32]
    bp=v1613[32]
    si=v1614[32]
    di=v1615[32]
    es=v1616[16]
    cs=v1617[16]
    ss=v1618[16]
    ds=v1619[16]
    fs=v1620[16]
    gs=v1621[16]
    cf=v1622[1]
    ?1=v1623[1]
    pf=v1624[1]
    ?3=v1625[1]
    af=v1626[1]
    ?5=v1627[1]
    zf=v1628[1]
    sf=v1629[1]
    tf=v1630[1]
    if=v1631[1]
    df=v1632[1]
    of=v1633[1]
    iopl0=v1634[1]
    iopl1=v1635[1]
    nt=v1636[1]
    ?15=v1637[1]
    ip=134513599[32]
    memory:
        134518512[32]: v1638[32] 4 bytes read-only
    ip = 134513599[32]
0x80483bf:mov    edx, DWORD PTR ds:[eax]
    ax=v1638[32]
    cx=v1609[32]
    dx=v1639[32]
    bx=v1611[32]
    sp=v1612[32]
    bp=v1613[32]
    si=v1614[32]
    di=v1615[32]
    es=v1616[16]
    cs=v1617[16]
    ss=v1618[16]
    ds=v1619[16]
    fs=v1620[16]
    gs=v1621[16]
    cf=v1622[1]
    ?1=v1623[1]
    pf=v1624[1]
    ?3=v1625[1]
    af=v1626[1]
    ?5=v1627[1]
    zf=v1628[1]
    sf=v1629[1]
    tf=v1630[1]
    if=v1631[1]
    df=v1632[1]
    of=v1633[1]
    iopl0=v1634[1]
    iopl1=v1635[1]
    nt=v1636[1]
    ?15=v1637[1]
    ip=134513601[32]
    memory:
        134518512[32]: v1638[32] 4 bytes read-only
        v1638[32]: v1639[32] 4 bytes read-only
    ip = 134513601[32]
0x80483c1:test   edx, edx
    ax=v1638[32]
    cx=v1609[32]
    dx=v1639[32]
    bx=v1611[32]
    sp=v1612[32]
    bp=v1613[32]
    si=v1614[32]
    di=v1615[32]
    es=v1616[16]
    cs=v1617[16]
    ss=v1618[16]
    ds=v1619[16]
    fs=v1620[16]
    gs=v1621[16]
    cf=0[1]
    ?1=v1623[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))))))
    ?3=v1625[1]
    af=v1640[1]
    ?5=v1627[1]
    zf=(zerop[1] (bv-and[32] v1639[32] v1639[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1639[32] v1639[32]))
    tf=v1630[1]
    if=v1631[1]
    df=v1632[1]
    of=0[1]
    iopl0=v1634[1]
    iopl1=v1635[1]
    nt=v1636[1]
    ?15=v1637[1]
    ip=134513603[32]
    memory:
        134518512[32]: v1638[32] 4 bytes read-only
        v1638[32]: v1639[32] 4 bytes read-only
    ip = 134513603[32]
0x80483c3:jne    0x080483b0
    ax=v1638[32]
    cx=v1609[32]
    dx=v1639[32]
    bx=v1611[32]
    sp=v1612[32]
    bp=v1613[32]
    si=v1614[32]
    di=v1615[32]
    es=v1616[16]
    cs=v1617[16]
    ss=v1618[16]
    ds=v1619[16]
    fs=v1620[16]
    gs=v1621[16]
    cf=0[1]
    ?1=v1623[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1639[32] v1639[32])))))))
    ?3=v1625[1]
    af=v1640[1]
    ?5=v1627[1]
    zf=(zerop[1] (bv-and[32] v1639[32] v1639[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1639[32] v1639[32]))
    tf=v1630[1]
    if=v1631[1]
    df=v1632[1]
    of=0[1]
    iopl0=v1634[1]
    iopl1=v1635[1]
    nt=v1636[1]
    ?15=v1637[1]
    ip=(ite[32] (invert[1] (zerop[1] (bv-and[32] v1639[32] v1639[32]))) 134513584[32] 134513605[32])
    memory:
        134518512[32]: v1638[32] 4 bytes read-only
        v1638[32]: v1639[32] 4 bytes read-only
    ip = (ite[32] (invert[1] (zerop[1] (bv-and[32] v1639[32] v1639[32]))) 134513584[32] 134513605[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483c5:mov    BYTE PTR ds:[0x080496f4], 0x01
    ax=v1673[32]
    cx=v1674[32]
    dx=v1675[32]
    bx=v1676[32]
    sp=v1677[32]
    bp=v1678[32]
    si=v1679[32]
    di=v1680[32]
    es=v1681[16]
    cs=v1682[16]
    ss=v1683[16]
    ds=v1684[16]
    fs=v1685[16]
    gs=v1686[16]
    cf=v1687[1]
    ?1=v1688[1]
    pf=v1689[1]
    ?3=v1690[1]
    af=v1691[1]
    ?5=v1692[1]
    zf=v1693[1]
    sf=v1694[1]
    tf=v1695[1]
    if=v1696[1]
    df=v1697[1]
    of=v1698[1]
    iopl0=v1699[1]
    iopl1=v1700[1]
    nt=v1701[1]
    ?15=v1702[1]
    ip=134513612[32]
    memory:
        134518516[32]: 1[32] 1 byte
    ip = 134513612[32]
0x80483cc:leave  
    ax=v1673[32]
    cx=v1674[32]
    dx=v1675[32]
    bx=v1676[32]
    sp=(add[32] v1678[32] 4[32])
    bp=v1703[32]
    si=v1679[32]
    di=v1680[32]
    es=v1681[16]
    cs=v1682[16]
    ss=v1683[16]
    ds=v1684[16]
    fs=v1685[16]
    gs=v1686[16]
    cf=v1687[1]
    ?1=v1688[1]
    pf=v1689[1]
    ?3=v1690[1]
    af=v1691[1]
    ?5=v1692[1]
    zf=v1693[1]
    sf=v1694[1]
    tf=v1695[1]
    if=v1696[1]
    df=v1697[1]
    of=v1698[1]
    iopl0=v1699[1]
    iopl1=v1700[1]
    nt=v1701[1]
    ?15=v1702[1]
    ip=134513613[32]
    memory:
        134518516[32]: 1[32] 1 byte
        v1678[32]: v1703[32] 4 bytes read-only
    ip = 134513613[32]
0x80483cd:ret    
    ax=v1673[32]
    cx=v1674[32]
    dx=v1675[32]
    bx=v1676[32]
    sp=(add[32] (add[32] v1678[32] 4[32]) 4[32])
    bp=v1703[32]
    si=v1679[32]
    di=v1680[32]
    es=v1681[16]
    cs=v1682[16]
    ss=v1683[16]
    ds=v1684[16]
    fs=v1685[16]
    gs=v1686[16]
    cf=v1687[1]
    ?1=v1688[1]
    pf=v1689[1]
    ?3=v1690[1]
    af=v1691[1]
    ?5=v1692[1]
    zf=v1693[1]
    sf=v1694[1]
    tf=v1695[1]
    if=v1696[1]
    df=v1697[1]
    of=v1698[1]
    iopl0=v1699[1]
    iopl1=v1700[1]
    nt=v1701[1]
    ?15=v1702[1]
    ip=v1704[32]
    memory:
        134518516[32]: 1[32] 1 byte
        v1678[32]: v1703[32] 4 bytes read-only
        (add[32] v1678[32] 4[32]): v1704[32] 4 bytes read-only
    ip = v1704[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483ce:mov    esi, esi
    ax=v1737[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=v1741[32]
    bp=v1742[32]
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=v1751[1]
    ?1=v1752[1]
    pf=v1753[1]
    ?3=v1754[1]
    af=v1755[1]
    ?5=v1756[1]
    zf=v1757[1]
    sf=v1758[1]
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=v1762[1]
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513616[32]
    memory:
    ip = 134513616[32]
0x80483d0:push   ebp
    ax=v1737[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] v1741[32] -4[32])
    bp=v1742[32]
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=v1751[1]
    ?1=v1752[1]
    pf=v1753[1]
    ?3=v1754[1]
    af=v1755[1]
    ?5=v1756[1]
    zf=v1757[1]
    sf=v1758[1]
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=v1762[1]
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513617[32]
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
    ip = 134513617[32]
0x80483d1:mov    ebp, esp
    ax=v1737[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] v1741[32] -4[32])
    bp=(add[32] v1741[32] -4[32])
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=v1751[1]
    ?1=v1752[1]
    pf=v1753[1]
    ?3=v1754[1]
    af=v1755[1]
    ?5=v1756[1]
    zf=v1757[1]
    sf=v1758[1]
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=v1762[1]
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513619[32]
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
    ip = 134513619[32]
0x80483d3:sub    esp, 0x08
    ax=v1737[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] (add[32] v1741[32] -4[32]) -8[32])
    bp=(add[32] v1741[32] -4[32])
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    ?1=v1752[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))))))
    ?3=v1754[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    ?5=v1756[1]
    zf=(zerop[1] (add[32] (add[32] v1741[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513622[32]
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
    ip = 134513622[32]
0x80483d6:mov    eax, DWORD PTR ds:[0x080495f8]
    ax=v1767[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] (add[32] v1741[32] -4[32]) -8[32])
    bp=(add[32] v1741[32] -4[32])
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    ?1=v1752[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1741[32] -4[32]) -8[32])))))))
    ?3=v1754[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    ?5=v1756[1]
    zf=(zerop[1] (add[32] (add[32] v1741[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v1741[32] -4[32]) -8[32]))
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1741[32] -4[32])) 4294967288[33]))))))
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513627[32]
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
        134518264[32]: v1767[32] 4 bytes read-only
    ip = 134513627[32]
0x80483db:test   eax, eax
    ax=v1767[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] (add[32] v1741[32] -4[32]) -8[32])
    bp=(add[32] v1741[32] -4[32])
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=0[1]
    ?1=v1752[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))))))
    ?3=v1754[1]
    af=v1768[1]
    ?5=v1756[1]
    zf=(zerop[1] (bv-and[32] v1767[32] v1767[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1767[32] v1767[32]))
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=0[1]
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=134513629[32]
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
        134518264[32]: v1767[32] 4 bytes read-only
    ip = 134513629[32]
0x80483dd:je     0x08048400
    ax=v1767[32]
    cx=v1738[32]
    dx=v1739[32]
    bx=v1740[32]
    sp=(add[32] (add[32] v1741[32] -4[32]) -8[32])
    bp=(add[32] v1741[32] -4[32])
    si=v1743[32]
    di=v1744[32]
    es=v1745[16]
    cs=v1746[16]
    ss=v1747[16]
    ds=v1748[16]
    fs=v1749[16]
    gs=v1750[16]
    cf=0[1]
    ?1=v1752[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] v1767[32] v1767[32])))))))
    ?3=v1754[1]
    af=v1768[1]
    ?5=v1756[1]
    zf=(zerop[1] (bv-and[32] v1767[32] v1767[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] v1767[32] v1767[32]))
    tf=v1759[1]
    if=v1760[1]
    df=v1761[1]
    of=0[1]
    iopl0=v1763[1]
    iopl1=v1764[1]
    nt=v1765[1]
    ?15=v1766[1]
    ip=(ite[32] (zerop[1] (bv-and[32] v1767[32] v1767[32])) 134513664[32] 134513631[32])
    memory:
        (add[32] v1741[32] -4[32]): v1742[32] 4 bytes
        134518264[32]: v1767[32] 4 bytes read-only
    ip = (ite[32] (zerop[1] (bv-and[32] v1767[32] v1767[32])) 134513664[32] 134513631[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483df:mov    eax, 0x00000000
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=v1805[32]
    bp=v1806[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=v1815[1]
    ?1=v1816[1]
    pf=v1817[1]
    ?3=v1818[1]
    af=v1819[1]
    ?5=v1820[1]
    zf=v1821[1]
    sf=v1822[1]
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=v1826[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=134513636[32]
    memory:
    ip = 134513636[32]
0x80483e4:test   eax, eax
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=v1805[32]
    bp=v1806[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=0[1]
    ?1=v1816[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))))))
    ?3=v1818[1]
    af=v1831[1]
    ?5=v1820[1]
    zf=(zerop[1] (bv-and[32] 0[32] 0[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] 0[32] 0[32]))
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=0[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=134513638[32]
    memory:
    ip = 134513638[32]
0x80483e6:je     0x08048400
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=v1805[32]
    bp=v1806[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=0[1]
    ?1=v1816[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))))))
    ?3=v1818[1]
    af=v1831[1]
    ?5=v1820[1]
    zf=(zerop[1] (bv-and[32] 0[32] 0[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] 0[32] 0[32]))
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=0[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=134513664[32]
    memory:
    ip = 134513664[32]
0x8048400:mov    esp, ebp
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=v1806[32]
    bp=v1806[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=0[1]
    ?1=v1816[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))))))
    ?3=v1818[1]
    af=v1831[1]
    ?5=v1820[1]
    zf=(zerop[1] (bv-and[32] 0[32] 0[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] 0[32] 0[32]))
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=0[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=134513666[32]
    memory:
    ip = 134513666[32]
0x8048402:pop    ebp
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=(add[32] v1806[32] 4[32])
    bp=v1832[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=0[1]
    ?1=v1816[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))))))
    ?3=v1818[1]
    af=v1831[1]
    ?5=v1820[1]
    zf=(zerop[1] (bv-and[32] 0[32] 0[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] 0[32] 0[32]))
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=0[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=134513667[32]
    memory:
        v1806[32]: v1832[32] 4 bytes read-only
    ip = 134513667[32]
0x8048403:ret    
    ax=0[32]
    cx=v1802[32]
    dx=v1803[32]
    bx=v1804[32]
    sp=(add[32] (add[32] v1806[32] 4[32]) 4[32])
    bp=v1832[32]
    si=v1807[32]
    di=v1808[32]
    es=v1809[16]
    cs=v1810[16]
    ss=v1811[16]
    ds=v1812[16]
    fs=v1813[16]
    gs=v1814[16]
    cf=0[1]
    ?1=v1816[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] 0[32] 0[32])))))))
    ?3=v1818[1]
    af=v1831[1]
    ?5=v1820[1]
    zf=(zerop[1] (bv-and[32] 0[32] 0[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] 0[32] 0[32]))
    tf=v1823[1]
    if=v1824[1]
    df=v1825[1]
    of=0[1]
    iopl0=v1827[1]
    iopl1=v1828[1]
    nt=v1829[1]
    ?15=v1830[1]
    ip=v1833[32]
    memory:
        v1806[32]: v1832[32] 4 bytes read-only
        (add[32] v1806[32] 4[32]): v1833[32] 4 bytes read-only
    ip = v1833[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483e8:mov    DWORD PTR ss:[esp], 0x080495f8
    ax=v1866[32]
    cx=v1867[32]
    dx=v1868[32]
    bx=v1869[32]
    sp=v1870[32]
    bp=v1871[32]
    si=v1872[32]
    di=v1873[32]
    es=v1874[16]
    cs=v1875[16]
    ss=v1876[16]
    ds=v1877[16]
    fs=v1878[16]
    gs=v1879[16]
    cf=v1880[1]
    ?1=v1881[1]
    pf=v1882[1]
    ?3=v1883[1]
    af=v1884[1]
    ?5=v1885[1]
    zf=v1886[1]
    sf=v1887[1]
    tf=v1888[1]
    if=v1889[1]
    df=v1890[1]
    of=v1891[1]
    iopl0=v1892[1]
    iopl1=v1893[1]
    nt=v1894[1]
    ?15=v1895[1]
    ip=134513647[32]
    memory:
        v1870[32]: 134518264[32] 4 bytes
    ip = 134513647[32]
0x80483ef:call   0x00000000
    ax=v1866[32]
    cx=v1867[32]
    dx=v1868[32]
    bx=v1869[32]
    sp=(add[32] v1870[32] -4[32])
    bp=v1871[32]
    si=v1872[32]
    di=v1873[32]
    es=v1874[16]
    cs=v1875[16]
    ss=v1876[16]
    ds=v1877[16]
    fs=v1878[16]
    gs=v1879[16]
    cf=v1880[1]
    ?1=v1881[1]
    pf=v1882[1]
    ?3=v1883[1]
    af=v1884[1]
    ?5=v1885[1]
    zf=v1886[1]
    sf=v1887[1]
    tf=v1888[1]
    if=v1889[1]
    df=v1890[1]
    of=v1891[1]
    iopl0=v1892[1]
    iopl1=v1893[1]
    nt=v1894[1]
    ?15=v1895[1]
    ip=0[32]
    memory:
        v1870[32]: 134518264[32] 4 bytes
        (add[32] v1870[32] -4[32]): 134513652[32] 4 bytes
    ip = 0[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80483f4:lea    esi, [esi + 0x00000000]
    ax=v1928[32]
    cx=v1929[32]
    dx=v1930[32]
    bx=v1931[32]
    sp=v1932[32]
    bp=v1933[32]
    si=v1934[32]
    di=v1935[32]
    es=v1936[16]
    cs=v1937[16]
    ss=v1938[16]
    ds=v1939[16]
    fs=v1940[16]
    gs=v1941[16]
    cf=v1942[1]
    ?1=v1943[1]
    pf=v1944[1]
    ?3=v1945[1]
    af=v1946[1]
    ?5=v1947[1]
    zf=v1948[1]
    sf=v1949[1]
    tf=v1950[1]
    if=v1951[1]
    df=v1952[1]
    of=v1953[1]
    iopl0=v1954[1]
    iopl1=v1955[1]
    nt=v1956[1]
    ?15=v1957[1]
    ip=134513658[32]
    memory:
    ip = 134513658[32]
0x80483fa:lea    edi, [edi + 0x00000000]
    ax=v1928[32]
    cx=v1929[32]
    dx=v1930[32]
    bx=v1931[32]
    sp=v1932[32]
    bp=v1933[32]
    si=v1934[32]
    di=v1935[32]
    es=v1936[16]
    cs=v1937[16]
    ss=v1938[16]
    ds=v1939[16]
    fs=v1940[16]
    gs=v1941[16]
    cf=v1942[1]
    ?1=v1943[1]
    pf=v1944[1]
    ?3=v1945[1]
    af=v1946[1]
    ?5=v1947[1]
    zf=v1948[1]
    sf=v1949[1]
    tf=v1950[1]
    if=v1951[1]
    df=v1952[1]
    of=v1953[1]
    iopl0=v1954[1]
    iopl1=v1955[1]
    nt=v1956[1]
    ?15=v1957[1]
    ip=134513664[32]
    memory:
    ip = 134513664[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048404:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513669[32]
    memory:
    ip = 134513669[32]
0x8048405:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513670[32]
    memory:
    ip = 134513670[32]
0x8048406:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513671[32]
    memory:
    ip = 134513671[32]
0x8048407:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513672[32]
    memory:
    ip = 134513672[32]
0x8048408:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513673[32]
    memory:
    ip = 134513673[32]
0x8048409:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513674[32]
    memory:
    ip = 134513674[32]
0x804840a:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513675[32]
    memory:
    ip = 134513675[32]
0x804840b:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513676[32]
    memory:
    ip = 134513676[32]
0x804840c:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513677[32]
    memory:
    ip = 134513677[32]
0x804840d:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513678[32]
    memory:
    ip = 134513678[32]
0x804840e:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513679[32]
    memory:
    ip = 134513679[32]
0x804840f:nop    
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=v1994[32]
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513680[32]
    memory:
    ip = 134513680[32]
0x8048410:push   ebp
    ax=v1990[32]
    cx=v1991[32]
    dx=v1992[32]
    bx=v1993[32]
    sp=(add[32] v1994[32] -4[32])
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513681[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
    ip = 134513681[32]
0x8048411:mov    edx, 0x08048480
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(add[32] v1994[32] -4[32])
    bp=v1995[32]
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513686[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
    ip = 134513686[32]
0x8048416:mov    ebp, esp
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(add[32] v1994[32] -4[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=v2004[1]
    ?1=v2005[1]
    pf=v2006[1]
    ?3=v2007[1]
    af=v2008[1]
    ?5=v2009[1]
    zf=v2010[1]
    sf=v2011[1]
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=v2015[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513688[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
    ip = 134513688[32]
0x8048418:sub    esp, 0x08
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(add[32] (add[32] v1994[32] -4[32]) -8[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) 4294967288[33]))))))
    ?1=v2005[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v1994[32] -4[32]) -8[32])))))))
    ?3=v2007[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) 4294967288[33]))))))
    ?5=v2009[1]
    zf=(zerop[1] (add[32] (add[32] v1994[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]))
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v1994[32] -4[32])) 4294967288[33]))))))
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513691[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
    ip = 134513691[32]
0x804841b:and    esp, 0xf0<-0x10>
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=0[1]
    ?1=v2005[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))))))
    ?3=v2007[1]
    af=v2020[1]
    ?5=v2009[1]
    zf=(zerop[1] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=0[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513694[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
    ip = 134513694[32]
0x804841e:mov    DWORD PTR ss:[esp + 0x04], edx
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=0[1]
    ?1=v2005[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))))))
    ?3=v2007[1]
    af=v2020[1]
    ?5=v2009[1]
    zf=(zerop[1] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=0[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513698[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
        (add[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]) 4[32]): 134513792[32] 4 bytes
    ip = 134513698[32]
0x8048422:mov    DWORD PTR ss:[esp], 0x0000000a
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=0[1]
    ?1=v2005[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))))))
    ?3=v2007[1]
    af=v2020[1]
    ?5=v2009[1]
    zf=(zerop[1] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=0[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513705[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
        (add[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]) 4[32]): 134513792[32] 4 bytes
        (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]): 10[32] 4 bytes
    ip = 134513705[32]
0x8048429:call   0x080482f0
    ax=v1990[32]
    cx=v1991[32]
    dx=134513792[32]
    bx=v1993[32]
    sp=(add[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]) -4[32])
    bp=(add[32] v1994[32] -4[32])
    si=v1996[32]
    di=v1997[32]
    es=v1998[16]
    cs=v1999[16]
    ss=v2000[16]
    ds=v2001[16]
    fs=v2002[16]
    gs=v2003[16]
    cf=0[1]
    ?1=v2005[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32])))))))
    ?3=v2007[1]
    af=v2020[1]
    ?5=v2009[1]
    zf=(zerop[1] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    sf=(extract[1] 31[32] 32[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]))
    tf=v2012[1]
    if=v2013[1]
    df=v2014[1]
    of=0[1]
    iopl0=v2016[1]
    iopl1=v2017[1]
    nt=v2018[1]
    ?15=v2019[1]
    ip=134513392[32]
    memory:
        (add[32] v1994[32] -4[32]): v1995[32] 4 bytes
        (add[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]) 4[32]): 134513792[32] 4 bytes
        (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]): 10[32] 4 bytes
        (add[32] (bv-and[32] (add[32] (add[32] v1994[32] -4[32]) -8[32]) -16[32]) -4[32]): 134513710[32] 4 bytes
    ip = 134513392[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804842e:mov    esp, ebp
    ax=v2053[32]
    cx=v2054[32]
    dx=v2055[32]
    bx=v2056[32]
    sp=v2058[32]
    bp=v2058[32]
    si=v2059[32]
    di=v2060[32]
    es=v2061[16]
    cs=v2062[16]
    ss=v2063[16]
    ds=v2064[16]
    fs=v2065[16]
    gs=v2066[16]
    cf=v2067[1]
    ?1=v2068[1]
    pf=v2069[1]
    ?3=v2070[1]
    af=v2071[1]
    ?5=v2072[1]
    zf=v2073[1]
    sf=v2074[1]
    tf=v2075[1]
    if=v2076[1]
    df=v2077[1]
    of=v2078[1]
    iopl0=v2079[1]
    iopl1=v2080[1]
    nt=v2081[1]
    ?15=v2082[1]
    ip=134513712[32]
    memory:
    ip = 134513712[32]
0x8048430:xor    eax, eax
    ax=(bv-xor[32] v2053[32] v2053[32])
    cx=v2054[32]
    dx=v2055[32]
    bx=v2056[32]
    sp=v2058[32]
    bp=v2058[32]
    si=v2059[32]
    di=v2060[32]
    es=v2061[16]
    cs=v2062[16]
    ss=v2063[16]
    ds=v2064[16]
    fs=v2065[16]
    gs=v2066[16]
    cf=0[1]
    ?1=v2068[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))))))
    ?3=v2070[1]
    af=v2083[1]
    ?5=v2072[1]
    zf=(zerop[1] (bv-xor[32] v2053[32] v2053[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2053[32] v2053[32]))
    tf=v2075[1]
    if=v2076[1]
    df=v2077[1]
    of=0[1]
    iopl0=v2079[1]
    iopl1=v2080[1]
    nt=v2081[1]
    ?15=v2082[1]
    ip=134513714[32]
    memory:
    ip = 134513714[32]
0x8048432:pop    ebp
    ax=(bv-xor[32] v2053[32] v2053[32])
    cx=v2054[32]
    dx=v2055[32]
    bx=v2056[32]
    sp=(add[32] v2058[32] 4[32])
    bp=v2084[32]
    si=v2059[32]
    di=v2060[32]
    es=v2061[16]
    cs=v2062[16]
    ss=v2063[16]
    ds=v2064[16]
    fs=v2065[16]
    gs=v2066[16]
    cf=0[1]
    ?1=v2068[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))))))
    ?3=v2070[1]
    af=v2083[1]
    ?5=v2072[1]
    zf=(zerop[1] (bv-xor[32] v2053[32] v2053[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2053[32] v2053[32]))
    tf=v2075[1]
    if=v2076[1]
    df=v2077[1]
    of=0[1]
    iopl0=v2079[1]
    iopl1=v2080[1]
    nt=v2081[1]
    ?15=v2082[1]
    ip=134513715[32]
    memory:
        v2058[32]: v2084[32] 4 bytes read-only
    ip = 134513715[32]
0x8048433:ret    
    ax=(bv-xor[32] v2053[32] v2053[32])
    cx=v2054[32]
    dx=v2055[32]
    bx=v2056[32]
    sp=(add[32] (add[32] v2058[32] 4[32]) 4[32])
    bp=v2084[32]
    si=v2059[32]
    di=v2060[32]
    es=v2061[16]
    cs=v2062[16]
    ss=v2063[16]
    ds=v2064[16]
    fs=v2065[16]
    gs=v2066[16]
    cf=0[1]
    ?1=v2068[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2053[32] v2053[32])))))))
    ?3=v2070[1]
    af=v2083[1]
    ?5=v2072[1]
    zf=(zerop[1] (bv-xor[32] v2053[32] v2053[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2053[32] v2053[32]))
    tf=v2075[1]
    if=v2076[1]
    df=v2077[1]
    of=0[1]
    iopl0=v2079[1]
    iopl1=v2080[1]
    nt=v2081[1]
    ?15=v2082[1]
    ip=v2085[32]
    memory:
        v2058[32]: v2084[32] 4 bytes read-only
        (add[32] v2058[32] 4[32]): v2085[32] 4 bytes read-only
    ip = v2085[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048434:lea    esi, [esi + 0x00000000]
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=v2122[32]
    bp=v2123[32]
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=v2132[1]
    ?1=v2133[1]
    pf=v2134[1]
    ?3=v2135[1]
    af=v2136[1]
    ?5=v2137[1]
    zf=v2138[1]
    sf=v2139[1]
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=v2143[1]
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513722[32]
    memory:
    ip = 134513722[32]
0x804843a:lea    edi, [edi + 0x00000000]
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=v2122[32]
    bp=v2123[32]
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=v2132[1]
    ?1=v2133[1]
    pf=v2134[1]
    ?3=v2135[1]
    af=v2136[1]
    ?5=v2137[1]
    zf=v2138[1]
    sf=v2139[1]
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=v2143[1]
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513728[32]
    memory:
    ip = 134513728[32]
0x8048440:push   ebp
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=(add[32] v2122[32] -4[32])
    bp=v2123[32]
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=v2132[1]
    ?1=v2133[1]
    pf=v2134[1]
    ?3=v2135[1]
    af=v2136[1]
    ?5=v2137[1]
    zf=v2138[1]
    sf=v2139[1]
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=v2143[1]
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513729[32]
    memory:
        (add[32] v2122[32] -4[32]): v2123[32] 4 bytes
    ip = 134513729[32]
0x8048441:mov    ebp, esp
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=(add[32] v2122[32] -4[32])
    bp=(add[32] v2122[32] -4[32])
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=v2132[1]
    ?1=v2133[1]
    pf=v2134[1]
    ?3=v2135[1]
    af=v2136[1]
    ?5=v2137[1]
    zf=v2138[1]
    sf=v2139[1]
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=v2143[1]
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513731[32]
    memory:
        (add[32] v2122[32] -4[32]): v2123[32] 4 bytes
    ip = 134513731[32]
0x8048443:sub    esp, 0x08
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=(add[32] (add[32] v2122[32] -4[32]) -8[32])
    bp=(add[32] v2122[32] -4[32])
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?1=v2133[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))))))
    ?3=v2135[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?5=v2137[1]
    zf=(zerop[1] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513734[32]
    memory:
        (add[32] v2122[32] -4[32]): v2123[32] 4 bytes
    ip = 134513734[32]
0x8048446:mov    DWORD PTR ss:[esp], 0x080485d4
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=(add[32] (add[32] v2122[32] -4[32]) -8[32])
    bp=(add[32] v2122[32] -4[32])
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?1=v2133[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))))))
    ?3=v2135[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?5=v2137[1]
    zf=(zerop[1] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513741[32]
    memory:
        (add[32] v2122[32] -4[32]): v2123[32] 4 bytes
        (add[32] (add[32] v2122[32] -4[32]) -8[32]): 134514132[32] 4 bytes
    ip = 134513741[32]
0x804844d:call   0x08048300
    ax=v2118[32]
    cx=v2119[32]
    dx=v2120[32]
    bx=v2121[32]
    sp=(add[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]) -4[32])
    bp=(add[32] v2122[32] -4[32])
    si=v2124[32]
    di=v2125[32]
    es=v2126[16]
    cs=v2127[16]
    ss=v2128[16]
    ds=v2129[16]
    fs=v2130[16]
    gs=v2131[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?1=v2133[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2122[32] -4[32]) -8[32])))))))
    ?3=v2135[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    ?5=v2137[1]
    zf=(zerop[1] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]))
    tf=v2140[1]
    if=v2141[1]
    df=v2142[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2122[32] -4[32])) 4294967288[33]))))))
    iopl0=v2144[1]
    iopl1=v2145[1]
    nt=v2146[1]
    ?15=v2147[1]
    ip=134513408[32]
    memory:
        (add[32] v2122[32] -4[32]): v2123[32] 4 bytes
        (add[32] (add[32] v2122[32] -4[32]) -8[32]): 134514132[32] 4 bytes
        (add[32] (add[32] (add[32] v2122[32] -4[32]) -8[32]) -4[32]): 134513746[32] 4 bytes
    ip = 134513408[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048452:mov    esp, ebp
    ax=v2180[32]
    cx=v2181[32]
    dx=v2182[32]
    bx=v2183[32]
    sp=v2185[32]
    bp=v2185[32]
    si=v2186[32]
    di=v2187[32]
    es=v2188[16]
    cs=v2189[16]
    ss=v2190[16]
    ds=v2191[16]
    fs=v2192[16]
    gs=v2193[16]
    cf=v2194[1]
    ?1=v2195[1]
    pf=v2196[1]
    ?3=v2197[1]
    af=v2198[1]
    ?5=v2199[1]
    zf=v2200[1]
    sf=v2201[1]
    tf=v2202[1]
    if=v2203[1]
    df=v2204[1]
    of=v2205[1]
    iopl0=v2206[1]
    iopl1=v2207[1]
    nt=v2208[1]
    ?15=v2209[1]
    ip=134513748[32]
    memory:
    ip = 134513748[32]
0x8048454:pop    ebp
    ax=v2180[32]
    cx=v2181[32]
    dx=v2182[32]
    bx=v2183[32]
    sp=(add[32] v2185[32] 4[32])
    bp=v2210[32]
    si=v2186[32]
    di=v2187[32]
    es=v2188[16]
    cs=v2189[16]
    ss=v2190[16]
    ds=v2191[16]
    fs=v2192[16]
    gs=v2193[16]
    cf=v2194[1]
    ?1=v2195[1]
    pf=v2196[1]
    ?3=v2197[1]
    af=v2198[1]
    ?5=v2199[1]
    zf=v2200[1]
    sf=v2201[1]
    tf=v2202[1]
    if=v2203[1]
    df=v2204[1]
    of=v2205[1]
    iopl0=v2206[1]
    iopl1=v2207[1]
    nt=v2208[1]
    ?15=v2209[1]
    ip=134513749[32]
    memory:
        v2185[32]: v2210[32] 4 bytes read-only
    ip = 134513749[32]
0x8048455:ret    
    ax=v2180[32]
    cx=v2181[32]
    dx=v2182[32]
    bx=v2183[32]
    sp=(add[32] (add[32] v2185[32] 4[32]) 4[32])
    bp=v2210[32]
    si=v2186[32]
    di=v2187[32]
    es=v2188[16]
    cs=v2189[16]
    ss=v2190[16]
    ds=v2191[16]
    fs=v2192[16]
    gs=v2193[16]
    cf=v2194[1]
    ?1=v2195[1]
    pf=v2196[1]
    ?3=v2197[1]
    af=v2198[1]
    ?5=v2199[1]
    zf=v2200[1]
    sf=v2201[1]
    tf=v2202[1]
    if=v2203[1]
    df=v2204[1]
    of=v2205[1]
    iopl0=v2206[1]
    iopl1=v2207[1]
    nt=v2208[1]
    ?15=v2209[1]
    ip=v2211[32]
    memory:
        v2185[32]: v2210[32] 4 bytes read-only
        (add[32] v2185[32] 4[32]): v2211[32] 4 bytes read-only
    ip = v2211[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048456:lea    esi, [esi + 0x00]
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=v2248[32]
    bp=v2249[32]
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=v2258[1]
    ?1=v2259[1]
    pf=v2260[1]
    ?3=v2261[1]
    af=v2262[1]
    ?5=v2263[1]
    zf=v2264[1]
    sf=v2265[1]
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=v2269[1]
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513753[32]
    memory:
    ip = 134513753[32]
0x8048459:lea    edi, [edi + 0x00000000]
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=v2248[32]
    bp=v2249[32]
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=v2258[1]
    ?1=v2259[1]
    pf=v2260[1]
    ?3=v2261[1]
    af=v2262[1]
    ?5=v2263[1]
    zf=v2264[1]
    sf=v2265[1]
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=v2269[1]
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513760[32]
    memory:
    ip = 134513760[32]
0x8048460:push   ebp
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=(add[32] v2248[32] -4[32])
    bp=v2249[32]
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=v2258[1]
    ?1=v2259[1]
    pf=v2260[1]
    ?3=v2261[1]
    af=v2262[1]
    ?5=v2263[1]
    zf=v2264[1]
    sf=v2265[1]
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=v2269[1]
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513761[32]
    memory:
        (add[32] v2248[32] -4[32]): v2249[32] 4 bytes
    ip = 134513761[32]
0x8048461:mov    ebp, esp
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=(add[32] v2248[32] -4[32])
    bp=(add[32] v2248[32] -4[32])
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=v2258[1]
    ?1=v2259[1]
    pf=v2260[1]
    ?3=v2261[1]
    af=v2262[1]
    ?5=v2263[1]
    zf=v2264[1]
    sf=v2265[1]
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=v2269[1]
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513763[32]
    memory:
        (add[32] v2248[32] -4[32]): v2249[32] 4 bytes
    ip = 134513763[32]
0x8048463:sub    esp, 0x08
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=(add[32] (add[32] v2248[32] -4[32]) -8[32])
    bp=(add[32] v2248[32] -4[32])
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?1=v2259[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))))))
    ?3=v2261[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?5=v2263[1]
    zf=(zerop[1] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513766[32]
    memory:
        (add[32] v2248[32] -4[32]): v2249[32] 4 bytes
    ip = 134513766[32]
0x8048466:mov    DWORD PTR ss:[esp], 0x080485d4
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=(add[32] (add[32] v2248[32] -4[32]) -8[32])
    bp=(add[32] v2248[32] -4[32])
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?1=v2259[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))))))
    ?3=v2261[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?5=v2263[1]
    zf=(zerop[1] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513773[32]
    memory:
        (add[32] v2248[32] -4[32]): v2249[32] 4 bytes
        (add[32] (add[32] v2248[32] -4[32]) -8[32]): 134514132[32] 4 bytes
    ip = 134513773[32]
0x804846d:call   0x08048300
    ax=v2244[32]
    cx=v2245[32]
    dx=v2246[32]
    bx=v2247[32]
    sp=(add[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]) -4[32])
    bp=(add[32] v2248[32] -4[32])
    si=v2250[32]
    di=v2251[32]
    es=v2252[16]
    cs=v2253[16]
    ss=v2254[16]
    ds=v2255[16]
    fs=v2256[16]
    gs=v2257[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?1=v2259[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2248[32] -4[32]) -8[32])))))))
    ?3=v2261[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    ?5=v2263[1]
    zf=(zerop[1] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]))
    tf=v2266[1]
    if=v2267[1]
    df=v2268[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2248[32] -4[32])) 4294967288[33]))))))
    iopl0=v2270[1]
    iopl1=v2271[1]
    nt=v2272[1]
    ?15=v2273[1]
    ip=134513408[32]
    memory:
        (add[32] v2248[32] -4[32]): v2249[32] 4 bytes
        (add[32] (add[32] v2248[32] -4[32]) -8[32]): 134514132[32] 4 bytes
        (add[32] (add[32] (add[32] v2248[32] -4[32]) -8[32]) -4[32]): 134513778[32] 4 bytes
    ip = 134513408[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048472:mov    DWORD PTR ss:[esp], 0x00000000
    ax=v2306[32]
    cx=v2307[32]
    dx=v2308[32]
    bx=v2309[32]
    sp=v2310[32]
    bp=v2311[32]
    si=v2312[32]
    di=v2313[32]
    es=v2314[16]
    cs=v2315[16]
    ss=v2316[16]
    ds=v2317[16]
    fs=v2318[16]
    gs=v2319[16]
    cf=v2320[1]
    ?1=v2321[1]
    pf=v2322[1]
    ?3=v2323[1]
    af=v2324[1]
    ?5=v2325[1]
    zf=v2326[1]
    sf=v2327[1]
    tf=v2328[1]
    if=v2329[1]
    df=v2330[1]
    of=v2331[1]
    iopl0=v2332[1]
    iopl1=v2333[1]
    nt=v2334[1]
    ?15=v2335[1]
    ip=134513785[32]
    memory:
        v2310[32]: 0[32] 4 bytes
    ip = 134513785[32]
0x8048479:call   0x08048320
    ax=v2306[32]
    cx=v2307[32]
    dx=v2308[32]
    bx=v2309[32]
    sp=(add[32] v2310[32] -4[32])
    bp=v2311[32]
    si=v2312[32]
    di=v2313[32]
    es=v2314[16]
    cs=v2315[16]
    ss=v2316[16]
    ds=v2317[16]
    fs=v2318[16]
    gs=v2319[16]
    cf=v2320[1]
    ?1=v2321[1]
    pf=v2322[1]
    ?3=v2323[1]
    af=v2324[1]
    ?5=v2325[1]
    zf=v2326[1]
    sf=v2327[1]
    tf=v2328[1]
    if=v2329[1]
    df=v2330[1]
    of=v2331[1]
    iopl0=v2332[1]
    iopl1=v2333[1]
    nt=v2334[1]
    ?15=v2335[1]
    ip=134513440[32]
    memory:
        v2310[32]: 0[32] 4 bytes
        (add[32] v2310[32] -4[32]): 134513790[32] 4 bytes
    ip = 134513440[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804847e:mov    esi, esi
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=v2372[32]
    bp=v2373[32]
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=v2382[1]
    ?1=v2383[1]
    pf=v2384[1]
    ?3=v2385[1]
    af=v2386[1]
    ?5=v2387[1]
    zf=v2388[1]
    sf=v2389[1]
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=v2393[1]
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513792[32]
    memory:
    ip = 134513792[32]
0x8048480:push   ebp
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] v2372[32] -4[32])
    bp=v2373[32]
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=v2382[1]
    ?1=v2383[1]
    pf=v2384[1]
    ?3=v2385[1]
    af=v2386[1]
    ?5=v2387[1]
    zf=v2388[1]
    sf=v2389[1]
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=v2393[1]
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513793[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes
    ip = 134513793[32]
0x8048481:mov    ebp, esp
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] v2372[32] -4[32])
    bp=(add[32] v2372[32] -4[32])
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=v2382[1]
    ?1=v2383[1]
    pf=v2384[1]
    ?3=v2385[1]
    af=v2386[1]
    ?5=v2387[1]
    zf=v2388[1]
    sf=v2389[1]
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=v2393[1]
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513795[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes
    ip = 134513795[32]
0x8048483:sub    esp, 0x08
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] (add[32] v2372[32] -4[32]) -8[32])
    bp=(add[32] v2372[32] -4[32])
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    ?1=v2383[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2372[32] -4[32]) -8[32])))))))
    ?3=v2385[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    ?5=v2387[1]
    zf=(zerop[1] (add[32] (add[32] v2372[32] -4[32]) -8[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]))
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513798[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes
    ip = 134513798[32]
0x8048486:inc    DWORD PTR ds:[0x080496f8]
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] (add[32] v2372[32] -4[32]) -8[32])
    bp=(add[32] v2372[32] -4[32])
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    ?1=v2383[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))))))
    ?3=v2385[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33])))))
    ?5=v2387[1]
    zf=(zerop[1] (add[32] v2398[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2398[32] 1[32]))
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))))
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513804[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes clobbered
        134518520[32]: (add[32] v2398[32] 1[32]) 4 bytes
    ip = 134513804[32]
0x804848c:mov    DWORD PTR ss:[esp], 0x080485d4
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] (add[32] v2372[32] -4[32]) -8[32])
    bp=(add[32] v2372[32] -4[32])
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    ?1=v2383[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))))))
    ?3=v2385[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33])))))
    ?5=v2387[1]
    zf=(zerop[1] (add[32] v2398[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2398[32] 1[32]))
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))))
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513811[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes clobbered
        134518520[32]: (add[32] v2398[32] 1[32]) 4 bytes clobbered
        (add[32] (add[32] v2372[32] -4[32]) -8[32]): 134514132[32] 4 bytes
    ip = 134513811[32]
0x8048493:call   0x08048300
    ax=v2368[32]
    cx=v2369[32]
    dx=v2370[32]
    bx=v2371[32]
    sp=(add[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]) -4[32])
    bp=(add[32] v2372[32] -4[32])
    si=v2374[32]
    di=v2375[32]
    es=v2376[16]
    cs=v2377[16]
    ss=v2378[16]
    ds=v2379[16]
    fs=v2380[16]
    gs=v2381[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) (bv-xor[33] 4294967287[33] (add[33] (uextend[33] 33[32] (add[32] v2372[32] -4[32])) 4294967288[33]))))))
    ?1=v2383[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2398[32] 1[32])))))))
    ?3=v2385[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33])))))
    ?5=v2387[1]
    zf=(zerop[1] (add[32] v2398[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2398[32] 1[32]))
    tf=v2390[1]
    if=v2391[1]
    df=v2392[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2398[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2398[32]) 1[33]))))))
    iopl0=v2394[1]
    iopl1=v2395[1]
    nt=v2396[1]
    ?15=v2397[1]
    ip=134513408[32]
    memory:
        (add[32] v2372[32] -4[32]): v2373[32] 4 bytes clobbered
        134518520[32]: (add[32] v2398[32] 1[32]) 4 bytes clobbered
        (add[32] (add[32] v2372[32] -4[32]) -8[32]): 134514132[32] 4 bytes
        (add[32] (add[32] (add[32] v2372[32] -4[32]) -8[32]) -4[32]): 134513816[32] 4 bytes
    ip = 134513408[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048498:mov    DWORD PTR ss:[esp], 0x00000000
    ax=v2431[32]
    cx=v2432[32]
    dx=v2433[32]
    bx=v2434[32]
    sp=v2435[32]
    bp=v2436[32]
    si=v2437[32]
    di=v2438[32]
    es=v2439[16]
    cs=v2440[16]
    ss=v2441[16]
    ds=v2442[16]
    fs=v2443[16]
    gs=v2444[16]
    cf=v2445[1]
    ?1=v2446[1]
    pf=v2447[1]
    ?3=v2448[1]
    af=v2449[1]
    ?5=v2450[1]
    zf=v2451[1]
    sf=v2452[1]
    tf=v2453[1]
    if=v2454[1]
    df=v2455[1]
    of=v2456[1]
    iopl0=v2457[1]
    iopl1=v2458[1]
    nt=v2459[1]
    ?15=v2460[1]
    ip=134513823[32]
    memory:
        v2435[32]: 0[32] 4 bytes
    ip = 134513823[32]
0x804849f:call   0x08048320
    ax=v2431[32]
    cx=v2432[32]
    dx=v2433[32]
    bx=v2434[32]
    sp=(add[32] v2435[32] -4[32])
    bp=v2436[32]
    si=v2437[32]
    di=v2438[32]
    es=v2439[16]
    cs=v2440[16]
    ss=v2441[16]
    ds=v2442[16]
    fs=v2443[16]
    gs=v2444[16]
    cf=v2445[1]
    ?1=v2446[1]
    pf=v2447[1]
    ?3=v2448[1]
    af=v2449[1]
    ?5=v2450[1]
    zf=v2451[1]
    sf=v2452[1]
    tf=v2453[1]
    if=v2454[1]
    df=v2455[1]
    of=v2456[1]
    iopl0=v2457[1]
    iopl1=v2458[1]
    nt=v2459[1]
    ?15=v2460[1]
    ip=134513440[32]
    memory:
        v2435[32]: 0[32] 4 bytes
        (add[32] v2435[32] -4[32]): 134513828[32] 4 bytes
    ip = 134513440[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484a4:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513829[32]
    memory:
    ip = 134513829[32]
0x80484a5:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513830[32]
    memory:
    ip = 134513830[32]
0x80484a6:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513831[32]
    memory:
    ip = 134513831[32]
0x80484a7:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513832[32]
    memory:
    ip = 134513832[32]
0x80484a8:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513833[32]
    memory:
    ip = 134513833[32]
0x80484a9:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513834[32]
    memory:
    ip = 134513834[32]
0x80484aa:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513835[32]
    memory:
    ip = 134513835[32]
0x80484ab:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513836[32]
    memory:
    ip = 134513836[32]
0x80484ac:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513837[32]
    memory:
    ip = 134513837[32]
0x80484ad:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513838[32]
    memory:
    ip = 134513838[32]
0x80484ae:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513839[32]
    memory:
    ip = 134513839[32]
0x80484af:nop    
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=v2497[32]
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513840[32]
    memory:
    ip = 134513840[32]
0x80484b0:push   ebp
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] v2497[32] -4[32])
    bp=v2498[32]
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513841[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
    ip = 134513841[32]
0x80484b1:mov    ebp, esp
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] v2497[32] -4[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513843[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
    ip = 134513843[32]
0x80484b3:push   edi
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] (add[32] v2497[32] -4[32]) -4[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513844[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
        (add[32] (add[32] v2497[32] -4[32]) -4[32]): v2500[32] 4 bytes
    ip = 134513844[32]
0x80484b4:push   esi
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513845[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
        (add[32] (add[32] v2497[32] -4[32]) -4[32]): v2500[32] 4 bytes
        (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]): v2499[32] 4 bytes
    ip = 134513845[32]
0x80484b5:push   ebx
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=v2507[1]
    ?1=v2508[1]
    pf=v2509[1]
    ?3=v2510[1]
    af=v2511[1]
    ?5=v2512[1]
    zf=v2513[1]
    sf=v2514[1]
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=v2518[1]
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513846[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
        (add[32] (add[32] v2497[32] -4[32]) -4[32]): v2500[32] 4 bytes
        (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]): v2499[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]): v2496[32] 4 bytes
    ip = 134513846[32]
0x80484b6:sub    esp, 0x0c
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?1=v2508[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))
    ?3=v2510[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?5=v2512[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513849[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
        (add[32] (add[32] v2497[32] -4[32]) -4[32]): v2500[32] 4 bytes
        (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]): v2499[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]): v2496[32] 4 bytes
    ip = 134513849[32]
0x80484b9:call   0x080484be
    ax=v2493[32]
    cx=v2494[32]
    dx=v2495[32]
    bx=v2496[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])
    bp=(add[32] v2497[32] -4[32])
    si=v2499[32]
    di=v2500[32]
    es=v2501[16]
    cs=v2502[16]
    ss=v2503[16]
    ds=v2504[16]
    fs=v2505[16]
    gs=v2506[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?1=v2508[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))
    ?3=v2510[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?5=v2512[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    tf=v2515[1]
    if=v2516[1]
    df=v2517[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    iopl0=v2519[1]
    iopl1=v2520[1]
    nt=v2521[1]
    ?15=v2522[1]
    ip=134513854[32]
    memory:
        (add[32] v2497[32] -4[32]): v2498[32] 4 bytes
        (add[32] (add[32] v2497[32] -4[32]) -4[32]): v2500[32] 4 bytes
        (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]): v2499[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]): v2496[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2497[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]): 134513854[32] 4 bytes
    ip = 134513854[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484be:pop    ebx
    ax=v2555[32]
    cx=v2556[32]
    dx=v2557[32]
    bx=v2585[32]
    sp=(add[32] v2559[32] 4[32])
    bp=v2560[32]
    si=v2561[32]
    di=v2562[32]
    es=v2563[16]
    cs=v2564[16]
    ss=v2565[16]
    ds=v2566[16]
    fs=v2567[16]
    gs=v2568[16]
    cf=v2569[1]
    ?1=v2570[1]
    pf=v2571[1]
    ?3=v2572[1]
    af=v2573[1]
    ?5=v2574[1]
    zf=v2575[1]
    sf=v2576[1]
    tf=v2577[1]
    if=v2578[1]
    df=v2579[1]
    of=v2580[1]
    iopl0=v2581[1]
    iopl1=v2582[1]
    nt=v2583[1]
    ?15=v2584[1]
    ip=134513855[32]
    memory:
        v2559[32]: v2585[32] 4 bytes read-only
    ip = 134513855[32]
0x80484bf:add    ebx, 0x0000120a
    ax=v2555[32]
    cx=v2556[32]
    dx=v2557[32]
    bx=(add[32] v2585[32] 4618[32])
    sp=(add[32] v2559[32] 4[32])
    bp=v2560[32]
    si=v2561[32]
    di=v2562[32]
    es=v2563[16]
    cs=v2564[16]
    ss=v2565[16]
    ds=v2566[16]
    fs=v2567[16]
    gs=v2568[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33])))))
    ?1=v2570[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))))))
    ?3=v2572[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33])))))
    ?5=v2574[1]
    zf=(zerop[1] (add[32] v2585[32] 4618[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2585[32] 4618[32]))
    tf=v2577[1]
    if=v2578[1]
    df=v2579[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33]))))))
    iopl0=v2581[1]
    iopl1=v2582[1]
    nt=v2583[1]
    ?15=v2584[1]
    ip=134513861[32]
    memory:
        v2559[32]: v2585[32] 4 bytes read-only
    ip = 134513861[32]
0x80484c5:call   0x080482c8
    ax=v2555[32]
    cx=v2556[32]
    dx=v2557[32]
    bx=(add[32] v2585[32] 4618[32])
    sp=(add[32] (add[32] v2559[32] 4[32]) -4[32])
    bp=v2560[32]
    si=v2561[32]
    di=v2562[32]
    es=v2563[16]
    cs=v2564[16]
    ss=v2565[16]
    ds=v2566[16]
    fs=v2567[16]
    gs=v2568[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33])))))
    ?1=v2570[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2585[32] 4618[32])))))))
    ?3=v2572[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33])))))
    ?5=v2574[1]
    zf=(zerop[1] (add[32] v2585[32] 4618[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2585[32] 4618[32]))
    tf=v2577[1]
    if=v2578[1]
    df=v2579[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2585[32]) (bv-xor[33] 4618[33] (add[33] (uextend[33] 33[32] v2585[32]) 4618[33]))))))
    iopl0=v2581[1]
    iopl1=v2582[1]
    nt=v2583[1]
    ?15=v2584[1]
    ip=134513352[32]
    memory:
        (add[32] (add[32] v2559[32] 4[32]) -4[32]): 134513866[32] 4 bytes
    ip = 134513352[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484ca:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    ax=(add[32] v2621[32] -224[32])
    cx=v2619[32]
    dx=v2620[32]
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=v2632[1]
    ?1=v2633[1]
    pf=v2634[1]
    ?3=v2635[1]
    af=v2636[1]
    ?5=v2637[1]
    zf=v2638[1]
    sf=v2639[1]
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=v2643[1]
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513872[32]
    memory:
    ip = 134513872[32]
0x80484d0:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    ax=(add[32] v2621[32] -224[32])
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=v2632[1]
    ?1=v2633[1]
    pf=v2634[1]
    ?3=v2635[1]
    af=v2636[1]
    ?5=v2637[1]
    zf=v2638[1]
    sf=v2639[1]
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=v2643[1]
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513878[32]
    memory:
    ip = 134513878[32]
0x80484d6:sub    eax, edx
    ax=(add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) 1[33])))))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))))))
    ?3=v2635[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) 1[33])))))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) (add[33] (uextend[33] 33[32] (add[32] v2621[32] -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v2621[32] -224[32]))) 1[33])))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513880[32]
    memory:
    ip = 134513880[32]
0x80484d8:sar    eax, 0x02
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))))))
    ?3=v2635[1]
    af=v2648[1]
    ?5=v2637[1]
    zf=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    sf=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=0[1]
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513883[32]
    memory:
    ip = 134513883[32]
0x80484db:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))))))
    ?3=v2635[1]
    af=v2648[1]
    ?5=v2637[1]
    zf=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    sf=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=0[1]
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513886[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
    ip = 134513886[32]
0x80484de:jne    0x080484f0
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=v2622[32]
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))))))))
    ?3=v2635[1]
    af=v2648[1]
    ?5=v2637[1]
    zf=(zerop[1] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    sf=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=0[1]
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513888[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
    ip = 134513888[32]
0x80484e0:add    esp, 0x0c
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2621[32]
    sp=(add[32] v2622[32] 12[32])
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513891[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
    ip = 134513891[32]
0x80484e3:pop    ebx
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2649[32]
    sp=(add[32] (add[32] v2622[32] 12[32]) 4[32])
    bp=v2623[32]
    si=v2624[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513892[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
        (add[32] v2622[32] 12[32]): v2649[32] 4 bytes read-only
    ip = 134513892[32]
0x80484e4:pop    esi
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2649[32]
    sp=(add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32])
    bp=v2623[32]
    si=v2650[32]
    di=v2625[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513893[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
        (add[32] v2622[32] 12[32]): v2649[32] 4 bytes read-only
        (add[32] (add[32] v2622[32] 12[32]) 4[32]): v2650[32] 4 bytes read-only
    ip = 134513893[32]
0x80484e5:pop    edi
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2649[32]
    sp=(add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32])
    bp=v2623[32]
    si=v2650[32]
    di=v2651[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513894[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
        (add[32] v2622[32] 12[32]): v2649[32] 4 bytes read-only
        (add[32] (add[32] v2622[32] 12[32]) 4[32]): v2650[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]): v2651[32] 4 bytes read-only
    ip = 134513894[32]
0x80484e6:pop    ebp
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2649[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v2652[32]
    si=v2650[32]
    di=v2651[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=134513895[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
        (add[32] v2622[32] 12[32]): v2649[32] 4 bytes read-only
        (add[32] (add[32] v2622[32] 12[32]) 4[32]): v2650[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]): v2651[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32]): v2652[32] 4 bytes read-only
    ip = 134513895[32]
0x80484e7:ret    
    ax=(asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32])))
    cx=v2619[32]
    dx=(add[32] v2621[32] -224[32])
    bx=v2649[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v2652[32]
    si=v2650[32]
    di=v2651[32]
    es=v2626[16]
    cs=v2627[16]
    ss=v2628[16]
    ds=v2629[16]
    fs=v2630[16]
    gs=v2631[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?1=v2633[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2622[32] 12[32])))))))
    ?3=v2635[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33])))))
    ?5=v2637[1]
    zf=(zerop[1] (add[32] v2622[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2622[32] 12[32]))
    tf=v2640[1]
    if=v2641[1]
    df=v2642[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2622[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2622[32]) 12[33]))))))
    iopl0=v2644[1]
    iopl1=v2645[1]
    nt=v2646[1]
    ?15=v2647[1]
    ip=v2653[32]
    memory:
        (add[32] v2623[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] v2621[32] -224[32]) (add[32] (invert[32] (add[32] v2621[32] -224[32])) 1[32]))) 4 bytes
        (add[32] v2622[32] 12[32]): v2649[32] 4 bytes read-only
        (add[32] (add[32] v2622[32] 12[32]) 4[32]): v2650[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]): v2651[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32]): v2652[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] (add[32] v2622[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]): v2653[32] 4 bytes read-only
    ip = v2653[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80484e8:nop    
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2692[32]
    di=v2693[32]
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=v2700[1]
    ?1=v2701[1]
    pf=v2702[1]
    ?3=v2703[1]
    af=v2704[1]
    ?5=v2705[1]
    zf=v2706[1]
    sf=v2707[1]
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=v2711[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513897[32]
    memory:
    ip = 134513897[32]
0x80484e9:lea    esi, [esi + 0x00000000]
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2692[32]
    di=v2693[32]
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=v2700[1]
    ?1=v2701[1]
    pf=v2702[1]
    ?3=v2703[1]
    af=v2704[1]
    ?5=v2705[1]
    zf=v2706[1]
    sf=v2707[1]
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=v2711[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513904[32]
    memory:
    ip = 134513904[32]
0x80484f0:xor    edi, edi
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2692[32]
    di=(bv-xor[32] v2693[32] v2693[32])
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=0[1]
    ?1=v2701[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))))))
    ?3=v2703[1]
    af=v2716[1]
    ?5=v2705[1]
    zf=(zerop[1] (bv-xor[32] v2693[32] v2693[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2693[32] v2693[32]))
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=0[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513906[32]
    memory:
    ip = 134513906[32]
0x80484f2:mov    esi, edx
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2688[32]
    di=(bv-xor[32] v2693[32] v2693[32])
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=0[1]
    ?1=v2701[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))))))
    ?3=v2703[1]
    af=v2716[1]
    ?5=v2705[1]
    zf=(zerop[1] (bv-xor[32] v2693[32] v2693[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2693[32] v2693[32]))
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=0[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513908[32]
    memory:
    ip = 134513908[32]
0x80484f4:lea    esi, [esi + 0x00000000]
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2688[32]
    di=(bv-xor[32] v2693[32] v2693[32])
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=0[1]
    ?1=v2701[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))))))
    ?3=v2703[1]
    af=v2716[1]
    ?5=v2705[1]
    zf=(zerop[1] (bv-xor[32] v2693[32] v2693[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2693[32] v2693[32]))
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=0[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513914[32]
    memory:
    ip = 134513914[32]
0x80484fa:lea    edi, [edi + 0x00000000]
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=v2690[32]
    bp=v2691[32]
    si=v2688[32]
    di=(bv-xor[32] v2693[32] v2693[32])
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=0[1]
    ?1=v2701[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))))))
    ?3=v2703[1]
    af=v2716[1]
    ?5=v2705[1]
    zf=(zerop[1] (bv-xor[32] v2693[32] v2693[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2693[32] v2693[32]))
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=0[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=134513920[32]
    memory:
    ip = 134513920[32]
0x8048500:call   DWORD PTR ds:[esi]
    ax=v2686[32]
    cx=v2687[32]
    dx=v2688[32]
    bx=v2689[32]
    sp=(add[32] v2690[32] -4[32])
    bp=v2691[32]
    si=v2688[32]
    di=(bv-xor[32] v2693[32] v2693[32])
    es=v2694[16]
    cs=v2695[16]
    ss=v2696[16]
    ds=v2697[16]
    fs=v2698[16]
    gs=v2699[16]
    cf=0[1]
    ?1=v2701[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v2693[32] v2693[32])))))))
    ?3=v2703[1]
    af=v2716[1]
    ?5=v2705[1]
    zf=(zerop[1] (bv-xor[32] v2693[32] v2693[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v2693[32] v2693[32]))
    tf=v2708[1]
    if=v2709[1]
    df=v2710[1]
    of=0[1]
    iopl0=v2712[1]
    iopl1=v2713[1]
    nt=v2714[1]
    ?15=v2715[1]
    ip=v2717[32]
    memory:
        (add[32] v2690[32] -4[32]): 134513922[32] 4 bytes
        v2688[32]: v2717[32] 4 bytes read-only
    ip = v2717[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048502:inc    edi
    ax=v2750[32]
    cx=v2751[32]
    dx=v2752[32]
    bx=v2753[32]
    sp=v2754[32]
    bp=v2755[32]
    si=v2756[32]
    di=(add[32] v2757[32] 1[32])
    es=v2758[16]
    cs=v2759[16]
    ss=v2760[16]
    ds=v2761[16]
    fs=v2762[16]
    gs=v2763[16]
    cf=v2764[1]
    ?1=v2765[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2757[32] 1[32])))))))
    ?3=v2767[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2757[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2757[32]) 1[33])))))
    ?5=v2769[1]
    zf=(zerop[1] (add[32] v2757[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2757[32] 1[32]))
    tf=v2772[1]
    if=v2773[1]
    df=v2774[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2757[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2757[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2757[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v2757[32]) 1[33]))))))
    iopl0=v2776[1]
    iopl1=v2777[1]
    nt=v2778[1]
    ?15=v2779[1]
    ip=134513923[32]
    memory:
    ip = 134513923[32]
0x8048503:add    esi, 0x04
    ax=v2750[32]
    cx=v2751[32]
    dx=v2752[32]
    bx=v2753[32]
    sp=v2754[32]
    bp=v2755[32]
    si=(add[32] v2756[32] 4[32])
    di=(add[32] v2757[32] 1[32])
    es=v2758[16]
    cs=v2759[16]
    ss=v2760[16]
    ds=v2761[16]
    fs=v2762[16]
    gs=v2763[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2756[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2756[32]) 4[33])))))
    ?1=v2765[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2756[32] 4[32])))))))
    ?3=v2767[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2756[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2756[32]) 4[33])))))
    ?5=v2769[1]
    zf=(zerop[1] (add[32] v2756[32] 4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2756[32] 4[32]))
    tf=v2772[1]
    if=v2773[1]
    df=v2774[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2756[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2756[32]) 4[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2756[32]) (bv-xor[33] 4[33] (add[33] (uextend[33] 33[32] v2756[32]) 4[33]))))))
    iopl0=v2776[1]
    iopl1=v2777[1]
    nt=v2778[1]
    ?15=v2779[1]
    ip=134513926[32]
    memory:
    ip = 134513926[32]
0x8048506:cmp    edi, DWORD PTR ss:[ebp + 0xf0<-0x10>]
    ax=v2750[32]
    cx=v2751[32]
    dx=v2752[32]
    bx=v2753[32]
    sp=v2754[32]
    bp=v2755[32]
    si=(add[32] v2756[32] 4[32])
    di=(add[32] v2757[32] 1[32])
    es=v2758[16]
    cs=v2759[16]
    ss=v2760[16]
    ds=v2761[16]
    fs=v2762[16]
    gs=v2763[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    ?1=v2765[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))))))
    ?3=v2767[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    ?5=v2769[1]
    zf=(zerop[1] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))
    tf=v2772[1]
    if=v2773[1]
    df=v2774[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    iopl0=v2776[1]
    iopl1=v2777[1]
    nt=v2778[1]
    ?15=v2779[1]
    ip=134513929[32]
    memory:
        (add[32] v2755[32] -16[32]): v2780[32] 4 bytes read-only
    ip = 134513929[32]
0x8048509:jb     0x08048500
    ax=v2750[32]
    cx=v2751[32]
    dx=v2752[32]
    bx=v2753[32]
    sp=v2754[32]
    bp=v2755[32]
    si=(add[32] v2756[32] 4[32])
    di=(add[32] v2757[32] 1[32])
    es=v2758[16]
    cs=v2759[16]
    ss=v2760[16]
    ds=v2761[16]
    fs=v2762[16]
    gs=v2763[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    ?1=v2765[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32]))))))))
    ?3=v2767[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    ?5=v2769[1]
    zf=(zerop[1] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] v2757[32] 1[32]) (add[32] (invert[32] v2780[32]) 1[32])))
    tf=v2772[1]
    if=v2773[1]
    df=v2774[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33])))))))
    iopl0=v2776[1]
    iopl1=v2777[1]
    nt=v2778[1]
    ?15=v2779[1]
    ip=(ite[32] (invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33]))))))) 134513920[32] 134513931[32])
    memory:
        (add[32] v2755[32] -16[32]): v2780[32] 4 bytes read-only
    ip = (ite[32] (invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] v2780[32])) (add[33] (uextend[33] 33[32] (add[32] v2757[32] 1[32])) (add[33] (uextend[33] 33[32] (invert[32] v2780[32])) 1[33]))))))) 134513920[32] 134513931[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804850b:add    esp, 0x0c
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2816[32]
    sp=(add[32] v2817[32] 12[32])
    bp=v2818[32]
    si=v2819[32]
    di=v2820[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=134513934[32]
    memory:
    ip = 134513934[32]
0x804850e:pop    ebx
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2843[32]
    sp=(add[32] (add[32] v2817[32] 12[32]) 4[32])
    bp=v2818[32]
    si=v2819[32]
    di=v2820[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=134513935[32]
    memory:
        (add[32] v2817[32] 12[32]): v2843[32] 4 bytes read-only
    ip = 134513935[32]
0x804850f:pop    esi
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2843[32]
    sp=(add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32])
    bp=v2818[32]
    si=v2844[32]
    di=v2820[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=134513936[32]
    memory:
        (add[32] v2817[32] 12[32]): v2843[32] 4 bytes read-only
        (add[32] (add[32] v2817[32] 12[32]) 4[32]): v2844[32] 4 bytes read-only
    ip = 134513936[32]
0x8048510:pop    edi
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2843[32]
    sp=(add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32])
    bp=v2818[32]
    si=v2844[32]
    di=v2845[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=134513937[32]
    memory:
        (add[32] v2817[32] 12[32]): v2843[32] 4 bytes read-only
        (add[32] (add[32] v2817[32] 12[32]) 4[32]): v2844[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]): v2845[32] 4 bytes read-only
    ip = 134513937[32]
0x8048511:pop    ebp
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2843[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v2846[32]
    si=v2844[32]
    di=v2845[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=134513938[32]
    memory:
        (add[32] v2817[32] 12[32]): v2843[32] 4 bytes read-only
        (add[32] (add[32] v2817[32] 12[32]) 4[32]): v2844[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]): v2845[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32]): v2846[32] 4 bytes read-only
    ip = 134513938[32]
0x8048512:ret    
    ax=v2813[32]
    cx=v2814[32]
    dx=v2815[32]
    bx=v2843[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v2846[32]
    si=v2844[32]
    di=v2845[32]
    es=v2821[16]
    cs=v2822[16]
    ss=v2823[16]
    ds=v2824[16]
    fs=v2825[16]
    gs=v2826[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?1=v2828[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2817[32] 12[32])))))))
    ?3=v2830[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33])))))
    ?5=v2832[1]
    zf=(zerop[1] (add[32] v2817[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2817[32] 12[32]))
    tf=v2835[1]
    if=v2836[1]
    df=v2837[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2817[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v2817[32]) 12[33]))))))
    iopl0=v2839[1]
    iopl1=v2840[1]
    nt=v2841[1]
    ?15=v2842[1]
    ip=v2847[32]
    memory:
        (add[32] v2817[32] 12[32]): v2843[32] 4 bytes read-only
        (add[32] (add[32] v2817[32] 12[32]) 4[32]): v2844[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]): v2845[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32]): v2846[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] (add[32] v2817[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]): v2847[32] 4 bytes read-only
    ip = v2847[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048513:lea    esi, [esi + 0x00000000]
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=v2884[32]
    bp=v2885[32]
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513945[32]
    memory:
    ip = 134513945[32]
0x8048519:lea    edi, [edi + 0x00000000]
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=v2884[32]
    bp=v2885[32]
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513952[32]
    memory:
    ip = 134513952[32]
0x8048520:push   ebp
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] v2884[32] -4[32])
    bp=v2885[32]
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513953[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
    ip = 134513953[32]
0x8048521:mov    ebp, esp
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] v2884[32] -4[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513955[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
    ip = 134513955[32]
0x8048523:push   edi
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] (add[32] v2884[32] -4[32]) -4[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513956[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
        (add[32] (add[32] v2884[32] -4[32]) -4[32]): v2887[32] 4 bytes
    ip = 134513956[32]
0x8048524:push   esi
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513957[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
        (add[32] (add[32] v2884[32] -4[32]) -4[32]): v2887[32] 4 bytes
        (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]): v2886[32] 4 bytes
    ip = 134513957[32]
0x8048525:push   ebx
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=v2894[1]
    ?1=v2895[1]
    pf=v2896[1]
    ?3=v2897[1]
    af=v2898[1]
    ?5=v2899[1]
    zf=v2900[1]
    sf=v2901[1]
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=v2905[1]
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513958[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
        (add[32] (add[32] v2884[32] -4[32]) -4[32]): v2887[32] 4 bytes
        (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]): v2886[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]): v2883[32] 4 bytes
    ip = 134513958[32]
0x8048526:sub    esp, 0x0c
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?1=v2895[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))
    ?3=v2897[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?5=v2899[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513961[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
        (add[32] (add[32] v2884[32] -4[32]) -4[32]): v2887[32] 4 bytes
        (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]): v2886[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]): v2883[32] 4 bytes
    ip = 134513961[32]
0x8048529:call   0x0804852e
    ax=v2880[32]
    cx=v2881[32]
    dx=v2882[32]
    bx=v2883[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32])
    bp=(add[32] v2884[32] -4[32])
    si=v2886[32]
    di=v2887[32]
    es=v2888[16]
    cs=v2889[16]
    ss=v2890[16]
    ds=v2891[16]
    fs=v2892[16]
    gs=v2893[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?1=v2895[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32])))))))
    ?3=v2897[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    ?5=v2899[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]))
    tf=v2902[1]
    if=v2903[1]
    df=v2904[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) (bv-xor[33] 4294967283[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32])) 4294967284[33]))))))
    iopl0=v2906[1]
    iopl1=v2907[1]
    nt=v2908[1]
    ?15=v2909[1]
    ip=134513966[32]
    memory:
        (add[32] v2884[32] -4[32]): v2885[32] 4 bytes
        (add[32] (add[32] v2884[32] -4[32]) -4[32]): v2887[32] 4 bytes
        (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]): v2886[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]): v2883[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v2884[32] -4[32]) -4[32]) -4[32]) -4[32]) -12[32]) -4[32]): 134513966[32] 4 bytes
    ip = 134513966[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804852e:pop    ebx
    ax=v2942[32]
    cx=v2943[32]
    dx=v2944[32]
    bx=v2972[32]
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=v2956[1]
    ?1=v2957[1]
    pf=v2958[1]
    ?3=v2959[1]
    af=v2960[1]
    ?5=v2961[1]
    zf=v2962[1]
    sf=v2963[1]
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=v2967[1]
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513967[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513967[32]
0x804852f:add    ebx, 0x0000119a
    ax=v2942[32]
    cx=v2943[32]
    dx=v2944[32]
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))))))
    ?3=v2959[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] v2972[32] 4506[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2972[32] 4506[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513973[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513973[32]
0x8048535:lea    eax, [ebx + 0xffffff20<-0x000000e0>]
    ax=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    cx=v2943[32]
    dx=v2944[32]
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))))))
    ?3=v2959[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] v2972[32] 4506[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2972[32] 4506[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513979[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513979[32]
0x804853b:lea    edx, [ebx + 0xffffff20<-0x000000e0>]
    ax=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v2972[32] 4506[32])))))))
    ?3=v2959[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33])))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] v2972[32] 4506[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v2972[32] 4506[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v2972[32]) (bv-xor[33] 4506[33] (add[33] (uextend[33] 33[32] v2972[32]) 4506[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513985[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513985[32]
0x8048541:sub    eax, edx
    ax=(add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) 1[33])))))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))))))
    ?3=v2959[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) 1[33])))))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) (add[33] (uextend[33] 33[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) (add[33] (uextend[33] 33[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]))) 1[33])))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513987[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513987[32]
0x8048543:sar    eax, 0x02
    ax=(asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))))))
    ?3=v2959[1]
    af=v2973[1]
    ?5=v2961[1]
    zf=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    sf=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=0[1]
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513990[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only
    ip = 134513990[32]
0x8048546:mov    DWORD PTR ss:[ebp + 0xf0<-0x10>], eax
    ax=(asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))))))))
    ?3=v2959[1]
    af=v2973[1]
    ?5=v2961[1]
    zf=(zerop[1] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    sf=(extract[1] 31[32] 32[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=0[1]
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513993[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only clobbered
        (add[32] v2947[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) 4 bytes
    ip = 134513993[32]
0x8048549:dec    eax
    ax=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(extract[1] 0[32] 1[32] (shr0[32] 1[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])))))))
    ?3=v2959[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) (bv-xor[33] 4294967295[33] (add[33] (uextend[33] 33[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32])))) 4294967295[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513994[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only clobbered
        (add[32] v2947[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) 4 bytes
    ip = 134513994[32]
0x804854a:cmp    eax, 0xff<-0x01>
    ax=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))))))
    ?3=v2959[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134513997[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only clobbered
        (add[32] v2947[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) 4 bytes
    ip = 134513997[32]
0x804854d:je     0x0804856b
    ax=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] v2946[32] 4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))))))
    ?3=v2959[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134514027[32]
    memory:
        v2946[32]: v2972[32] 4 bytes read-only clobbered
        (add[32] v2947[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) 4 bytes
    ip = 134514027[32]
0x804856b:call   0x080485b0
    ax=(add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])
    cx=v2943[32]
    dx=(add[32] (add[32] v2972[32] 4506[32]) -224[32])
    bx=(add[32] v2972[32] 4506[32])
    sp=(add[32] (add[32] v2946[32] 4[32]) -4[32])
    bp=v2947[32]
    si=v2948[32]
    di=v2949[32]
    es=v2950[16]
    cs=v2951[16]
    ss=v2952[16]
    ds=v2953[16]
    fs=v2954[16]
    gs=v2955[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?1=v2957[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32])))))))
    ?3=v2959[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    ?5=v2961[1]
    zf=(zerop[1] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32]) 1[32]))
    tf=v2964[1]
    if=v2965[1]
    df=v2966[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] (add[32] (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) -1[32])) 1[33]))))))
    iopl0=v2968[1]
    iopl1=v2969[1]
    nt=v2970[1]
    ?15=v2971[1]
    ip=134514096[32]
    memory:
        (add[32] (add[32] v2946[32] 4[32]) -4[32]): 134514032[32] 4 bytes
        (add[32] v2947[32] -16[32]): (asr[32] 2[5] (add[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32]) (add[32] (invert[32] (add[32] (add[32] v2972[32] 4506[32]) -224[32])) 1[32]))) 4 bytes clobbered
    ip = 134514096[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x804854f:lea    esi, [edx + eax*0x04]
    ax=v3006[32]
    cx=v3007[32]
    dx=v3008[32]
    bx=v3009[32]
    sp=v3010[32]
    bp=v3011[32]
    si=(add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8])))
    di=v3013[32]
    es=v3014[16]
    cs=v3015[16]
    ss=v3016[16]
    ds=v3017[16]
    fs=v3018[16]
    gs=v3019[16]
    cf=v3020[1]
    ?1=v3021[1]
    pf=v3022[1]
    ?3=v3023[1]
    af=v3024[1]
    ?5=v3025[1]
    zf=v3026[1]
    sf=v3027[1]
    tf=v3028[1]
    if=v3029[1]
    df=v3030[1]
    of=v3031[1]
    iopl0=v3032[1]
    iopl1=v3033[1]
    nt=v3034[1]
    ?15=v3035[1]
    ip=134514002[32]
    memory:
    ip = 134514002[32]
0x8048552:xor    edi, edi
    ax=v3006[32]
    cx=v3007[32]
    dx=v3008[32]
    bx=v3009[32]
    sp=v3010[32]
    bp=v3011[32]
    si=(add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8])))
    di=(bv-xor[32] v3013[32] v3013[32])
    es=v3014[16]
    cs=v3015[16]
    ss=v3016[16]
    ds=v3017[16]
    fs=v3018[16]
    gs=v3019[16]
    cf=0[1]
    ?1=v3021[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))))))
    ?3=v3023[1]
    af=v3036[1]
    ?5=v3025[1]
    zf=(zerop[1] (bv-xor[32] v3013[32] v3013[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v3013[32] v3013[32]))
    tf=v3028[1]
    if=v3029[1]
    df=v3030[1]
    of=0[1]
    iopl0=v3032[1]
    iopl1=v3033[1]
    nt=v3034[1]
    ?15=v3035[1]
    ip=134514004[32]
    memory:
    ip = 134514004[32]
0x8048554:lea    esi, [esi + 0x00000000]
    ax=v3006[32]
    cx=v3007[32]
    dx=v3008[32]
    bx=v3009[32]
    sp=v3010[32]
    bp=v3011[32]
    si=(add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8])))
    di=(bv-xor[32] v3013[32] v3013[32])
    es=v3014[16]
    cs=v3015[16]
    ss=v3016[16]
    ds=v3017[16]
    fs=v3018[16]
    gs=v3019[16]
    cf=0[1]
    ?1=v3021[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))))))
    ?3=v3023[1]
    af=v3036[1]
    ?5=v3025[1]
    zf=(zerop[1] (bv-xor[32] v3013[32] v3013[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v3013[32] v3013[32]))
    tf=v3028[1]
    if=v3029[1]
    df=v3030[1]
    of=0[1]
    iopl0=v3032[1]
    iopl1=v3033[1]
    nt=v3034[1]
    ?15=v3035[1]
    ip=134514010[32]
    memory:
    ip = 134514010[32]
0x804855a:lea    edi, [edi + 0x00000000]
    ax=v3006[32]
    cx=v3007[32]
    dx=v3008[32]
    bx=v3009[32]
    sp=v3010[32]
    bp=v3011[32]
    si=(add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8])))
    di=(bv-xor[32] v3013[32] v3013[32])
    es=v3014[16]
    cs=v3015[16]
    ss=v3016[16]
    ds=v3017[16]
    fs=v3018[16]
    gs=v3019[16]
    cf=0[1]
    ?1=v3021[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))))))
    ?3=v3023[1]
    af=v3036[1]
    ?5=v3025[1]
    zf=(zerop[1] (bv-xor[32] v3013[32] v3013[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v3013[32] v3013[32]))
    tf=v3028[1]
    if=v3029[1]
    df=v3030[1]
    of=0[1]
    iopl0=v3032[1]
    iopl1=v3033[1]
    nt=v3034[1]
    ?15=v3035[1]
    ip=134514016[32]
    memory:
    ip = 134514016[32]
0x8048560:call   DWORD PTR ds:[esi]
    ax=v3006[32]
    cx=v3007[32]
    dx=v3008[32]
    bx=v3009[32]
    sp=(add[32] v3010[32] -4[32])
    bp=v3011[32]
    si=(add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8])))
    di=(bv-xor[32] v3013[32] v3013[32])
    es=v3014[16]
    cs=v3015[16]
    ss=v3016[16]
    ds=v3017[16]
    fs=v3018[16]
    gs=v3019[16]
    cf=0[1]
    ?1=v3021[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (bv-xor[32] v3013[32] v3013[32])))))))
    ?3=v3023[1]
    af=v3036[1]
    ?5=v3025[1]
    zf=(zerop[1] (bv-xor[32] v3013[32] v3013[32]))
    sf=(extract[1] 31[32] 32[32] (bv-xor[32] v3013[32] v3013[32]))
    tf=v3028[1]
    if=v3029[1]
    df=v3030[1]
    of=0[1]
    iopl0=v3032[1]
    iopl1=v3033[1]
    nt=v3034[1]
    ?15=v3035[1]
    ip=v3037[32]
    memory:
        (add[32] v3010[32] -4[32]): 134514018[32] 4 bytes
        (add[32] v3008[32] (extract[32] 0[32] 32[32] (umul[40] v3006[32] 4[8]))): v3037[32] 4 bytes read-only
    ip = v3037[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048562:inc    edi
    ax=v3070[32]
    cx=v3071[32]
    dx=v3072[32]
    bx=v3073[32]
    sp=v3074[32]
    bp=v3075[32]
    si=v3076[32]
    di=(add[32] v3077[32] 1[32])
    es=v3078[16]
    cs=v3079[16]
    ss=v3080[16]
    ds=v3081[16]
    fs=v3082[16]
    gs=v3083[16]
    cf=v3084[1]
    ?1=v3085[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3077[32] 1[32])))))))
    ?3=v3087[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3077[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v3077[32]) 1[33])))))
    ?5=v3089[1]
    zf=(zerop[1] (add[32] v3077[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3077[32] 1[32]))
    tf=v3092[1]
    if=v3093[1]
    df=v3094[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3077[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v3077[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3077[32]) (bv-xor[33] 1[33] (add[33] (uextend[33] 33[32] v3077[32]) 1[33]))))))
    iopl0=v3096[1]
    iopl1=v3097[1]
    nt=v3098[1]
    ?15=v3099[1]
    ip=134514019[32]
    memory:
    ip = 134514019[32]
0x8048563:sub    esi, 0x04
    ax=v3070[32]
    cx=v3071[32]
    dx=v3072[32]
    bx=v3073[32]
    sp=v3074[32]
    bp=v3075[32]
    si=(add[32] v3076[32] -4[32])
    di=(add[32] v3077[32] 1[32])
    es=v3078[16]
    cs=v3079[16]
    ss=v3080[16]
    ds=v3081[16]
    fs=v3082[16]
    gs=v3083[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3076[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3076[32]) 4294967292[33]))))))
    ?1=v3085[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3076[32] -4[32])))))))
    ?3=v3087[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3076[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3076[32]) 4294967292[33]))))))
    ?5=v3089[1]
    zf=(zerop[1] (add[32] v3076[32] -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3076[32] -4[32]))
    tf=v3092[1]
    if=v3093[1]
    df=v3094[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3076[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3076[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3076[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3076[32]) 4294967292[33]))))))
    iopl0=v3096[1]
    iopl1=v3097[1]
    nt=v3098[1]
    ?15=v3099[1]
    ip=134514022[32]
    memory:
    ip = 134514022[32]
0x8048566:cmp    DWORD PTR ss:[ebp + 0xf0<-0x10>], edi
    ax=v3070[32]
    cx=v3071[32]
    dx=v3072[32]
    bx=v3073[32]
    sp=v3074[32]
    bp=v3075[32]
    si=(add[32] v3076[32] -4[32])
    di=(add[32] v3077[32] 1[32])
    es=v3078[16]
    cs=v3079[16]
    ss=v3080[16]
    ds=v3081[16]
    fs=v3082[16]
    gs=v3083[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    ?1=v3085[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))))))
    ?3=v3087[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    ?5=v3089[1]
    zf=(zerop[1] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))
    tf=v3092[1]
    if=v3093[1]
    df=v3094[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    iopl0=v3096[1]
    iopl1=v3097[1]
    nt=v3098[1]
    ?15=v3099[1]
    ip=134514025[32]
    memory:
        (add[32] v3075[32] -16[32]): v3100[32] 4 bytes read-only
    ip = 134514025[32]
0x8048569:jne    0x08048560
    ax=v3070[32]
    cx=v3071[32]
    dx=v3072[32]
    bx=v3073[32]
    sp=v3074[32]
    bp=v3075[32]
    si=(add[32] v3076[32] -4[32])
    di=(add[32] v3077[32] 1[32])
    es=v3078[16]
    cs=v3079[16]
    ss=v3080[16]
    ds=v3081[16]
    fs=v3082[16]
    gs=v3083[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    ?1=v3085[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32]))))))))
    ?3=v3087[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    ?5=v3089[1]
    zf=(zerop[1] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))
    sf=(extract[1] 31[32] 32[32] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))
    tf=v3092[1]
    if=v3093[1]
    df=v3094[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3100[32]) (bv-xor[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) (add[33] (uextend[33] 33[32] v3100[32]) (add[33] (uextend[33] 33[32] (invert[32] (add[32] v3077[32] 1[32]))) 1[33])))))))
    iopl0=v3096[1]
    iopl1=v3097[1]
    nt=v3098[1]
    ?15=v3099[1]
    ip=(ite[32] (invert[1] (zerop[1] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) 134514016[32] 134514027[32])
    memory:
        (add[32] v3075[32] -16[32]): v3100[32] 4 bytes read-only
    ip = (ite[32] (invert[1] (zerop[1] (add[32] v3100[32] (add[32] (invert[32] (add[32] v3077[32] 1[32])) 1[32])))) 134514016[32] 134514027[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048570:add    esp, 0x0c
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3136[32]
    sp=(add[32] v3137[32] 12[32])
    bp=v3138[32]
    si=v3139[32]
    di=v3140[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=134514035[32]
    memory:
    ip = 134514035[32]
0x8048573:pop    ebx
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3163[32]
    sp=(add[32] (add[32] v3137[32] 12[32]) 4[32])
    bp=v3138[32]
    si=v3139[32]
    di=v3140[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=134514036[32]
    memory:
        (add[32] v3137[32] 12[32]): v3163[32] 4 bytes read-only
    ip = 134514036[32]
0x8048574:pop    esi
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3163[32]
    sp=(add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32])
    bp=v3138[32]
    si=v3164[32]
    di=v3140[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=134514037[32]
    memory:
        (add[32] v3137[32] 12[32]): v3163[32] 4 bytes read-only
        (add[32] (add[32] v3137[32] 12[32]) 4[32]): v3164[32] 4 bytes read-only
    ip = 134514037[32]
0x8048575:pop    edi
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3163[32]
    sp=(add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32])
    bp=v3138[32]
    si=v3164[32]
    di=v3165[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=134514038[32]
    memory:
        (add[32] v3137[32] 12[32]): v3163[32] 4 bytes read-only
        (add[32] (add[32] v3137[32] 12[32]) 4[32]): v3164[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]): v3165[32] 4 bytes read-only
    ip = 134514038[32]
0x8048576:pop    ebp
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3163[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v3166[32]
    si=v3164[32]
    di=v3165[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=134514039[32]
    memory:
        (add[32] v3137[32] 12[32]): v3163[32] 4 bytes read-only
        (add[32] (add[32] v3137[32] 12[32]) 4[32]): v3164[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]): v3165[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32]): v3166[32] 4 bytes read-only
    ip = 134514039[32]
0x8048577:ret    
    ax=v3133[32]
    cx=v3134[32]
    dx=v3135[32]
    bx=v3163[32]
    sp=(add[32] (add[32] (add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]) 4[32])
    bp=v3166[32]
    si=v3164[32]
    di=v3165[32]
    es=v3141[16]
    cs=v3142[16]
    ss=v3143[16]
    ds=v3144[16]
    fs=v3145[16]
    gs=v3146[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?1=v3148[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3137[32] 12[32])))))))
    ?3=v3150[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33])))))
    ?5=v3152[1]
    zf=(zerop[1] (add[32] v3137[32] 12[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3137[32] 12[32]))
    tf=v3155[1]
    if=v3156[1]
    df=v3157[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3137[32]) (bv-xor[33] 12[33] (add[33] (uextend[33] 33[32] v3137[32]) 12[33]))))))
    iopl0=v3159[1]
    iopl1=v3160[1]
    nt=v3161[1]
    ?15=v3162[1]
    ip=v3167[32]
    memory:
        (add[32] v3137[32] 12[32]): v3163[32] 4 bytes read-only
        (add[32] (add[32] v3137[32] 12[32]) 4[32]): v3164[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]): v3165[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32]): v3166[32] 4 bytes read-only
        (add[32] (add[32] (add[32] (add[32] (add[32] v3137[32] 12[32]) 4[32]) 4[32]) 4[32]) 4[32]): v3167[32] 4 bytes read-only
    ip = v3167[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048578:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514041[32]
    memory:
    ip = 134514041[32]
0x8048579:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514042[32]
    memory:
    ip = 134514042[32]
0x804857a:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514043[32]
    memory:
    ip = 134514043[32]
0x804857b:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514044[32]
    memory:
    ip = 134514044[32]
0x804857c:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514045[32]
    memory:
    ip = 134514045[32]
0x804857d:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514046[32]
    memory:
    ip = 134514046[32]
0x804857e:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514047[32]
    memory:
    ip = 134514047[32]
0x804857f:nop    
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=v3204[32]
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514048[32]
    memory:
    ip = 134514048[32]
0x8048580:push   ebp
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=(add[32] v3204[32] -4[32])
    bp=v3205[32]
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514049[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
    ip = 134514049[32]
0x8048581:mov    ebp, esp
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=(add[32] v3204[32] -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514051[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
    ip = 134514051[32]
0x8048583:push   ebx
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=(add[32] (add[32] v3204[32] -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=v3214[1]
    ?1=v3215[1]
    pf=v3216[1]
    ?3=v3217[1]
    af=v3218[1]
    ?5=v3219[1]
    zf=v3220[1]
    sf=v3221[1]
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=v3225[1]
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514052[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
    ip = 134514052[32]
0x8048584:sub    esp, 0x04
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=v3203[32]
    sp=(add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?1=v3215[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))))))
    ?3=v3217[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?5=v3219[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514055[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
    ip = 134514055[32]
0x8048587:mov    ebx, 0x080495e8
    ax=v3200[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=134518248[32]
    sp=(add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?1=v3215[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))))))
    ?3=v3217[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?5=v3219[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514060[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
    ip = 134514060[32]
0x804858c:mov    eax, DWORD PTR ds:[0x080495e8]
    ax=v3230[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=134518248[32]
    sp=(add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?1=v3215[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])))))))
    ?3=v3217[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    ?5=v3219[1]
    zf=(zerop[1] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32]))
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] (add[32] (add[32] v3204[32] -4[32]) -4[32])) 4294967292[33]))))))
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514065[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
        134518248[32]: v3230[32] 4 bytes read-only
    ip = 134514065[32]
0x8048591:cmp    eax, 0xff<-0x01>
    ax=v3230[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=134518248[32]
    sp=(add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    ?1=v3215[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))))))
    ?3=v3217[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    ?5=v3219[1]
    zf=(zerop[1] (add[32] v3230[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3230[32] 1[32]))
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=134514068[32]
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
        134518248[32]: v3230[32] 4 bytes read-only
    ip = 134514068[32]
0x8048594:je     0x080485ac
    ax=v3230[32]
    cx=v3201[32]
    dx=v3202[32]
    bx=134518248[32]
    sp=(add[32] (add[32] (add[32] v3204[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3204[32] -4[32])
    si=v3206[32]
    di=v3207[32]
    es=v3208[16]
    cs=v3209[16]
    ss=v3210[16]
    ds=v3211[16]
    fs=v3212[16]
    gs=v3213[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    ?1=v3215[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3230[32] 1[32])))))))
    ?3=v3217[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    ?5=v3219[1]
    zf=(zerop[1] (add[32] v3230[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3230[32] 1[32]))
    tf=v3222[1]
    if=v3223[1]
    df=v3224[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3230[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3230[32]) 1[33]))))))
    iopl0=v3226[1]
    iopl1=v3227[1]
    nt=v3228[1]
    ?15=v3229[1]
    ip=(ite[32] (zerop[1] (add[32] v3230[32] 1[32])) 134514092[32] 134514070[32])
    memory:
        (add[32] v3204[32] -4[32]): v3205[32] 4 bytes
        (add[32] (add[32] v3204[32] -4[32]) -4[32]): v3203[32] 4 bytes
        134518248[32]: v3230[32] 4 bytes read-only
    ip = (ite[32] (zerop[1] (add[32] v3230[32] 1[32])) 134514092[32] 134514070[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x8048596:lea    esi, [esi + 0x00]
    ax=v3263[32]
    cx=v3264[32]
    dx=v3265[32]
    bx=v3266[32]
    sp=v3267[32]
    bp=v3268[32]
    si=v3269[32]
    di=v3270[32]
    es=v3271[16]
    cs=v3272[16]
    ss=v3273[16]
    ds=v3274[16]
    fs=v3275[16]
    gs=v3276[16]
    cf=v3277[1]
    ?1=v3278[1]
    pf=v3279[1]
    ?3=v3280[1]
    af=v3281[1]
    ?5=v3282[1]
    zf=v3283[1]
    sf=v3284[1]
    tf=v3285[1]
    if=v3286[1]
    df=v3287[1]
    of=v3288[1]
    iopl0=v3289[1]
    iopl1=v3290[1]
    nt=v3291[1]
    ?15=v3292[1]
    ip=134514073[32]
    memory:
    ip = 134514073[32]
0x8048599:lea    edi, [edi + 0x00000000]
    ax=v3263[32]
    cx=v3264[32]
    dx=v3265[32]
    bx=v3266[32]
    sp=v3267[32]
    bp=v3268[32]
    si=v3269[32]
    di=v3270[32]
    es=v3271[16]
    cs=v3272[16]
    ss=v3273[16]
    ds=v3274[16]
    fs=v3275[16]
    gs=v3276[16]
    cf=v3277[1]
    ?1=v3278[1]
    pf=v3279[1]
    ?3=v3280[1]
    af=v3281[1]
    ?5=v3282[1]
    zf=v3283[1]
    sf=v3284[1]
    tf=v3285[1]
    if=v3286[1]
    df=v3287[1]
    of=v3288[1]
    iopl0=v3289[1]
    iopl1=v3290[1]
    nt=v3291[1]
    ?15=v3292[1]
    ip=134514080[32]
    memory:
    ip = 134514080[32]
0x80485a0:sub    ebx, 0x04
    ax=v3263[32]
    cx=v3264[32]
    dx=v3265[32]
    bx=(add[32] v3266[32] -4[32])
    sp=v3267[32]
    bp=v3268[32]
    si=v3269[32]
    di=v3270[32]
    es=v3271[16]
    cs=v3272[16]
    ss=v3273[16]
    ds=v3274[16]
    fs=v3275[16]
    gs=v3276[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    ?1=v3278[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))))))
    ?3=v3280[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    ?5=v3282[1]
    zf=(zerop[1] (add[32] v3266[32] -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3266[32] -4[32]))
    tf=v3285[1]
    if=v3286[1]
    df=v3287[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    iopl0=v3289[1]
    iopl1=v3290[1]
    nt=v3291[1]
    ?15=v3292[1]
    ip=134514083[32]
    memory:
    ip = 134514083[32]
0x80485a3:call   eax
    ax=v3263[32]
    cx=v3264[32]
    dx=v3265[32]
    bx=(add[32] v3266[32] -4[32])
    sp=(add[32] v3267[32] -4[32])
    bp=v3268[32]
    si=v3269[32]
    di=v3270[32]
    es=v3271[16]
    cs=v3272[16]
    ss=v3273[16]
    ds=v3274[16]
    fs=v3275[16]
    gs=v3276[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    ?1=v3278[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3266[32] -4[32])))))))
    ?3=v3280[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    ?5=v3282[1]
    zf=(zerop[1] (add[32] v3266[32] -4[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3266[32] -4[32]))
    tf=v3285[1]
    if=v3286[1]
    df=v3287[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3266[32]) (bv-xor[33] 4294967291[33] (add[33] (uextend[33] 33[32] v3266[32]) 4294967292[33]))))))
    iopl0=v3289[1]
    iopl1=v3290[1]
    nt=v3291[1]
    ?15=v3292[1]
    ip=v3263[32]
    memory:
        (add[32] v3267[32] -4[32]): 134514085[32] 4 bytes
    ip = v3263[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485a5:mov    eax, DWORD PTR ds:[ebx]
    ax=v3355[32]
    cx=v3326[32]
    dx=v3327[32]
    bx=v3328[32]
    sp=v3329[32]
    bp=v3330[32]
    si=v3331[32]
    di=v3332[32]
    es=v3333[16]
    cs=v3334[16]
    ss=v3335[16]
    ds=v3336[16]
    fs=v3337[16]
    gs=v3338[16]
    cf=v3339[1]
    ?1=v3340[1]
    pf=v3341[1]
    ?3=v3342[1]
    af=v3343[1]
    ?5=v3344[1]
    zf=v3345[1]
    sf=v3346[1]
    tf=v3347[1]
    if=v3348[1]
    df=v3349[1]
    of=v3350[1]
    iopl0=v3351[1]
    iopl1=v3352[1]
    nt=v3353[1]
    ?15=v3354[1]
    ip=134514087[32]
    memory:
        v3328[32]: v3355[32] 4 bytes read-only
    ip = 134514087[32]
0x80485a7:cmp    eax, 0xff<-0x01>
    ax=v3355[32]
    cx=v3326[32]
    dx=v3327[32]
    bx=v3328[32]
    sp=v3329[32]
    bp=v3330[32]
    si=v3331[32]
    di=v3332[32]
    es=v3333[16]
    cs=v3334[16]
    ss=v3335[16]
    ds=v3336[16]
    fs=v3337[16]
    gs=v3338[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    ?1=v3340[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))))))
    ?3=v3342[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    ?5=v3344[1]
    zf=(zerop[1] (add[32] v3355[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3355[32] 1[32]))
    tf=v3347[1]
    if=v3348[1]
    df=v3349[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    iopl0=v3351[1]
    iopl1=v3352[1]
    nt=v3353[1]
    ?15=v3354[1]
    ip=134514090[32]
    memory:
        v3328[32]: v3355[32] 4 bytes read-only
    ip = 134514090[32]
0x80485aa:jne    0x080485a0
    ax=v3355[32]
    cx=v3326[32]
    dx=v3327[32]
    bx=v3328[32]
    sp=v3329[32]
    bp=v3330[32]
    si=v3331[32]
    di=v3332[32]
    es=v3333[16]
    cs=v3334[16]
    ss=v3335[16]
    ds=v3336[16]
    fs=v3337[16]
    gs=v3338[16]
    cf=(invert[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    ?1=v3340[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3355[32] 1[32])))))))
    ?3=v3342[1]
    af=(invert[1] (extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    ?5=v3344[1]
    zf=(zerop[1] (add[32] v3355[32] 1[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3355[32] 1[32]))
    tf=v3347[1]
    if=v3348[1]
    df=v3349[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3355[32]) (bv-xor[33] 0[33] (add[33] (uextend[33] 33[32] v3355[32]) 1[33]))))))
    iopl0=v3351[1]
    iopl1=v3352[1]
    nt=v3353[1]
    ?15=v3354[1]
    ip=(ite[32] (invert[1] (zerop[1] (add[32] v3355[32] 1[32]))) 134514080[32] 134514092[32])
    memory:
        v3328[32]: v3355[32] 4 bytes read-only
    ip = (ite[32] (invert[1] (zerop[1] (add[32] v3355[32] 1[32]))) 134514080[32] 134514092[32])
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ac:pop    eax
    ax=v3418[32]
    cx=v3389[32]
    dx=v3390[32]
    bx=v3391[32]
    sp=(add[32] v3392[32] 4[32])
    bp=v3393[32]
    si=v3394[32]
    di=v3395[32]
    es=v3396[16]
    cs=v3397[16]
    ss=v3398[16]
    ds=v3399[16]
    fs=v3400[16]
    gs=v3401[16]
    cf=v3402[1]
    ?1=v3403[1]
    pf=v3404[1]
    ?3=v3405[1]
    af=v3406[1]
    ?5=v3407[1]
    zf=v3408[1]
    sf=v3409[1]
    tf=v3410[1]
    if=v3411[1]
    df=v3412[1]
    of=v3413[1]
    iopl0=v3414[1]
    iopl1=v3415[1]
    nt=v3416[1]
    ?15=v3417[1]
    ip=134514093[32]
    memory:
        v3392[32]: v3418[32] 4 bytes read-only
    ip = 134514093[32]
0x80485ad:pop    ebx
    ax=v3418[32]
    cx=v3389[32]
    dx=v3390[32]
    bx=v3419[32]
    sp=(add[32] (add[32] v3392[32] 4[32]) 4[32])
    bp=v3393[32]
    si=v3394[32]
    di=v3395[32]
    es=v3396[16]
    cs=v3397[16]
    ss=v3398[16]
    ds=v3399[16]
    fs=v3400[16]
    gs=v3401[16]
    cf=v3402[1]
    ?1=v3403[1]
    pf=v3404[1]
    ?3=v3405[1]
    af=v3406[1]
    ?5=v3407[1]
    zf=v3408[1]
    sf=v3409[1]
    tf=v3410[1]
    if=v3411[1]
    df=v3412[1]
    of=v3413[1]
    iopl0=v3414[1]
    iopl1=v3415[1]
    nt=v3416[1]
    ?15=v3417[1]
    ip=134514094[32]
    memory:
        v3392[32]: v3418[32] 4 bytes read-only
        (add[32] v3392[32] 4[32]): v3419[32] 4 bytes read-only
    ip = 134514094[32]
0x80485ae:pop    ebp
    ax=v3418[32]
    cx=v3389[32]
    dx=v3390[32]
    bx=v3419[32]
    sp=(add[32] (add[32] (add[32] v3392[32] 4[32]) 4[32]) 4[32])
    bp=v3420[32]
    si=v3394[32]
    di=v3395[32]
    es=v3396[16]
    cs=v3397[16]
    ss=v3398[16]
    ds=v3399[16]
    fs=v3400[16]
    gs=v3401[16]
    cf=v3402[1]
    ?1=v3403[1]
    pf=v3404[1]
    ?3=v3405[1]
    af=v3406[1]
    ?5=v3407[1]
    zf=v3408[1]
    sf=v3409[1]
    tf=v3410[1]
    if=v3411[1]
    df=v3412[1]
    of=v3413[1]
    iopl0=v3414[1]
    iopl1=v3415[1]
    nt=v3416[1]
    ?15=v3417[1]
    ip=134514095[32]
    memory:
        v3392[32]: v3418[32] 4 bytes read-only
        (add[32] v3392[32] 4[32]): v3419[32] 4 bytes read-only
        (add[32] (add[32] v3392[32] 4[32]) 4[32]): v3420[32] 4 bytes read-only
    ip = 134514095[32]
0x80485af:ret    
    ax=v3418[32]
    cx=v3389[32]
    dx=v3390[32]
    bx=v3419[32]
    sp=(add[32] (add[32] (add[32] (add[32] v3392[32] 4[32]) 4[32]) 4[32]) 4[32])
    bp=v3420[32]
    si=v3394[32]
    di=v3395[32]
    es=v3396[16]
    cs=v3397[16]
    ss=v3398[16]
    ds=v3399[16]
    fs=v3400[16]
    gs=v3401[16]
    cf=v3402[1]
    ?1=v3403[1]
    pf=v3404[1]
    ?3=v3405[1]
    af=v3406[1]
    ?5=v3407[1]
    zf=v3408[1]
    sf=v3409[1]
    tf=v3410[1]
    if=v3411[1]
    df=v3412[1]
    of=v3413[1]
    iopl0=v3414[1]
    iopl1=v3415[1]
    nt=v3416[1]
    ?15=v3417[1]
    ip=v3421[32]
    memory:
        v3392[32]: v3418[32] 4 bytes read-only
        (add[32] v3392[32] 4[32]): v3419[32] 4 bytes read-only
        (add[32] (add[32] v3392[32] 4[32]) 4[32]): v3420[32] 4 bytes read-only
        (add[32] (add[32] (add[32] v3392[32] 4[32]) 4[32]) 4[32]): v3421[32] 4 bytes read-only
    ip = v3421[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485b0:push   ebp
    ax=v3454[32]
    cx=v3455[32]
    dx=v3456[32]
    bx=v3457[32]
    sp=(add[32] v3458[32] -4[32])
    bp=v3459[32]
    si=v3460[32]
    di=v3461[32]
    es=v3462[16]
    cs=v3463[16]
    ss=v3464[16]
    ds=v3465[16]
    fs=v3466[16]
    gs=v3467[16]
    cf=v3468[1]
    ?1=v3469[1]
    pf=v3470[1]
    ?3=v3471[1]
    af=v3472[1]
    ?5=v3473[1]
    zf=v3474[1]
    sf=v3475[1]
    tf=v3476[1]
    if=v3477[1]
    df=v3478[1]
    of=v3479[1]
    iopl0=v3480[1]
    iopl1=v3481[1]
    nt=v3482[1]
    ?15=v3483[1]
    ip=134514097[32]
    memory:
        (add[32] v3458[32] -4[32]): v3459[32] 4 bytes
    ip = 134514097[32]
0x80485b1:mov    ebp, esp
    ax=v3454[32]
    cx=v3455[32]
    dx=v3456[32]
    bx=v3457[32]
    sp=(add[32] v3458[32] -4[32])
    bp=(add[32] v3458[32] -4[32])
    si=v3460[32]
    di=v3461[32]
    es=v3462[16]
    cs=v3463[16]
    ss=v3464[16]
    ds=v3465[16]
    fs=v3466[16]
    gs=v3467[16]
    cf=v3468[1]
    ?1=v3469[1]
    pf=v3470[1]
    ?3=v3471[1]
    af=v3472[1]
    ?5=v3473[1]
    zf=v3474[1]
    sf=v3475[1]
    tf=v3476[1]
    if=v3477[1]
    df=v3478[1]
    of=v3479[1]
    iopl0=v3480[1]
    iopl1=v3481[1]
    nt=v3482[1]
    ?15=v3483[1]
    ip=134514099[32]
    memory:
        (add[32] v3458[32] -4[32]): v3459[32] 4 bytes
    ip = 134514099[32]
0x80485b3:push   ebx
    ax=v3454[32]
    cx=v3455[32]
    dx=v3456[32]
    bx=v3457[32]
    sp=(add[32] (add[32] v3458[32] -4[32]) -4[32])
    bp=(add[32] v3458[32] -4[32])
    si=v3460[32]
    di=v3461[32]
    es=v3462[16]
    cs=v3463[16]
    ss=v3464[16]
    ds=v3465[16]
    fs=v3466[16]
    gs=v3467[16]
    cf=v3468[1]
    ?1=v3469[1]
    pf=v3470[1]
    ?3=v3471[1]
    af=v3472[1]
    ?5=v3473[1]
    zf=v3474[1]
    sf=v3475[1]
    tf=v3476[1]
    if=v3477[1]
    df=v3478[1]
    of=v3479[1]
    iopl0=v3480[1]
    iopl1=v3481[1]
    nt=v3482[1]
    ?15=v3483[1]
    ip=134514100[32]
    memory:
        (add[32] v3458[32] -4[32]): v3459[32] 4 bytes
        (add[32] (add[32] v3458[32] -4[32]) -4[32]): v3457[32] 4 bytes
    ip = 134514100[32]
0x80485b4:push   eax
    ax=v3454[32]
    cx=v3455[32]
    dx=v3456[32]
    bx=v3457[32]
    sp=(add[32] (add[32] (add[32] v3458[32] -4[32]) -4[32]) -4[32])
    bp=(add[32] v3458[32] -4[32])
    si=v3460[32]
    di=v3461[32]
    es=v3462[16]
    cs=v3463[16]
    ss=v3464[16]
    ds=v3465[16]
    fs=v3466[16]
    gs=v3467[16]
    cf=v3468[1]
    ?1=v3469[1]
    pf=v3470[1]
    ?3=v3471[1]
    af=v3472[1]
    ?5=v3473[1]
    zf=v3474[1]
    sf=v3475[1]
    tf=v3476[1]
    if=v3477[1]
    df=v3478[1]
    of=v3479[1]
    iopl0=v3480[1]
    iopl1=v3481[1]
    nt=v3482[1]
    ?15=v3483[1]
    ip=134514101[32]
    memory:
        (add[32] v3458[32] -4[32]): v3459[32] 4 bytes
        (add[32] (add[32] v3458[32] -4[32]) -4[32]): v3457[32] 4 bytes
        (add[32] (add[32] (add[32] v3458[32] -4[32]) -4[32]) -4[32]): v3454[32] 4 bytes
    ip = 134514101[32]
0x80485b5:call   0x080485ba
    ax=v3454[32]
    cx=v3455[32]
    dx=v3456[32]
    bx=v3457[32]
    sp=(add[32] (add[32] (add[32] (add[32] v3458[32] -4[32]) -4[32]) -4[32]) -4[32])
    bp=(add[32] v3458[32] -4[32])
    si=v3460[32]
    di=v3461[32]
    es=v3462[16]
    cs=v3463[16]
    ss=v3464[16]
    ds=v3465[16]
    fs=v3466[16]
    gs=v3467[16]
    cf=v3468[1]
    ?1=v3469[1]
    pf=v3470[1]
    ?3=v3471[1]
    af=v3472[1]
    ?5=v3473[1]
    zf=v3474[1]
    sf=v3475[1]
    tf=v3476[1]
    if=v3477[1]
    df=v3478[1]
    of=v3479[1]
    iopl0=v3480[1]
    iopl1=v3481[1]
    nt=v3482[1]
    ?15=v3483[1]
    ip=134514106[32]
    memory:
        (add[32] v3458[32] -4[32]): v3459[32] 4 bytes
        (add[32] (add[32] v3458[32] -4[32]) -4[32]): v3457[32] 4 bytes
        (add[32] (add[32] (add[32] v3458[32] -4[32]) -4[32]) -4[32]): v3454[32] 4 bytes
        (add[32] (add[32] (add[32] (add[32] v3458[32] -4[32]) -4[32]) -4[32]) -4[32]): 134514106[32] 4 bytes
    ip = 134514106[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485ba:pop    ebx
    ax=v3516[32]
    cx=v3517[32]
    dx=v3518[32]
    bx=v3546[32]
    sp=(add[32] v3520[32] 4[32])
    bp=v3521[32]
    si=v3522[32]
    di=v3523[32]
    es=v3524[16]
    cs=v3525[16]
    ss=v3526[16]
    ds=v3527[16]
    fs=v3528[16]
    gs=v3529[16]
    cf=v3530[1]
    ?1=v3531[1]
    pf=v3532[1]
    ?3=v3533[1]
    af=v3534[1]
    ?5=v3535[1]
    zf=v3536[1]
    sf=v3537[1]
    tf=v3538[1]
    if=v3539[1]
    df=v3540[1]
    of=v3541[1]
    iopl0=v3542[1]
    iopl1=v3543[1]
    nt=v3544[1]
    ?15=v3545[1]
    ip=134514107[32]
    memory:
        v3520[32]: v3546[32] 4 bytes read-only
    ip = 134514107[32]
0x80485bb:add    ebx, 0x0000110e
    ax=v3516[32]
    cx=v3517[32]
    dx=v3518[32]
    bx=(add[32] v3546[32] 4366[32])
    sp=(add[32] v3520[32] 4[32])
    bp=v3521[32]
    si=v3522[32]
    di=v3523[32]
    es=v3524[16]
    cs=v3525[16]
    ss=v3526[16]
    ds=v3527[16]
    fs=v3528[16]
    gs=v3529[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33])))))
    ?1=v3531[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))))))
    ?3=v3533[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33])))))
    ?5=v3535[1]
    zf=(zerop[1] (add[32] v3546[32] 4366[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3546[32] 4366[32]))
    tf=v3538[1]
    if=v3539[1]
    df=v3540[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33]))))))
    iopl0=v3542[1]
    iopl1=v3543[1]
    nt=v3544[1]
    ?15=v3545[1]
    ip=134514113[32]
    memory:
        v3520[32]: v3546[32] 4 bytes read-only
    ip = 134514113[32]
0x80485c1:call   0x08048390
    ax=v3516[32]
    cx=v3517[32]
    dx=v3518[32]
    bx=(add[32] v3546[32] 4366[32])
    sp=(add[32] (add[32] v3520[32] 4[32]) -4[32])
    bp=v3521[32]
    si=v3522[32]
    di=v3523[32]
    es=v3524[16]
    cs=v3525[16]
    ss=v3526[16]
    ds=v3527[16]
    fs=v3528[16]
    gs=v3529[16]
    cf=(extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33])))))
    ?1=v3531[1]
    pf=(invert[1] (bv-xor[1] (bv-xor[1] (bv-xor[1] (extract[1] 0[32] 1[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 1[32] 2[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))) (bv-xor[1] (extract[1] 2[32] 3[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 3[32] 4[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))))) (bv-xor[1] (bv-xor[1] (extract[1] 4[32] 5[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 5[32] 6[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))) (bv-xor[1] (extract[1] 6[32] 7[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32]))) (extract[1] 7[32] 8[32] (extract[8] 0[32] 8[32] (add[32] v3546[32] 4366[32])))))))
    ?3=v3533[1]
    af=(extract[1] 3[32] 4[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33])))))
    ?5=v3535[1]
    zf=(zerop[1] (add[32] v3546[32] 4366[32]))
    sf=(extract[1] 31[32] 32[32] (add[32] v3546[32] 4366[32]))
    tf=v3538[1]
    if=v3539[1]
    df=v3540[1]
    of=(bv-xor[1] (extract[1] 31[32] 32[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33]))))) (extract[1] 30[32] 31[32] (extract[32] 1[32] 33[32] (bv-xor[33] (uextend[33] 33[32] v3546[32]) (bv-xor[33] 4366[33] (add[33] (uextend[33] 33[32] v3546[32]) 4366[33]))))))
    iopl0=v3542[1]
    iopl1=v3543[1]
    nt=v3544[1]
    ?15=v3545[1]
    ip=134513552[32]
    memory:
        (add[32] (add[32] v3520[32] 4[32]) -4[32]): 134514118[32] 4 bytes
    ip = 134513552[32]
=====================================================================================
=== Starting a new basic block                                                    ===
=====================================================================================
0x80485c6:pop    eax
    ax=v3609[32]
    cx=v3580[32]
    dx=v3581[32]
    bx=v3582[32]
    sp=(add[32] v3583[32] 4[32])
    bp=v3584[32]
    si=v3585[32]
    di=v3586[32]
    es=v3587[16]
    cs=v3588[16]
    ss=v3589[16]
    ds=v3590[16]
    fs=v3591[16]
    gs=v3592[16]
    cf=v3593[1]
    ?1=v3594[1]
    pf=v3595[1]
    ?3=v3596[1]
    af=v3597[1]
    ?5=v3598[1]
    zf=v3599[1]
    sf=v3600[1]
    tf=v3601[1]
    if=v3602[1]
    df=v3603[1]
    of=v3604[1]
    iopl0=v3605[1]
    iopl1=v3606[1]
    nt=v3607[1]
    ?15=v3608[1]
    ip=134514119[32]
    memory:
        v3583[32]: v3609[32] 4 bytes read-only
    ip = 134514119[32]
0x80485c7:pop    ebx
    ax=v3609[32]
    cx=v3580[32]
    dx=v3581[32]
    bx=v3610[32]
    sp=(add[32] (add[32] v3583[32] 4[32]) 4[32])
    bp=v3584[32]
    si=v3585[32]
    di=v3586[32]
    es=v3587[16]
    cs=v3588[16]
    ss=v3589[16]
    ds=v3590[16]
    fs=v3591[16]
    gs=v3592[16]
    cf=v3593[1]
    ?1=v3594[1]
    pf=v3595[1]
    ?3=v3596[1]
    af=v3597[1]
    ?5=v3598[1]
    zf=v3599[1]
    sf=v3600[1]
    tf=v3601[1]
    if=v3602[1]
    df=v3603[1]
    of=v3604[1]
    iopl0=v3605[1]
    iopl1=v3606[1]
    nt=v3607[1]
    ?15=v3608[1]
    ip=134514120[32]
    memory:
        v3583[32]: v3609[32] 4 bytes read-only
        (add[32] v3583[32] 4[32]): v3610[32] 4 bytes read-only
    ip = 134514120[32]
0x80485c8:leave  
    ax=v3609[32]
    cx=v3580[32]
    dx=v3581[32]
    bx=v3610[32]
    sp=(add[32] v3584[32] 4[32])
    bp=v3611[32]
    si=v3585[32]
    di=v3586[32]
    es=v3587[16]
    cs=v3588[16]
    ss=v3589[16]
    ds=v3590[16]
    fs=v3591[16]
    gs=v3592[16]
    cf=v3593[1]
    ?1=v3594[1]
    pf=v3595[1]
    ?3=v3596[1]
    af=v3597[1]
    ?5=v3598[1]
    zf=v3599[1]
    sf=v3600[1]
    tf=v3601[1]
    if=v3602[1]
    df=v3603[1]
    of=v3604[1]
    iopl0=v3605[1]
    iopl1=v3606[1]
    nt=v3607[1]
    ?15=v3608[1]
    ip=134514121[32]
    memory:
        v3583[32]: v3609[32] 4 bytes read-only
        (add[32] v3583[32] 4[32]): v3610[32] 4 bytes read-only
        v3584[32]: v3611[32] 4 bytes read-only
    ip = 134514121[32]
0x80485c9:ret    
    ax=v3609[32]
    cx=v3580[32]
    dx=v3581[32]
    bx=v3610[32]
    sp=(add[32] (add[32] v3584[32] 4[32]) 4[32])
    bp=v3611[32]
    si=v3585[32]
    di=v3586[32]
    es=v3587[16]
    cs=v3588[16]
    ss=v3589[16]
    ds=v3590[16]
    fs=v3591[16]
    gs=v3592[16]
    cf=v3593[1]
    ?1=v3594[1]
    pf=v3595[1]
    ?3=v3596[1]
    af=v3597[1]
    ?5=v3598[1]
    zf=v3599[1]
    sf=v3600[1]
    tf=v3601[1]
    if=v3602[1]
    df=v3603[1]
    of=v3604[1]
    iopl0=v3605[1]
    iopl1=v3606[1]
    nt=v3607[1]
    ?15=v3608[1]
    ip=v3612[32]
    memory:
        v3583[32]: v3609[32] 4 bytes read-only
        (add[32] v3583[32] 4[32]): v3610[32] 4 bytes read-only
        v3584[32]: v3611[32] 4 bytes read-only
        (add[32] v3584[32] 4[32]): v3612[32] 4 bytes read-only
    ip = v3612[32]
analyzed headers: 1
