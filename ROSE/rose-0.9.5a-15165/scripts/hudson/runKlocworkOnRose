#!/bin/bash -e
#
# TODO: add more summary info
#	- List of durations for each step in the job
#
#
source scripts/hudson/runBuildStep.sh
source scripts/hudson/debuggingPrinters.sh
#########################################################################################
set +x
# Uniform banners allows for easy parsing of the hudson console output
# Starting 'build|configure|make|make install|make installcheck|make check|make distcheck|make docs' step...
# Done with 'build|configure|make|make install|make installcheck|make check|make distcheck|make docs' step!
printBannerToStartStep \
	"ROSE/scripts/hudson/runKlocworkOnRose"

machine=`uname -m`
machine_os=`uname -s`
machine_name=`uname -n`
start_time=`date`
hudson_start_time_seconds="$(date +%s)"
TOP_LEVEL_ROSE_DIRECTORY="$PWD"
LOG_LOCATION="$PWD"

if test ! "x$machine_name" = "xhudson-rose-24.llnl.gov"; then
  echo "Error on $machine_name: currently, Klocwork can only be used from hudson-rose-24"
  exit 1
fi


#########################################################################################
#
#  BOOST C++ 
#
#########################################################################################
if test "x$label" = "x64bit-macos-10.6" ; then
  export DYLD_LIBRARY_PATH="$ROSE_TEST_BOOST_PATH/lib:$DYLD_LIBRARY_PATH"
else
  # tps : 04/26/2010 - Added support for OpenGL for 64bit
  export LD_LIBRARY_PATH="${ROSE_TEST_BOOST_PATH}/lib:${ROSE_TEST_OPENGL_PATH}/lib:$LD_LIBRARY_PATH"
fi


#########################################################################################
#
#  UPC
#
#  tps : 11/17/2010 Hudson support for UPC - order matters!
#  tps : 11/16/2010 : Lets add support for UPC
#  tps : 11/22/2010 : The setup.sh has been updated by admin
#
#########################################################################################
UPC_TEST_MACHINE=`uname -m`
if test "x$UPC_TEST_MACHINE" = "xi686" ; then
  echo "UPC is not currently tested on 32-bit machines."
elif test "x$label" = "x64bit-macos-10.6" ; then
  echo "UPC is not currently tested on 64-bit Mac OS X 10.6"
else
# Turn off bash error checking to run source with file that uses "grep" (will return error code if target is not found).
  set +e
  # This causes "symbol lookup error: /usr/libexec/gcc/x86_64-redhat-linux/4.1.2/f951: undefined symbol: __gmpn_sqr_n"
  # on all 4.1.2 compilers (only effects 64 bit tests since we only use this script on 64 bit machines).
  # This UPC support must be thought out more carefully.
  if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    source /nfs/apps/upc/4.5.1.2/setup.sh
  else
    echo "UPC not tested 64-bit machines using gnu 4.1.2 for now."
  fi
  set -e
fi


#########################################################################################
#
#  GCC 4.1.2
#
#########################################################################################
if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    GCCROOT=/usr/apps/gcc/$ROSE_TEST_GCC_VERSION
    if test -e $GCCROOT/setup.sh ; then
        set +ex
        . $GCCROOT/setup.sh
        set -ex
    else
    # This is the case for g++ 3.4.6 (since there is no uniform existence of a setup.sh file).
      echo "Handling case of no $GCCROOT/setup.sh file."
		export PATH="$GCCROOT/bin:$PATH"

    # DQ (2/15/2010): For 64-bit this has to be setup to use lib64 explicitly
    # export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      if test "$MACHINE" = "i686" ; then
         export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      else
         export LD_LIBRARY_PATH="$GCCROOT/lib64:$GCCROOT/lib:$LD_LIBRARY_PATH"
      fi
    fi
fi


#########################################################################################
#
#  Configure Flags 
#
#  Note that Boost 1.39 and greater require using "--with-boost-libdir"
#
#########################################################################################
CONFIGURE_FLAGS="\
    --with-boost=${ROSE_TEST_BOOST_PATH} \
    --with-boost-libdir=${ROSE_TEST_BOOST_PATH}/lib \
    --with-java=${ROSE_TEST_JAVA_PATH} \
    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
    --with-CXX_DEBUG=-g --with-C_DEBUG=-g --with-CXX_WARNINGS=-Wall"
#########################################################################################
#  i386 
# 
#  [RPM 2011-02-06]:
#  The "--enable-i386" configure switch was added in commit f5389299 on 2011-02-06.
#  If this switch is present, then configure will try to determine how to generate
#  32-bit x86 executables with the C compiler and will fail if such a capability is not
#  possible.  This is the same behavior as previously, except previously the failure didn't
#  occur until we hit a makefile that actually tried to generate an i386 executable. 
#  If "--disable-i386" switch were specified then tests that require i386 input files will
#  not run (and will not cause a make failure).  If neither --enable-i386 nor --disable-i386
#  are specified then configure will try to determine whether generating i386 is possible
#  and act as if either --enable-i386 or --disable-i386 was specified.
#
#  Since we want the a00-ROSE-from-scratch Hudson tests to fail if configure can't figure out 
#  how to generate i386, we explicitly request that i386 support be present by invoking 
#  configure with "--enable-i386".
#########################################################################################
CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-i386"


#########################################################################################
#
#  Full build configurations 
#
#  tps (10/19/10) : opengl has not been tested for a year and the binary tests in place 
#  are failing because the infrastructure has changed. For now I have disabled openGL
#  testing but the way to turn it on is to specify --enable-openGL
#
#########################################################################################
if test "x$ROSE_TEST_BUILD_STYLE" = "xmake/check/install-full" ; then
  CONFIGURE_FLAGS="\
	${CONFIGURE_FLAGS} \
	--with-qt=${ROSE_TEST_QT_PATH} \
	--with-roseQt \
	--with-sqlite3=${ROSE_TEST_SQLITE_PATH}"

  ########################################################################################
  #  OpenGL
  #
  #  tps : 11/12/10 : Admins are installing openGL on hudson machines. Enabled openGL thereafter. Should pass.
  #  tps : It seems opengl is not properly installed on the hudson-rose node. Skip the test on this node for now.
  #######################################################################################
  if test \! \( "$MACHINE" = "i686" -o \
              "$machine_name" = "hudson-rose.llnl.gov" -o \
              "$machine_name" = "hudson-rose-07.llnl.gov" -o \
              "$machine_name" = "hudson-rose-08.llnl.gov" -o \
              "$machine_name" = "hudson-rose-13.llnl.gov" -o \
              "$machine_name" = "hudson-rose-14.llnl.gov" -o \
              "$machine_name" = "hudson-rose-15.llnl.gov" -o \
              "$machine_name" = "hudson-rose-16.llnl.gov" \)
  then
    echo "Skipping OpenGL..."
    # admins are troubleshooting the libGL.la
    #CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --enable-rose-openGL"
  fi
  #######################################################################################
  #  PCH
  #
  #  tps : 11/12/10 - OpenGL is not installed on all nodes yet. 
  #######################################################################################
  CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-pch  "

  #######################################################################################
  #  RTED
  #
  #  tps : 11/15/10 - RTED does not work for gcc 4.3.2 and 4.4.1 . This is not a problem of
  #  our implementation but rather a problem with the test suite. For instance we get the 
  #  following error: C_G_4_3_a_d.cpp:48: error: 'cout' was not declared in this scope
  #######################################################################################
  if test \! \( "x$ROSE_TEST_GCC_VERSION" = "x4.3.2" -o \
                "x$ROSE_TEST_GCC_VERSION" = "x4.4.1" \)
  then
    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-rted=${ROSE_TEST_RTED_PATH}"
  fi

fi

#######################################################################################
# OpenMP GOMP 
#   Only when on 64-bit Linux and gcc 4.4.1 is used.
#  Liao : 3/22/11 - Link with GOMP and run OpenMP tests
#######################################################################################
if test "x$ROSE_TEST_GCC_VERSION" = "x4.4.1" ; then
  if test "x$OS_MACHINE_LABEL" = "xamd64-linux" ; then
    if [ -a /usr/apps/gcc/4.4.1/lib64/libgomp.a ]; then
      CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-gomp_omp_runtime_library=/usr/apps/gcc/4.4.1/lib64"
    fi
  fi
fi

#########################################################################################
#
##
   dumpHudsonEnvironment "${LOG_LOCATION}/HudsonEnvironment-before-tests.log"
##
#
#########################################################################################

set -ex

#########################################################################################
#
#  ROSE/build
#
#########################################################################################
printBannerToStartStep "build"
build_start_time="$(date +%s)"

./build

printBannerToEndStep "build" $build_start_time


if test -e ROSE-install ; then 
  chmod -R u+xw ROSE-install
fi
rm -rf ROSE-install
mkdir ROSE-install
CONFIGURE_PREFIX_DIR=`pwd`/ROSE-install

if test -e ROSE-build ; then
  chmod -R u+wx ROSE-build
fi
rm -rf ROSE-build

mkdir ROSE-build
cd ROSE-build

if test -e tables ; then
  chmod -R u+wx tables
fi
rm -rf tables
mkdir tables


#########################################################################################
#
#  ROSE/configure
#
#########################################################################################
printBannerToStartStep "configure"
configure_start_time="$(date +%s)"

../configure --prefix=${CONFIGURE_PREFIX_DIR} ${CONFIGURE_FLAGS}

printBannerToEndStep "configure" $configure_start_time


#########################################################################################
#
#  ROSE/make
#
#########################################################################################

# TODO: add extra validation/error checks
#   1) check trace and build.spec (non-empty, etc.)
#   2) rose project exists in klocwork
#   3) database name is unique
#   4) all klocwork services are up and running
#   5) license server is available
#   6) license is available for checkout
#   7) ...

    export KLOCWORK_LICENSE_FILE=27000@swordfish.llnl.gov

    ################################################################################
    # GENERATE THE TRACE FILE
    #
    kwinject -T rose.trace make -j${NUM_PROCESS}
    if [ $? -ne 0 ]  ; then
        printBanner "Fatal error during 'kwinject -T rose.trace make -j${NUM_PROCESS}'. Aborting..."
       exit 3
    fi

    ################################################################################
    # CONVERT THE TRACE FILE TO A BUILD SPEC
    #
    kwinject -t rose.trace -o rose.out
	rc=$?
    if [ $rc -ne 0 ]  ; then
       printBanner "Fatal error ($rc) during 'kwinject -t rose.trace -o rose.out'. Aborting..."
       exit 3
    fi

    ################################################################################
    # RUN THE STATIC ANALYSIS 
    #
    # Warning: don't use too much parallelism because the analysis is memory-intensive
    # kwbuildproject returns a non-zero exist status if there are 'Build errors'
	#
	# TOO1 (6/2/2010): 	Upgraded hudson-rose-24 to 48Gb of RAM so I've doubled the
	# 					amount of parallelism from 5 to 10.
    #
    set +e
    kwbuildproject -host hudson-rose-24 -port 8080 --license-host swordfish.llnl.gov -j${NUM_PROCESS} -o tables rose.out
    set -e
    # There is no clean way to differentiate between analysis errors and internal Klocwork errors
    # aside from parsing the build.log file.
    grep -q "Reports generation stage completed" tables/build.log
    if [ ${PIPESTATUS[0]} -ne 0 -o $? -ne 0 ]  ; then
       printBanner "Fatal error during 'kwbuildproject -host hudson-rose-24 -port 8080 --license-host swordfish.llnl.gov -j${NUM_PROCESS} -o tables rose.out'. Aborting..."
       exit 3
    fi

    ################################################################################
    # PROPAGATE RESULTS TO MYSQL 
    #
    # Easier to sort:  date +build_%Y_day%j_%b%d_%I%P%Mm%Ssi =  build_2011_day109_Apr19_01pm35m29s
    #                  date +build_%Y_day%j_%b%d_%I%P        =  build_2011_day109_Apr19_01pm
    #
    # rose:build_XXXX
    HEAD_HASH=`git rev-parse HEAD`
    kwadmin load rose tables --name $HEAD_HASH
    status="$?"
    if [ "$status" -ne 0 ]  ; then
       printBanner "Fatal error (${status}) during 'kwadmin load rose tables --name $HEAD_HASH'. Aborting..."
       exit 3
    fi

####################################################################################
# SUMMARY 
#
#########################################################################################
#
##
set +x
   cd $TOP_LEVEL_ROSE_DIRECTORY

   dumpHudsonEnvironment "${LOG_LOCATION}/HudsonEnvironment-after-tests.log"

   printBannerWithDate

   printBannerToEndStep \
	"ROSE/scripts/hudson/runKlocworkOnRose" \
	$hudson_start_time_seconds
set -x
##
#
#########################################################################################
