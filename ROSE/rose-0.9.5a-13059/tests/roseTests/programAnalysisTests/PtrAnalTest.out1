1:func v:foo(v:foo-1-input) => (v:foo-0);
2:v:foo-1-2=&v:foo-1-m;
3:v:foo-1-q=&v:foo-1-m;
4:v:foo-1-r=v:foo-1-q;
5:v:foo-1-3=&v:foo-1-p;
6:v:foo-1-pp=&v:foo-1-p;
7:(*v:foo-1-pp)=v:foo-1-r
8:v:foo-1-5=(*v:foo-1-pp)
9:v:foo-1-4=op(v:foo-1-5 c:2 );
10:v:foo-1-p1=op(v:foo-1-5 c:2 );
11:v:foo-0=v:foo-1-input;
12:return-v:foo;
ctrl: 1->2 always
ctrl: 2->3 always
ctrl: 3->4 always
ctrl: 4->5 always
ctrl: 5->6 always
ctrl: 6->7 always
ctrl: 7->8 always
ctrl: 8->9 always
ctrl: 9->10 always
ctrl: 10->11 always
ctrl: 11->12 always
13:return-v:foo;
ctrl: 12->13 always

 Mapping 
SgBasicBlock:{char *p;char *q;char *r;char **pp;char m;q = &m;r = q;pp = &p;*pp = r;char *p1 =( *pp + 2);return input;}:2->12
SgExprStatement:q = &m;:2->3
SgAssignOp:q = &m:3v:foo-1-q
SgVarRefExp:q:3v:foo-1-q
SgAddressOfOp:&m:3v:foo-1-q
SgVarRefExp:m:3v:foo-1-m
SgExprStatement:r = q;:4->4
SgAssignOp:r = q:4v:foo-1-r
SgVarRefExp:r:4v:foo-1-r
SgVarRefExp:q:4v:foo-1-q
SgExprStatement:pp = &p;:5->6
SgAssignOp:pp = &p:6v:foo-1-pp
SgVarRefExp:pp:6v:foo-1-pp
SgAddressOfOp:&p:6v:foo-1-pp
SgVarRefExp:p:6v:foo-1-p
SgExprStatement:*pp = r;:7->7
SgAssignOp:*pp = r:7v:foo-1-r
SgPointerDerefExp:*pp:7v:foo-1-r
SgVarRefExp:pp:7v:foo-1-pp
SgVarRefExp:r:7v:foo-1-r
SgVariableDeclaration:char *p1 =( *pp + 2);:8->10
SgInitializedName:p1:10v:foo-1-p1
SgAddOp:( *pp + 2):10v:foo-1-p1
SgPointerDerefExp:*pp:10v:foo-1-5
SgVarRefExp:pp:8v:foo-1-pp
SgIntVal:2:10c:2
SgReturnStmt:return input;:11->12
SgVarRefExp:input:11v:foo-1-input
END Mapping 

14:func v:goo(v:goo-6-f) => (v:goo-0);
15:allocate v:goo-6-8;
16:v:goo-6-7=op(v:goo-6-8 );
17:v:goo-6-content=op(v:goo-6-8 );
18:() =v:goo-6-f(v:goo-6-content);
ctrl: 14->15 always
ctrl: 15->16 always
ctrl: 16->17 always
ctrl: 17->18 always

 Mapping 
SgBasicBlock:{char *content = "dklafj";( *f)(content);}:15->18
SgVariableDeclaration:char *content = "dklafj";:15->17
SgInitializedName:content:17v:goo-6-content
SgCastExp:"dklafj":17v:goo-6-content
SgStringVal:"dklafj":17v:goo-6-8
SgExprStatement:( *f)(content);:18->18
SgVarRefExp:f:18v:goo-6-f
SgVarRefExp:content:18v:goo-6-content
END Mapping 

19:func v:main() => (v:main-0);
20:allocate v:main-10-11;
21:v:main-10-9=op(v:main-10-11 );
22:v:main-10-content=op(v:main-10-11 );
23:allocate v:main-10-12;
24:allocate v:main-10-content2;
25:(v:main-10-13) =v:foo(v:main-10-content);
26:(v:main-10-output) =v:foo(v:main-10-content);
27:() =v:goo(v:foo);
28:v:main-0=c:0;
29:return-v:main;
ctrl: 19->20 always
ctrl: 20->21 always
ctrl: 21->22 always
ctrl: 22->23 always
ctrl: 23->24 always
ctrl: 24->25 always
ctrl: 25->26 always
ctrl: 26->27 always
ctrl: 27->28 always
ctrl: 28->29 always
30:return-v:main;
ctrl: 29->30 always

 Mapping 
SgBasicBlock:{char *content = "adlfkj";char *content2 = new char [4UL];char *output = ::foo(content);::goo(::foo);return 0;}:20->29
SgVariableDeclaration:char *content = "adlfkj";:20->22
SgInitializedName:content:22v:main-10-content
SgCastExp:"adlfkj":22v:main-10-content
SgStringVal:"adlfkj":22v:main-10-11
SgVariableDeclaration:char *content2 = new char [4UL];:23->24
SgInitializedName:content2:24v:main-10-content2
SgVariableDeclaration:char *output = foo(content);:25->26
SgInitializedName:output:26v:main-10-output
SgFunctionRefExp:foo:26v:foo
SgVarRefExp:content:26v:main-10-content
SgExprStatement:goo(foo);:27->27
SgFunctionRefExp:goo:27v:goo
SgFunctionRefExp:foo:27v:foo
SgReturnStmt:return 0;:28->29
SgIntVal:0:28c:0
END Mapping 

