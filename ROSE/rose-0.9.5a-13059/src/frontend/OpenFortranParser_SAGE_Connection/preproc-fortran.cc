#define yy_create_buffer Rose_Fortran_free_format__create_buffer
#define yy_delete_buffer Rose_Fortran_free_format__delete_buffer
#define yy_scan_buffer Rose_Fortran_free_format__scan_buffer
#define yy_scan_string Rose_Fortran_free_format__scan_string
#define yy_scan_bytes Rose_Fortran_free_format__scan_bytes
#define yy_flex_debug Rose_Fortran_free_format__flex_debug
#define yy_init_buffer Rose_Fortran_free_format__init_buffer
#define yy_flush_buffer Rose_Fortran_free_format__flush_buffer
#define yy_load_buffer_state Rose_Fortran_free_format__load_buffer_state
#define yy_switch_to_buffer Rose_Fortran_free_format__switch_to_buffer
#define yyin Rose_Fortran_free_format_in
#define yyleng Rose_Fortran_free_format_leng
#define yylex Rose_Fortran_free_format_lex
#define yyout Rose_Fortran_free_format_out
#define yyrestart Rose_Fortran_free_format_restart
#define yytext Rose_Fortran_free_format_text

#line 19 "preproc-fortran.cc"
/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[107] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,   40,   34,    4,    2,    3,   10,    6,   32,    7,
       34,   11,   34,   31,   20,   34,   21,    5,   34,    5,
       39,   38,   35,   37,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    9,   17,   33,   19,   16,   18,    5,
        0,    0,    5,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,   23,    0,
        0,   25,   28,   26,   27,   24,    0,    0,   13,    0,
        0,    5,   12,   14,    0,    0,   22,    0,    0,    5,
        0,   15,   29,    0,    5,   30,    0,    0,    0,    0,

        0,    0,    0,    1,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,    1,   19,   19,   20,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
        1,    1,    1,    1,   19,    1,   21,   19,   19,   22,

       23,   24,   25,   19,   19,   19,   19,   26,   19,   27,
       28,   19,   29,   30,   31,   32,   33,   34,   19,   35,
       19,   19,   36,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[37] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1
    } ;

static yyconst short int yy_base[111] =
    {   0,
        0,    0,    0,   35,  128,  127,  123,  122,    0,    0,
      127,  132,  132,  132,  132,  132,  119,  132,  132,  132,
       38,   26,  111,  132,  107,  106,  105,    0,   37,   86,
      132,  132,  132,  114,  132,   92,   89,   96,   17,   18,
       19,   86,   78,  132,  132,  132,  132,  132,  132,    0,
       44,   72,   73,  132,   82,   34,   77,   91,   90,   89,
       88,   40,   66,   86,   63,   63,   71,   82,  132,   81,
       60,  132,  132,  132,  132,  132,   56,   78,  132,   65,
       64,   56,  132,  132,   62,   73,  132,   72,   52,   54,
       69,  132,  132,   52,   50,  132,   51,   52,   58,   66,

       70,   69,   73,  132,   43,  132,  109,  111,  113,   42
    } ;

static yyconst short int yy_def[111] =
    {   0,
      107,  107,  106,    3,  108,  108,  109,  109,  107,  107,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  110,  106,  110,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  110,
      106,  106,  110,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  110,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  110,  106,  106,  106,  106,  106,  106,  106,  110,
      106,  106,  106,  106,  110,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,    0,  106,  106,  106,  106
    } ;

static yyconst short int yy_nxt[169] =
    {   0,
       13,   13,   14,   15,   13,   16,   17,   18,   19,   20,
       21,   22,   13,   23,   24,   25,   26,   27,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   13,   29,   44,   51,   58,
       60,   62,   45,   50,   69,   51,   63,  101,   59,   61,
       76,   98,   98,   98,   99,   99,   99,   30,   36,   52,
       37,   38,   39,   40,   41,   42,   52,   70,   77,   43,
      101,  103,  103,  102,  103,  103,  105,  100,   97,   96,
       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,
       85,   84,   83,   82,   81,   80,   79,   78,   75,   74,

       73,   72,   71,   68,   67,  104,   66,   65,  104,   12,
       12,   31,   31,   33,   33,   64,   57,   56,   55,   54,
       53,   49,   48,   47,   46,   35,  106,   34,   34,   32,
       32,   11,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106
    } ;

static yyconst short int yy_chk[169] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    4,   22,   29,   39,
       40,   41,   22,  110,   56,   51,   41,  105,   39,   40,
       62,   95,   97,   98,   95,   97,   98,    4,   21,   29,
       21,   21,   21,   21,   21,   21,   51,   56,   62,   21,
      100,  101,  101,  100,  103,  103,  102,   99,   94,   91,
       90,   89,   88,   86,   85,   82,   81,   80,   78,   77,
       71,   70,   68,   67,   66,   65,   64,   63,   61,   60,

       59,   58,   57,   55,   53,  101,   52,   43,  103,  107,
      107,  108,  108,  109,  109,   42,   38,   37,   36,   34,
       30,   27,   26,   25,   23,   17,   11,    8,    7,    6,
        5,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "preproc-fortran.ll"
#define INITIAL 0
#line 5 "preproc-fortran.ll"
/* 
Version 0.2.1 of FORTRAN scanner.
03-09-2007: Written by Ramakrishna Upadrasta and Dan Quinlan.

In an input free formatted FORTRAN file, this scanner recognizes the following
the ROSE sequence point in a FORTRAN file
     comments (beginning with ! and extendig till the end of the line)
     string literals (enclosed by single quotes '')
     Keywords (the list is provided in this code)
*/


/*
-------------------------------------------------------------------------------------
New in the current release:
    Better data structures for the keywords
    scripts to generate the header files automatically
    preliminary macro processing
-------------------------------------------------------------------------------------
*/

/*
-------------------------------------------------------------------------------------
Acknowledgements:
-------------------------------------------------------------------------------------
The authors (Dan and Rama) looked at the source codes of GFORTRAN as well as G95. 
We gratefully acknowledge the authors of GFORTRAN and G95.
*/

/*
-------------------------------------------------------------------------------------
Limitations: 
-------------------------------------------------------------------------------------
The authors (Rama and Dan) recognize many of the limitations. 
They will be tabulated later.
*/

/*
There are three scanners in the ROSE frontend. One for C/C++, two for fixed and free 
format FORTRAN languages. So that the flex generated C code and definitions (yylex, 
yytext, etc.) of these does not interfere with any other, we are adding 
     the prefix 'Rose_Fortran_C_Cxx_'        for the C/C++ scanner,
     the prefix 'Rose_Fortran_Fixed_Format_' for the Fixed Format FORTRAN scanner and
     the prefix 'Rose_Fortran_Free_Format_'  for the Free Format FORTRAN scanner
by using the -P<prefix options>
Note: We could have done this in an arguably more elegant way by changing the individual uses of these 
functions/variables.
*/
#define yytext Rose_Fortran_free_format_text
#define yylex Rose_Fortran_free_format_lex 




#include "sage3basic.h"

#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string>
#include <list>



using namespace std;

// namespace Rose_Fortran_free_format_namespace {

#include "general_token_defs.h"
#include "./rose_fortran_token_maps.h"

#if 0
// These are now defined in general_defs.h
struct file_pos_info
{
    int line_num;
    int column_num;
};

struct stream_element
{ 
    struct token_element * p_tok_elem;
    struct file_pos_info beginning_fpi;
    struct file_pos_info ending_fpi;
};
#endif

// DQ (1/21/2008): Modified this to be a pointer so it could be built and returned to ROSE.
LexTokenStreamTypePointer ROSE_Fortran_free_format_token_stream_pointer = NULL;

typedef LexTokenStreamType::iterator SE_ITR;

static struct file_pos_info curr_beginning;

//Operators
//This includes the "new" as well as the "old" operators
token_element ROSE_Fortran_Operator_map[] = 
{
      {"+",       SgToken::FORTRAN_INTRINSIC_PLUS},            /*   GFORTRAN/G95 equivalent is INTRINSIC_PLUS      */
      {"-",       SgToken::FORTRAN_INTRINSIC_MINUS},           /*   GFORTRAN/G95 equivalent is INTRINSIC_MINUS     */
      {"**",      SgToken::FORTRAN_INTRINSIC_POWER},           /*   GFORTRAN/G95 equivalent is INTRINSIC_POWER     */
      {"//",      SgToken::FORTRAN_INTRINSIC_CONCAT},          /*   GFORTRAN/G95 equivalent is INTRINSIC_CONCAT    */
      {"*",       SgToken::FORTRAN_INTRINSIC_TIMES},           /*   GFORTRAN/G95 equivalent is INTRINSIC_TIMES     */
      {"/",       SgToken::FORTRAN_INTRINSIC_DIVIDE},          /*   GFORTRAN/G95 equivalent is INTRINSIC_DIVIDE    */
      {".and.",   SgToken::FORTRAN_INTRINSIC_AND},             /*   GFORTRAN/G95 equivalent is INTRINSIC_AND       */
      {".or.",    SgToken::FORTRAN_INTRINSIC_OR},              /*   GFORTRAN/G95 equivalent is INTRINSIC_OR        */
      {".eqv.",   SgToken::FORTRAN_INTRINSIC_EQV},             /*   GFORTRAN/G95 equivalent is INTRINSIC_EQV       */
      {".neqv.",  SgToken::FORTRAN_INTRINSIC_NEQV},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      //{".true.",  SgToken::FORTRAN_TRUE},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      //{".false.",  SgToken::FORTRAN_FALSE},            /*   GFORTRAN/G95 equivalent is INTRINSIC_NEQV      */
      {"==",      SgToken::FORTRAN_INTRINSIC_EQ},              /*   GFORTRAN/G95 equivalent is INTRINSIC_EQ        */
      {"/=",      SgToken::FORTRAN_INTRINSIC_NE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_NE        */
      {">=",      SgToken::FORTRAN_INTRINSIC_GE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_GE        */
      {"<=",      SgToken::FORTRAN_INTRINSIC_LE},              /*   GFORTRAN/G95 equivalent is INTRINSIC_LE        */
      {"<",       SgToken::FORTRAN_INTRINSIC_LT},              /*   GFORTRAN/G95 equivalent is INTRINSIC_LT        */
      {">",       SgToken::FORTRAN_INTRINSIC_GT},              /*   GFORTRAN/G95 equivalent is INTRINSIC_GT        */
      {".not.",   SgToken::FORTRAN_INTRINSIC_NOT},             /*   GFORTRAN/G95 equivalent is INTRINSIC_NOT       */
      {".eq.",    SgToken::FORTRAN_INTRINSIC_OLDEQ},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDEQ     */
      {".ne.",    SgToken::FORTRAN_INTRINSIC_OLDNE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDNE     */
      {".ge.",    SgToken::FORTRAN_INTRINSIC_OLDGE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDGE     */
      {".le.",    SgToken::FORTRAN_INTRINSIC_OLDLE},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDLE     */
      {".lt.",    SgToken::FORTRAN_INTRINSIC_OLDLT},           /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDLT     */
      {".gt.",    SgToken::FORTRAN_INTRINSIC_OLDGT}            /*   GFORTRAN/G95 equivalent is INTRINSIC_OLDGT     */
};


//We know that this is a magic number. 
//We also know how to fix it.
#define NUM_KEYWORDS 67

//returns -1 if the string is not a keyword
//otherwise returns the token ID
static int identify_if_keyword(string str)
{
    //In FORTRAN, the identifiers are case insensitive.
    //So, variable 'ArEa' is the same as 'aReA'

    string lowered_str;
    for(unsigned int i = 0; i < strlen(str.c_str()); i++)
    {
        lowered_str += (unsigned char)tolower(char((str.c_str())[i]));
    }

    //printf("got called with %s. Converted to %s\n", str.c_str(), lowered_str.c_str());
    for(int i = 0; i < NUM_KEYWORDS; i++)
    {
        if(lowered_str == ROSE_Fortran_keyword_map[i].token_lexeme)
        {
            return (ROSE_Fortran_keyword_map[i].token_id);
        }
    }
    return -1;
}

//We know that this is a magic number. 
//It will be fixed.
#define NUM_OPERATORS 23

#if 0
static int identify_operator_matching(string str)
{
    //printf("got called with %s. \n", str.c_str());

    for(int i = 0; i < NUM_OPERATORS; i++)
    {
        if(str == ROSE_Fortran_Operator_map[i].token_lexeme)
        {
            return (ROSE_Fortran_Operator_map[i].token_id);
        }
    }
    return -1;
}
#endif

static void process_operator(string op) 
{

}


//This could be handled in a fashion better than a MACRO, but for now this will work
/*
#define process_operator(op) {  \
    token_element *p_tok_elem = new token_element;  \
    p_tok_elem->token_lexeme = yytext; \
    int rr = identify_if_keyword(yytext); \
    stream_element *p_se = new stream_element;  \
    p_se->p_tok_elem = p_tok_elem; \
    p_se->beginning_fpi.line_num = line_no; \
    p_se->beginning_fpi.column_num = column_no; \
    column_no+=strlen(yytext); \
    p_se->ending_fpi.line_num = line_no; \
    p_se->ending_fpi.column_num = column_no-1; \
    ROSE_Fortran_free_format_token_stream.push_back(p_se);  \
} \

*/

static void process_operator(string op);

#define YY_NO_UNPUT

// static int i = 0;
static std::string currentBuffer;

// DQ (4/19/2006):
// Store the name of the current file so that we can generate Sg_File_Info objects
// for each comment.  Later we might want starting and ending fileInfo for each 
// comments and CPP directive.
static std::string globalFileName;

#define FORTRAN_LEXICAL_SUPPORT 0

//struct matching_construct
static int braces_no=0;
// static int brace_counting_on=0;

// static int topbracestack();
static void pushbracestack(int);
// static int popbracestack();
// static bool isemptystack();

static int num_of_newlines(char*);
static int adjust_new_line_counter();

using namespace std;
//#undef yywrap


#define NORMAL 1
#define FORT_COMMENT 2
#define STRING_LIT 3
#define MACRO 4
 
#line 698 "preproc-fortran.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 246 "preproc-fortran.ll"



#undef Rose_Fortran_Free_Format_wrap
          int line_no = 1;
          int start_line_no = line_no;
          int column_no = 1;
          int start_column_no = column_no;
          BEGIN NORMAL;


#line 864 "preproc-fortran.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 107 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 132 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 257 "preproc-fortran.ll"
{ 
                                    /*preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationStart, 
                                            yytext,globalFileName,line_no,column_no,0); 
                                            */
                                    braces_no++; 
                                    line_no+=num_of_newlines(yytext); 
                                    column_no+=strlen(yytext); 
                                    pushbracestack(braces_no); 
                   }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 266 "preproc-fortran.ll"
{
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = yytext; 
                    BEGIN FORT_COMMENT; 
               }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 275 "preproc-fortran.ll"
{
                    /*This begins a STRING LITERAL*/
                    start_line_no=line_no; 
                    start_column_no=column_no; 
                    curr_beginning.line_num = line_no;
                    curr_beginning.column_num = column_no;
                    column_no+=1; 
                    currentBuffer = yytext; 
                    BEGIN STRING_LIT;
               }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 285 "preproc-fortran.ll"
{ line_no++; column_no=1; } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 286 "preproc-fortran.ll"
{ 
                                          
                                          token_element *p_tok_elem = new token_element; 
                                          p_tok_elem->token_lexeme = yytext; 

                                          int is_keyword = identify_if_keyword(yytext); 
                                          //found a keyword?
                                          if(is_keyword != -1)
                                          {
                                              //printf("%s is a keyword\n", yytext); 
                                              p_tok_elem->token_id = is_keyword; 
                                          }
                                          else
                                          {
                                              //printf("%s is not a keyword\n", yytext); 
                                              p_tok_elem->token_id = SgToken::FORTRAN_IDENTIFIER;
                                          }
                                          
                                          stream_element *p_se = new stream_element; 
                                          p_se->p_tok_elem = p_tok_elem; 
                                          
                                          p_se->beginning_fpi.line_num = line_no;
                                          p_se->beginning_fpi.column_num = column_no;
                                          column_no+=strlen(yytext); 
                                          p_se->ending_fpi.line_num = line_no; 
                                          p_se->ending_fpi.column_num = column_no-1; 
                                          //push the element onto the token stream
                                          ROSE_Fortran_free_format_token_stream_pointer->push_back(p_se); 
                                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 315 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 316 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 317 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 318 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 319 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 320 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 321 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 322 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 323 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 324 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 325 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 326 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 327 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 328 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 329 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 330 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 331 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 332 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 333 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 334 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 335 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 336 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 337 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 338 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);} 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 339 "preproc-fortran.ll"
{process_operator(yytext);column_no+=strlen(yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 340 "preproc-fortran.ll"
{/*Do stuff to store semi colons*/ /*process_operator(yytext);*/column_no+=strlen(yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 341 "preproc-fortran.ll"
{/*Do stuff to store commas*/ /*process_operator(yytext);*/column_no+=strlen(yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 342 "preproc-fortran.ll"
{/*Do stuff to store colons*/ /*process_operator(yytext);*/column_no+=strlen(yytext);}
	YY_BREAK
/*
<NORMAL>^[:blank:]*\n          {
                                       //According to the STD, a line which has whitespaces is a comment line
                                       //We will store it
                                       printf("came across a blank line\n");
                                       currentBuffer += yytext;

                                       token_element *p_tok_elem = new token_element;
                                       p_tok_elem->token_lexeme = currentBuffer;
                                       p_tok_elem->token_id = SgToken::FORTRAN_COMMENTS;
           
                                       stream_element *p_se = new stream_element;
                                       p_se->p_tok_elem = p_tok_elem;

                                       p_se->beginning_fpi.line_num = line_no; 
                                       p_se->beginning_fpi.column_num = column_no;

                                       p_se->ending_fpi.line_num = line_no;
                                       p_se->ending_fpi.column_num = column_no;
                                       ROSE_Fortran_free_format_token_stream_pointer->push_back(p_se);

                                       line_no++; column_no=1;
                                  }
                                  */
case 34:
YY_RULE_SETUP
#line 367 "preproc-fortran.ll"
{column_no++;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 368 "preproc-fortran.ll"
{
                            column_no++; 
                            currentBuffer += yytext;
                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 372 "preproc-fortran.ll"
{
                            column_no+=2; 
                            currentBuffer += yytext;
                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 376 "preproc-fortran.ll"
{ 
                            //This ends the STRING LITERALS
                            currentBuffer += yytext;
                            //printf("\nthe literal string is %s\n", currentBuffer.c_str());
                            //printf("ending in (%d, %d) \n", line_no, column_no);

                            adjust_new_line_counter();

                            token_element *p_tok_elem = new token_element;
                            p_tok_elem->token_lexeme = currentBuffer;
                            p_tok_elem->token_id = SgToken::FORTRAN_STRING_LITERALS;

                            stream_element *p_se = new stream_element;
                            p_se->p_tok_elem = p_tok_elem;

                            p_se->beginning_fpi = curr_beginning;
                            p_se->ending_fpi.line_num = line_no;
                            p_se->ending_fpi.column_num = column_no;

                            ROSE_Fortran_free_format_token_stream_pointer->push_back(p_se);

                            column_no++; 
                            BEGIN NORMAL;
                       }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 400 "preproc-fortran.ll"
{ 
                            //This is also a comment
                            currentBuffer += yytext;
                            //printf("the comment string is %s", currentBuffer.c_str());

                            token_element *p_tok_elem = new token_element;
                            p_tok_elem->token_lexeme = currentBuffer;
                            p_tok_elem->token_id = SgToken::FORTRAN_COMMENTS;

                            stream_element *p_se = new stream_element;
                            p_se->p_tok_elem = p_tok_elem;
                            p_se->beginning_fpi = curr_beginning;
                            p_se->ending_fpi.line_num = line_no;
                            p_se->ending_fpi.column_num = column_no;
                            ROSE_Fortran_free_format_token_stream_pointer->push_back(p_se);

                            line_no++; column_no=1; 
                            BEGIN NORMAL;
                      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 419 "preproc-fortran.ll"
{ 
                            column_no++; 
                            currentBuffer += yytext;
                      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 423 "preproc-fortran.ll"
ECHO;
	YY_BREAK
#line 1275 "preproc-fortran.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NORMAL):
case YY_STATE_EOF(FORT_COMMENT):
case YY_STATE_EOF(STRING_LIT):
case YY_STATE_EOF(MACRO):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 107 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 107 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 106);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 423 "preproc-fortran.ll"


static const int maxstacksize=500;
static int bracestack[maxstacksize];

static int top=0;
static void pushbracestack(int brace_no) { bracestack[top++]=brace_no; }
// static int topbracestack() { if(top) return bracestack[top-1]; else return -1; }
// static int popbracestack() { return bracestack[--top]; }
// static bool isemptystack() { return top==0; }


static int adjust_new_line_counter()
{
    return 1;
}

static int num_of_newlines(char* s)
{
     int num = 0;
     while(*s != '\0')
        {
          if(*s == '\n')
               num++;
          s++;
        }
     return num;
}

// This function is called by AttachPreprocessingInfoTreeTrav::evaluateInheritedAttribute()
// function when the input node is a SgFile IR node.
// int getFortranFreeFormatPreprocessorDirectives( std::string fileName )
LexTokenStreamTypePointer
getFortranFreeFormatPreprocessorDirectives( std::string fileName )
   {
     FILE *fp = NULL; 

     ROSE_Fortran_free_format_token_stream_pointer = new LexTokenStreamType;
     assert(ROSE_Fortran_free_format_token_stream_pointer != NULL);

     globalFileName = fileName;

  // printf ("In getFortranFreeFormatPreprocessorDirectives(): Lexical pass to retrieve the token stream (Opening Free Format Fortran file: %s) \n",fileName.c_str());

     if(fileName.empty() == false) 
        {
          fp = fopen(fileName.c_str(), "r"); 
          if (fp) 
             { 
            // printf ("opened file %s\n",fileName.c_str()); 
            // exit(0);
               yyin = fp; 
               yylex(); 
               fclose(fp);  
             }
            else 
             {
               printf ("Error: can't find the requested file (%s) \n",fileName.c_str()); 
             }
        }

     assert(ROSE_Fortran_free_format_token_stream_pointer != NULL);
     return ROSE_Fortran_free_format_token_stream_pointer;
   }

void
clean_up_stream()
{
    //
    //This "rudimentary" post processing of the token stream helps in correct identification of keywords.

    //int e g e r 
    //is a sequence of identifiers
    //recognize the token_ids and map them.
    //If the tokens are 


#if 0
    for(SE_ITR ii = ROSE_Fortran_free_format_token_stream_pointer->begin(); ii != ROSE_Fortran_free_format_token_stream_pointer->end(); ii++)
    {
        if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_COMMENTS)
        { 
            cout<<"## COMMENT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_STRING_LITERALS)
        {
            cout<<"## STRING_LIT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if(((*ii)->p_tok_elem->token_id > 2) && ((*ii)->p_tok_elem->token_id < 67))
        {
            cout<<"## KEYWORD -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_IDENTIFIER)
        {
            cout<<"## IDENTIFIER -->";
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else
        {
            cout<<"## ????Unrecognized element in the token stream##"; 
        }
        cout<<"\n"; 
 
    }
#endif
}

#if 0
int main(int argc, char *argv[])
{
    if(argc == 1) 
    {   //The "default" for now
        getFortranFreeFormatPreprocessorDirectives("triangle.f90");
    }
    else
    {
        getFortranFreeFormatPreprocessorDirectives(argv[1]);
    }

    clean_up_stream();

    printf("*****************here is the stream *************\n"); 
    for(SE_ITR ii = ROSE_Fortran_free_format_token_stream.begin(); ii != ROSE_Fortran_free_format_token_stream.end(); ii++)
    {
        if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_COMMENTS)
        { 
            cout<<"## COMMENT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_STRING_LITERALS)
        {
            cout<<"## STRING_LIT -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        }
        else if(((*ii)->p_tok_elem->token_id > 2) && ((*ii)->p_tok_elem->token_id < 67))
        {
            cout<<"## KEYWORD -->"; 
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else if((*ii)->p_tok_elem->token_id == SgToken::FORTRAN_IDENTIFIER)
        {
            cout<<"## IDENTIFIER -->";
            cout<<(*ii)->p_tok_elem->token_lexeme; 
            cout<<"<-- From "<<"("<<(*ii)->beginning_fpi.line_num<<","<<(*ii)->beginning_fpi.column_num<<") to " 
                <<"("<<(*ii)->ending_fpi.line_num<<","<<(*ii)->ending_fpi.column_num<<")";
        } 
        else
        {
            cout<<"## ????Unrecognized element in the token stream##"; 
        }
        cout<<"\n"; 
 
    }
    printf("*****************the stream is over*************\n"); 

    return 1;
}

#endif
// }//This ends the namespace Rose_Fortran_free_format_namespace

