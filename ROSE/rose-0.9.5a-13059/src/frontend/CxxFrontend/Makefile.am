include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs

release_binary_compatibility_signature=$(shell ${top_srcdir}/scripts/bincompat-sig)
# BINARY_EDG_DIRNAME=roseBinaryEDG-${build_triplet_without_redhat}-${GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX}-${release_binary_compatibility_signature}

# define a variable to represent the substring of the binary's name
# BINARY_EDG_DIRNAME=roseBinaryEDG-@ROSE_EDG_MAJOR_VERSION_NUMBER@-@ROSE_EDG_MINOR_VERSION_NUMBER@-${build_triplet_without_redhat}-${GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX}-${release_binary_compatibility_signature}
BINARY_EDG_DIR_SUBSTRING_NAME=roseBinaryEDG-@ROSE_EDG_MAJOR_VERSION_NUMBER@-@ROSE_EDG_MINOR_VERSION_NUMBER@
BINARY_EDG_DIRNAME=$(BINARY_EDG_DIR_SUBSTRING_NAME)-${build_triplet_without_redhat}-${GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX}-${release_binary_compatibility_signature}

BINARY_EDG_TARBALL_STAGING_PATH=/nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries-staging
BINARY_EDG_TARBALL_DISTRIBUTION_PATH=/nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries
BINARY_EDG_TARBALL_URL=file://$(BINARY_EDG_TARBALL_DISTRIBUTION_PATH)
# Liao, 12/11/2009, we mirror the internal BINARY_EDG_TARBALL_DISTRIBUTION_PATH to rosecompiler.org
EXTERNAL_BINARY_EDG_TARBALL_URL=http://www.rosecompiler.org/edg_binaries

AUTO_ARCHS = i686-pc-linux-gnu x86_64-pc-linux-gnu
ALL_ARCHS = $(AUTO_ARCHS) i686-apple-darwin
STD_GNU_COMPILERS = GNU-4.0 GNU-4.1 GNU-4.2 GNU-4.3 GNU-4.4
COMPILERS_i686_pc_linux_gnu = $(STD_GNU_COMPILERS)
COMPILERS_x86_64_pc_linux_gnu = $(STD_GNU_COMPILERS)
COMPILERS_i686_apple_darwin = GNU-4.0

#fetch tar-ball , try internal url first, then the external one
# Liao, 12/18/2009, we switch to wget from curl for better coverage of users and stability
# curl sometimes output the error message into the output tar ball file
%.tar.gz:
	test -d ${BINARY_EDG_TARBALL_DISTRIBUTION_PATH} && cp ${BINARY_EDG_TARBALL_DISTRIBUTION_PATH}/$@  . || wget ${EXTERNAL_BINARY_EDG_TARBALL_URL}/$@
#	test -d ${BINARY_EDG_TARBALL_URL} && curl ${BINARY_EDG_TARBALL_URL}/$@  -o $@ || curl ${EXTERNAL_BINARY_EDG_TARBALL_URL}/$@  -o $@ 

# This line includes different EDG tarballs depending on the value of the environment variable DIST_EDG
# Default
#    Liao 12/8/2009, make the default value to be the one used most often (lightweight distribution package)
#    It has to be current, make distcheck relies on it to find the edg binaries
DIST_EDG == current

# all EDG binaries for all platforms and compiler versions generated by the automated testing system
# AUTO_TARBALLS = $(foreach ARCH,$(AUTO_ARCHS),$(foreach COMPILER,$(COMPILERS_$(subst -,_,$(ARCH))),roseBinaryEDG-$(ARCH)-$(COMPILER)-$(release_binary_compatibility_signature).tar.gz))
AUTO_TARBALLS = $(foreach ARCH,$(AUTO_ARCHS),$(foreach COMPILER,$(COMPILERS_$(subst -,_,$(ARCH))),$(BINARY_EDG_DIR_SUBSTRING_NAME)-$(ARCH)-$(COMPILER)-$(release_binary_compatibility_signature).tar.gz))

# all EDG binaries for all platforms and compiler versions 
# ALL_TARBALLS = $(foreach ARCH,$(ALL_ARCHS),$(foreach COMPILER,$(COMPILERS_$(subst -,_,$(ARCH))),roseBinaryEDG-$(ARCH)-$(COMPILER)-$(release_binary_compatibility_signature).tar.gz))
ALL_TARBALLS = $(foreach ARCH,$(ALL_ARCHS),$(foreach COMPILER,$(COMPILERS_$(subst -,_,$(ARCH))),$(BINARY_EDG_DIR_SUBSTRING_NAME)-$(ARCH)-$(COMPILER)-$(release_binary_compatibility_signature).tar.gz))

# if DIST_EDG == current:
#   include only binaries for the current architecture and current compiler version
# if DIST_EDG == all:
#   include all EDG binaries for all platforms and compiler versions 
# if DIST_EDG == none:
#   no binaries distributed as EXTRA_DIST
EXTRA_DIST = $(if $(findstring all,$(DIST_EDG)), $(ALL_TARBALLS), $(if $(findstring current,$(DIST_EDG)), $(BINARY_EDG_DIRNAME).tar.gz))

DIST_SUBDIRS= 

# if tarballs for all-archs and compiler combinations are available
#    move 
# else 
#    do nothing
deploy_tarballs:
	for tarball in $(AUTO_TARBALLS:%=$(BINARY_EDG_TARBALL_STAGING_PATH)/%) ; do \
		if test \! -e $$tarball ; then \
			exit 0 ; \
		fi ; \
	done && \
	mv $(AUTO_TARBALLS:%=$(BINARY_EDG_TARBALL_STAGING_PATH)/%) $(BINARY_EDG_TARBALL_DISTRIBUTION_PATH)

if ROSE_HAS_EDG_SOURCE

SUBDIRS = EDG

EDG/libroseEDG.la:
	@echo "Calling make in ../../util"
	$(MAKE) -C ../../util
	@echo "Calling make in ../../ROSETTA/src"
	$(MAKE) -C ../../ROSETTA/src
	@echo "Calling make in EDG (make libroseEDG.la)"
	$(MAKE) -CEDG libroseEDG.la
	@echo "DONE: Calling make in EDG (make libroseEDG.la)"

#create tar-ball
$(BINARY_EDG_DIRNAME).tar.gz: EDG/libroseEDG.la
	rm -rf $(BINARY_EDG_DIRNAME)
	mkdir $(BINARY_EDG_DIRNAME)
# Replace dependency_libs with an empty list. This is required when
# compiling with non-system compilers as this variable will contain
# a system specific path
	sed "s@^dependency_libs.*@dependency_libs=''@" EDG/libroseEDG.la > ${BINARY_EDG_DIRNAME}/libroseEDG.la  
	cp -r EDG/.libs $(BINARY_EDG_DIRNAME)/
	tar czf $(BINARY_EDG_DIRNAME).tar.gz $(BINARY_EDG_DIRNAME)
	rm -rf $(BINARY_EDG_DIRNAME)

#generate a tar-ball, but don't upload it
binary_edg_tarball: $(BINARY_EDG_DIRNAME).tar.gz

#upload tarball to a central location
# 2/25/2010
#  Liao, This two-stage logic is really unnecessary, making EDG binary tarball and store
#  them into a single place should be sufficient. It is the release script's job
#  to check if all desired binaries are available. 
#  Otherwise we have to constantly update the list of GCC versions in this Makefile.
#  Directly put generated EDG binary files into the distribution path
#
#	if [ \! -e $(BINARY_EDG_TARBALL_STAGING_PATH)/$(BINARY_EDG_DIRNAME).tar.gz ] ; then \ #
upload_edg_binary: 
	if [ \! -e $(BINARY_EDG_TARBALL_DISTRIBUTION_PATH)/$(BINARY_EDG_DIRNAME).tar.gz ] ; then \
	   $(MAKE) binary_edg_tarball && \
	   cp $(BINARY_EDG_DIRNAME).tar.gz $(BINARY_EDG_TARBALL_STAGING_PATH) && \
	   cp $(BINARY_EDG_DIRNAME).tar.gz $(BINARY_EDG_TARBALL_DISTRIBUTION_PATH) ;\
	fi

clean-local:
	rm -rf roseBinaryEDG-3-3-*.tar.gz

else 
#------------------- no EDG sources

SUBDIRS= 


all: EDG/libroseEDG.la


#extract EDG tar-balls for the current architecture if that has not already been done
EDG/libroseEDG.la: $(BINARY_EDG_DIRNAME).tar.gz
	echo "am__untar = $(am__untar)"
	if test "$(am__untar)" != "false"; then \
	    echo "Found $<: proceeding to untar file $(BINARY_EDG_DIRNAME).tar.gz" >&2 && \
	    GZIP=$(GZIP_ENV) gunzip -c $< | $(am__untar) && \
	    rm -rf EDG && \
	    mkdir -p EDG && \
	    mv $(BINARY_EDG_DIRNAME)/libroseEDG.* EDG/ && \
	    mv $(BINARY_EDG_DIRNAME)/.libs EDG/ && \
	    rmdir $(BINARY_EDG_DIRNAME)/ && \
            touch EDG/libroseEDG.la; \
	else \
	  echo "ERROR: am__untar set to false! (am__untar == $(am__untar)) Can't untar $(BINARY_EDG_DIRNAME).tar.gz) -- this should have been caught by configure" >&2 && \
	  exit 1; \
	fi

CLEANFILES = EDG/libroseEDG.la
clean-local:
	-rm -rf EDG/.libs/
endif
