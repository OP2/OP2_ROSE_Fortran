#ifndef ROSE_COMPASS_H
#define ROSE_COMPASS_H

#include <rose.h>
#include <string.h>
#include <string>
#include <map>

namespace Compass {

  ///
  /// The ParameterNotFoundException class contains information about a
  /// parameter required by a checker which is not found in the parameter file
  ///
  class ParameterNotFoundException: public std::exception {
    const char* errorMessage;

    public:
    ParameterNotFoundException(const std::string& parameterName)
      : errorMessage(strdup(("Parameter not found: " + parameterName).c_str()))
      {}

    virtual const char* what() const throw () {
      return errorMessage;
    }
  };

  ///
  /// The ParseError class contains information about the failure to parse
  /// information from a parameter file or parameter value
  ///
  class ParseError: public std::exception {
    const char* errorMessage;

    public:
    ParseError(const std::string& badString, const std::string& wanted)
      : errorMessage(strdup(("Error parsing " + wanted + " from string '" +
                             badString + "'").c_str()))
      {}

    virtual const char* what() const throw () {
      return errorMessage;
    }
  };

  ///
  /// The Parameters class contains the result of reading a parameter file.
  /// It is a list of key-value pairs; both the key and value are strings.
  /// The parameter file is a sequence of lines, with the following formats:
  /// - Blank line: ignored
  /// - Line beginning with #: ignored
  /// - key=value (note no spaces): text before = is key, rest of line is value
  ///
  class Parameters {
    std::map<std::string, std::string> data;

    public:
    /// Read parameters from the given file
    Parameters(const std::string& filename)
      throw (ParseError);
    /// Get the value of a parameter
    std::string operator[](const std::string& name) const
      throw (ParameterNotFoundException);
  };

  /// Parse an integer from the given string
  int parseInteger(const std::string& str);
  /// Parse a double from the given string
  double parseDouble(const std::string& str);
  /// Parse a bool from the given string
  bool parseBool(const std::string& str);
  /// Parse a white-space separated list of integers from the given string
  std::vector<int> parseIntegerList(const std::string& str);
  /// Parse a white-space separated list of doubles from the given string
  std::vector<double> parseDoubleList(const std::string& str);

  class OutputBase;

  ///
  /// Base class for objects which can be used to output error messages from
  /// checkers
  ///
  class OutputObject {
    public:
    /// Emit one error message
    virtual void addOutput(OutputBase* theOutput) = 0;
    virtual ~OutputObject() {}
  };

  /// Format the information from fi using the GNU standard format given at http://www.gnu.org/prep/standards/html_node/Errors.html
  std::string formatStandardSourcePosition(Sg_File_Info* fi);
  /// Format the information from (start, end) using the GNU standard format given at http://www.gnu.org/prep/standards/html_node/Errors.html
  std::string formatStandardSourcePosition(Sg_File_Info* start,
                                           Sg_File_Info* end);
  /// Format the information from the parameters using the GNU standard format given at http://www.gnu.org/prep/standards/html_node/Errors.html
  std::string formatStandardSourcePosition(const std::string& filename,
                                           int line, int col);
  /// Format the information from the parameters using the GNU standard format given at http://www.gnu.org/prep/standards/html_node/Errors.html
  std::string formatStandardSourcePosition(const std::string& startFilename,
                                           int startLine, int startCol,
                                           const std::string& endFilename,
                                           int endLine, int endCol);

  /// The base class required for checkers.
  /// No particular constructors are required; the factory is always used to
  /// construct objects derived from this base class.
  class TraversalBase {
    public:
    /// Run the given checker starting at a top node
    virtual void run(SgNode* n) = 0;
    virtual ~TraversalBase() {}
  };

  /// The base class for factory classes.
  /// A default constructor is required.
  class FactoryBase {
    public:
    /// Get the name of this checker
    virtual std::string getName() const = 0;
    ///
    /// Get help information for this checker
    /// The help must have the following format:
    /// - Continuation lines must start with two spaces
    /// - The first line is the human-readable name of the checker followed by
    ///   a colon
    /// - Continuation lines to that describe what is checked for
    /// - A line "--- Parameters:" starts the list of parameters
    /// - A parameter block must start with the name of the parameter, ": ",
    ///   and the parameter's type
    /// - Continuation lines to that describe the parameter
    /// - The list of parameters must end with a blank line
    ///
    virtual std::string getHelp() const = 0;
    /// Create a traversal using the given parameters and output object
    /// (returns NULL on failure).
    virtual TraversalBase* create(const Parameters& params,
                                  OutputObject* output) const = 0;
    virtual ~FactoryBase() {}
  };

  /// The base class for outputs from a checker
  class OutputBase {
    public:
    /// Get the name of the checker which produced this error
    virtual std::string getCheckerName() const = 0;
    ///
    /// Get a string representing the error; file positions must be in GNU
    /// format (http://www.gnu.org/prep/standards/html_node/Errors.html).
    /// The formatStandardSourcePosition functions produce the correct format
    /// for this.
    ///
    virtual std::string getString() const = 0;
    virtual ~OutputBase() {}
  };

  /// A simple output object which just prints each error message
  class PrintingOutputObject: public OutputObject {
    std::ostream& stream;

    public:
    PrintingOutputObject(std::ostream& stream): stream(stream) {}
    virtual void addOutput(OutputBase* theOutput) {
      stream << theOutput->getCheckerName() << ":" <<
                theOutput->getString() << std::endl;
    }
  };

}

#endif // ROSE_COMPASS_H
