#!/bin/bash -e
#
# TODO: add more summary info
#	- List of durations for each step in the job
#
#  
#  Insure++:
#	1. ~/.psrc configuration file
#	2. configure with '--enable-insure'
#	3. GCC 4.2.4 for now (4.1.2 doesnt work!)
#
#
#
source scripts/hudson/runBuildStep.sh
source scripts/hudson/debuggingPrinters.sh
#########################################################################################
set +x
# Uniform banners allows for easy parsing of the hudson console output
# Starting 'build|configure|make|make install|make installcheck|make check|make distcheck|make docs' step...
# Done with 'build|configure|make|make install|make installcheck|make check|make distcheck|make docs' step!
printBannerToStartStep \
	"ROSE/scripts/hudson/runInsureOnRose in `pwd`"

machine=`uname -m`
machine_os=`uname -s`
machine_name=`uname -n`
start_time=`date`
hudson_start_time_seconds="$(date +%s)"
TOP_LEVEL_ROSE_DIRECTORY="$PWD"
LOG_LOCATION="$PWD"

# TODO: check licenses; retry? timeout

if test ! -f ~/.psrc ; then
  echo "Error: $machine_name doesn't seem to have a ~/.psrc Insure++ configuration file"
  exit 1
fi
if test ! -d /export/tmp.hudson-rose/tmp/ ; then
  echo "Error: $machine_name doesn't seem to have a /export/tmp.hudson-rose/tmp/ directory for Insure++ to write cache files to. (Configured in ~/.psrc)" 
  exit 1
fi


if test "x$ROSE_TEST_BUILD_STEP" = "xanalyze" ; then
  if test \! \( "$ROSE_TEST_BUILD_DIRECTORY" = "tests/CompileTests/Cxx_tests" -o \
                "$ROSE_TEST_BUILD_DIRECTORY" = "tests/CompileTests/Fortran_tests" -o \
                "$ROSE_TEST_BUILD_DIRECTORY" = "tests/CompileTests/Fortran_tests/LANL_POP" -o \
                "$ROSE_TEST_BUILD_DIRECTORY" = "tests/CompileTests/Fortran_tests/gfortranTestSuite" -o \
                "$ROSE_TEST_BUILD_DIRECTORY" = "tests/roseTests/astFileIOTests" -o \
                "$ROSE_TEST_BUILD_DIRECTORY" = "tests/RunTests/AstDeleteTests" \) ; then
    echo "Error: This hudson script has not been configured to support this build directory for Insure++ analysis: $ROSE_TEST_BUILD_DIRECTORY"
    exit 1
  fi

  if test ! -n "${ROSE_INSURE_BUILD_TREE}" ; then
    echo "Error: you did not specify a 'ROSE_INSURE_BUILD_TREE' for analysis = '${ROSE_INSURE_BUILD_TREE}'"
    exit 1
  fi
#  if test ! -d "${ROSE_INSURE_BUILD_TREE}" ; then
#    echo "Error: '${ROSE_INSURE_BUILD_TREE}' does not seem to be a valid ROSE_INSURE_BUILD_TREE for analysis"
#    exit 1
#  fi
fi



#########################################################################################
#
#  BOOST C++ 
#
#########################################################################################
if test "x$label" = "x64bit-macos-10.6" ; then
  export DYLD_LIBRARY_PATH="$ROSE_TEST_BOOST_PATH/lib:$DYLD_LIBRARY_PATH"
else
  # tps : 04/26/2010 - Added support for OpenGL for 64bit
  export LD_LIBRARY_PATH="${ROSE_TEST_BOOST_PATH}/lib:${ROSE_TEST_OPENGL_PATH}/lib:$LD_LIBRARY_PATH"
fi


#########################################################################################
#
#  UPC
#
#  tps : 11/17/2010 Hudson support for UPC - order matters!
#  tps : 11/16/2010 : Lets add support for UPC
#  tps : 11/22/2010 : The setup.sh has been updated by admin
#
#########################################################################################
UPC_TEST_MACHINE=`uname -m`
if test "x$UPC_TEST_MACHINE" = "xi686" ; then
  echo "UPC is not currently tested on 32-bit machines."
elif test "x$label" = "x64bit-macos-10.6" ; then
  echo "UPC is not currently tested on 64-bit Mac OS X 10.6"
else
# Turn off bash error checking to run source with file that uses "grep" (will return error code if target is not found).
  set +e
  # This causes "symbol lookup error: /usr/libexec/gcc/x86_64-redhat-linux/4.1.2/f951: undefined symbol: __gmpn_sqr_n"
  # on all 4.1.2 compilers (only effects 64 bit tests since we only use this script on 64 bit machines).
  # This UPC support must be thought out more carefully.
  if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    source /nfs/apps/upc/4.5.1.2/setup.sh
  else
    echo "UPC not tested 64-bit machines using gnu 4.1.2 for now."
  fi
  set -e
fi


#########################################################################################
#
#  GCC 4.1.2
#
#########################################################################################
if test "x$ROSE_TEST_GCC_VERSION" != "x4.1.2" ; then
    GCCROOT=/usr/apps/gcc/$ROSE_TEST_GCC_VERSION
    if test -e $GCCROOT/setup.sh ; then
        set +ex
        . $GCCROOT/setup.sh
        set -ex
    else
    # This is the case for g++ 3.4.6 (since there is no uniform existence of a setup.sh file).
      echo "Handling case of no $GCCROOT/setup.sh file."
		export PATH="$GCCROOT/bin:$PATH"

    # DQ (2/15/2010): For 64-bit this has to be setup to use lib64 explicitly
    # export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      if test "$MACHINE" = "i686" ; then
         export LD_LIBRARY_PATH="$GCCROOT/lib:$LD_LIBRARY_PATH"
      else
         export LD_LIBRARY_PATH="$GCCROOT/lib64:$GCCROOT/lib:$LD_LIBRARY_PATH"
      fi
    fi
fi


#########################################################################################
#
#  Configure Flags 
#
#  Note that Boost 1.39 and greater require using "--with-boost-libdir"
#
#########################################################################################
CONFIGURE_FLAGS="\
    --enable-insure \
    --with-boost=${ROSE_TEST_BOOST_PATH} \
    --with-boost-libdir=${ROSE_TEST_BOOST_PATH}/lib \
    --with-java=${ROSE_TEST_JAVA_PATH} \
    --with-ROSE_LONG_MAKE_CHECK_RULE=yes \
    --with-CXX_DEBUG=-g --with-C_DEBUG=-g --with-CXX_WARNINGS=-Wall"
#########################################################################################
#  i386 
# 
#  [RPM 2011-02-06]:
#  The "--enable-i386" configure switch was added in commit f5389299 on 2011-02-06.
#  If this switch is present, then configure will try to determine how to generate
#  32-bit x86 executables with the C compiler and will fail if such a capability is not
#  possible.  This is the same behavior as previously, except previously the failure didn't
#  occur until we hit a makefile that actually tried to generate an i386 executable. 
#  If "--disable-i386" switch were specified then tests that require i386 input files will
#  not run (and will not cause a make failure).  If neither --enable-i386 nor --disable-i386
#  are specified then configure will try to determine whether generating i386 is possible
#  and act as if either --enable-i386 or --disable-i386 was specified.
#
#  Since we want the a00-ROSE-from-scratch Hudson tests to fail if configure can't figure out 
#  how to generate i386, we explicitly request that i386 support be present by invoking 
#  configure with "--enable-i386".
#########################################################################################
CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-i386"


#########################################################################################
#
#  Full build configurations 
#
#  tps (10/19/10) : opengl has not been tested for a year and the binary tests in place 
#  are failing because the infrastructure has changed. For now I have disabled openGL
#  testing but the way to turn it on is to specify --enable-openGL
#
#########################################################################################
if test "x$ROSE_TEST_BUILD_STYLE" = "xmake/check/install-full" ; then
  CONFIGURE_FLAGS="\
	${CONFIGURE_FLAGS} \
	--with-qt=${ROSE_TEST_QT_PATH} \
	--with-roseQt \
	--with-sqlite3=${ROSE_TEST_SQLITE_PATH}"

  ########################################################################################
  #  OpenGL
  #
  #  tps : 11/12/10 : Admins are installing openGL on hudson machines. Enabled openGL thereafter. Should pass.
  #  tps : It seems opengl is not properly installed on the hudson-rose node. Skip the test on this node for now.
  #######################################################################################
  if test \! \( "$MACHINE" = "i686" -o \
              "$machine_name" = "hudson-rose.llnl.gov" -o \
              "$machine_name" = "hudson-rose-07.llnl.gov" -o \
              "$machine_name" = "hudson-rose-08.llnl.gov" -o \
              "$machine_name" = "hudson-rose-13.llnl.gov" -o \
              "$machine_name" = "hudson-rose-14.llnl.gov" -o \
              "$machine_name" = "hudson-rose-15.llnl.gov" -o \
              "$machine_name" = "hudson-rose-16.llnl.gov" \)
  then
    echo "Skipping OpenGL..."
    # admins are troubleshooting the libGL.la
    #CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --enable-rose-openGL"
  fi
  #######################################################################################
  #  PCH
  #
  #  tps : 11/12/10 - OpenGL is not installed on all nodes yet. 
  #######################################################################################
  CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-pch  "

  #######################################################################################
  #  RTED
  #
  #  tps : 11/15/10 - RTED does not work for gcc 4.3.2 and 4.4.1 . This is not a problem of
  #  our implementation but rather a problem with the test suite. For instance we get the 
  #  following error: C_G_4_3_a_d.cpp:48: error: 'cout' was not declared in this scope
  #######################################################################################
  if test \! \( "x$ROSE_TEST_GCC_VERSION" = "x4.3.2" -o \
                "x$ROSE_TEST_GCC_VERSION" = "x4.4.1" \)
  then
    CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-rted=${ROSE_TEST_RTED_PATH}"
  fi

fi

#######################################################################################
# OpenMP GOMP 
#   Only when on 64-bit Linux and gcc 4.4.1 is used.
#  Liao : 3/22/11 - Link with GOMP and run OpenMP tests
#######################################################################################
if test "x$ROSE_TEST_GCC_VERSION" = "x4.4.1" ; then
  if test "x$OS_MACHINE_LABEL" = "xamd64-linux" ; then
    if [ -a /usr/apps/gcc/4.4.1/lib64/libgomp.a ]; then
      CONFIGURE_FLAGS="${CONFIGURE_FLAGS} --with-gomp_omp_runtime_library=/usr/apps/gcc/4.4.1/lib64"
    fi
  fi
fi

#########################################################################################
#
##
   dumpHudsonEnvironment "${LOG_LOCATION}/HudsonEnvironment-before-tests.log"
##
#
#########################################################################################

set -ex

#########################################################################################
#
#  ROSE/make
#
#########################################################################################



case "$ROSE_TEST_BUILD_STEP" in
"build")

	#########################################################################################
	#
	#  ROSE/build
	#
	#########################################################################################
	printBannerToStartStep "build"
	build_start_time="$(date +%s)"

	./build

	printBannerToEndStep "build" $build_start_time

        SOURCE_TREE=`pwd`

	if test -e ROSE-install ; then 
	  chmod -R u+xw ROSE-install
	fi
	rm -rf ROSE-install
	mkdir ROSE-install
	CONFIGURE_PREFIX_DIR=`pwd`/ROSE-install

	if test -e ROSE-build ; then 
	  chmod -R u+xw ROSE-build
	fi
	rm -rf ROSE-build
	mkdir ROSE-build

	cd ROSE-build

	#########################################################################################
	#
	#  ROSE/configure
	#
	#########################################################################################
	printBannerToStartStep "configure"
	configure_start_time="$(date +%s)"

	${SOURCE_TREE}/configure --prefix=${CONFIGURE_PREFIX_DIR} ${CONFIGURE_FLAGS}

	printBannerToEndStep "configure" $configure_start_time

    ################################################################################
    # MAKE
    #
    runBuildStep make

 ;;

"analyze")

    # Make sure the ROSE-Insure++ build tree exists
    set +e
		ssh hudson-rose@hudson-rose-23 test -d ${ROSE_INSURE_BUILD_TREE}
		if [ $? -ne 0 ] ; then
			echo "Error: no build tree found at hudson-rose@hudson-rose-23:${ROSE_INSURE_BUILD_TREE}"
			exit 1
		fi
    set -e

    # TOO (4/23/2011): Use the same Insure++ ROSE build tree that was created during test-insure-build
    # TODO: use rsync instead to make it faster
    # TODO: if test-insure-build is run again, the build tree won't be valid since scp would be corrupt.
    rm -rf ROSE-build
    
    # We need to copy the ROSE-Insure++ build tree to the other analysis node
    if test "x$machine_name" = "xhudson-rose-20.llnl.gov" ; then
      workspace=`echo $ROSE_INSURE_BUILD_TREE | sed 's/ROSE-build//;s/hudson-rose-23//'`
      echo ${workspace}
      if test "x$workspace" = "x" -o "x$workspace" = "x\/" ; then
        echo "$workspace is invalid and could cause problems when issuing 'rm -rf' on it"
        exit 1
      fi
      rm -rf ${workspace} && mkdir -p ${workspace}
      cd ${workspace}
      # Need the source Makefile.am's
      #scp -r hudson-rose@hudson-rose-23:${workspace}/hudson-rose-23 .
      rsync -avz --exclude=".git" hudson-rose@hudson-rose-23:${workspace}/hudson-rose-23 .  
	  [ $? -ne 0 ] && echo "Error code: $?"
      cd hudson-rose-23
    else
      rsync -avz --exclude=".git" ${ROSE_INSURE_BUILD_TREE} . 
	  [ $? -ne 0 ] && echo "$?"
      #scp -r hudson-rose@hudson-rose-23:${ROSE_INSURE_BUILD_TREE} .
    fi

    cd ROSE-build

    if test ! -f Makefile ; then
      echo "ERROR: '${ROSE_INSURE_BUILD_TREE}' doesn't seem to be a valid ROSE build tree"
      exit 1;
    fi
 

    ################################################################################
    # MAKE CHECK
    #
    printBannerToStartStep "analyze ${ROSE_TEST_BUILD_DIRECTORY}"
    analyze_start_time="$(date +%s)"

    if test ! -d ${ROSE_TEST_BUILD_DIRECTORY}; then
      echo "ERROR: '${ROSE_TEST_BUILD_DIRECTORY}' doesn't seem to be a valid directory within ROSE"
      exit 1;
    fi

    BUILD_TARGET=check
    if test "$ROSE_TEST_BUILD_DIRECTORY" = "tests/CompileTests/Fortran_tests" ; then
      BUILD_TARGET=tests
    elif test "$ROSE_TEST_BUILD_DIRECTORY" = "tests/roseTests/astFileIOTests" ; then
      # TOO (5/6/2011): Just testing how long this would take
      BUILD_TARGET=check
    fi

  # DQ (4/30/2011): For the Fortran work run it is serial since it appears to be a problem to run in parallel.
  # DQ (5/1/2011): The failure mode we were seeing for Fortran can happen anytime Insure++ is run in parallel, 
  # so we have to always run our Insure++ tests in serial to avoid errors. Set the number of processors to be
  # used for the Insure++ testing to be "1".
  # DQ (5/3/2011): Using new information from support@parasoft (using "%p" instead of "%p" in generated file 
  # names) we can retry running this in parallel.
    NUM_PROCESS=16

    make ${BUILD_TARGET} -j${NUM_PROCESS} -C ${ROSE_TEST_BUILD_DIRECTORY}
    if [ ${PIPESTATUS[0]} -ne 0 -o $? -ne 0 ]  ; then
       printBannerToEndStep "[ERROR] analyze ${ROSE_TEST_BUILD_DIRECTORY}" $analyze_start_time
       exit 3
    fi

    printBannerToEndStep "analyze ${ROSE_TEST_BUILD_DIRECTORY}" $analyze_start_time

 ;;

*)
   echo "ERROR: unrecognized build step = $ROSE_TEST_BUILD_STEP"
   exit 1;
 ;;
esac

####################################################################################
# SUMMARY 
#
#########################################################################################
#
##
set +x
   cd $TOP_LEVEL_ROSE_DIRECTORY

   dumpHudsonEnvironment "${LOG_LOCATION}/HudsonEnvironment-after-tests.log"

   printBannerWithDate

   printBannerToEndStep \
	"ROSE/scripts/hudson/runInsureOnRose" \
	$hudson_start_time_seconds
set -x
##
#
#########################################################################################
