# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

# Makefile include to support QMTest.
srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = README $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs \
	$(top_srcdir)/config/QMTest_makefile.inc

# DQ (4/10/2011): If it is not gfortran 4.5, then add this test code (these fail syntax checking with 4.5).
@ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@am__append_1 = \
@ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@     test2010_35.f90 \
@ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@     test2011_Rice_funcdecl-4.f90

@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@am__append_2 = test2007_263.f90

# DQ (2/1/2011): These test codes will not pass the initial syntax checking with the GNU gfortran version 4.4.x compiler.
#  F90_TESTCODES_REQUIRED_TO_PASS += test2010_164.f90 test2011_37.f90 
@ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@am__append_3 = \
@ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@     test2010_164.f90 


# DQ (4/10/2011): And if it is not gfortran 4.5, then add this test code.
@ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@@ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@am__append_4 = \
@ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@@ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@     test2011_37.f90 

subdir = tests/CompileTests/Fortran_tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/acmacros/upc.m4 \
	$(top_srcdir)/config/EDG.m4 $(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_python_devel.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determinte-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/mdl_have_opengl.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-cuda-opencl.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-i386.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-languages.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-rtedupc.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/support_POET.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
depcomp =
am__depfiles_maybe =
SOURCES =
DIST_SOURCES =
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE = @ALTERNATE_BACKEND_C_CROSS_COMPILER_FALSE@
ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE = @ALTERNATE_BACKEND_C_CROSS_COMPILER_TRUE@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
AXXPXX_SPECIFIC_TESTS_FALSE = @AXXPXX_SPECIFIC_TESTS_FALSE@
AXXPXX_SPECIFIC_TESTS_TRUE = @AXXPXX_SPECIFIC_TESTS_TRUE@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKEND_CXX_COMPILER = @BACKEND_CXX_COMPILER@
BACKEND_C_COMPILER = @BACKEND_C_COMPILER@
BACKEND_FORTRAN_COMPILER = @BACKEND_FORTRAN_COMPILER@
BACKEND_JAVA_COMPILER = @BACKEND_JAVA_COMPILER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BINARY_EDG_TARBALL_ENABLED_FALSE = @BINARY_EDG_TARBALL_ENABLED_FALSE@
BINARY_EDG_TARBALL_ENABLED_TRUE = @BINARY_EDG_TARBALL_ENABLED_TRUE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CANDL_PATH = @CANDL_PATH@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CFLAGS32 = @CFLAGS32@
CLASSPATH = @CLASSPATH@
CLOOG_PATH = @CLOOG_PATH@
CONVENIENCE_LTDL_FALSE = @CONVENIENCE_LTDL_FALSE@
CONVENIENCE_LTDL_TRUE = @CONVENIENCE_LTDL_TRUE@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOT_TO_GML_TRANSLATOR_FALSE = @DOT_TO_GML_TRANSLATOR_FALSE@
DOT_TO_GML_TRANSLATOR_TRUE = @DOT_TO_GML_TRANSLATOR_TRUE@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DWARF_INCLUDE = @DWARF_INCLUDE@
DWARF_LINK = @DWARF_LINK@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_I386_FALSE = @ENABLE_I386_FALSE@
ENABLE_I386_TRUE = @ENABLE_I386_TRUE@
ENABLE_JAVAPORT_FALSE = @ENABLE_JAVAPORT_FALSE@
ENABLE_JAVAPORT_TRUE = @ENABLE_JAVAPORT_TRUE@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAS_LIBRARY_CURL_FALSE = @HAS_LIBRARY_CURL_FALSE@
HAS_LIBRARY_CURL_TRUE = @HAS_LIBRARY_CURL_TRUE@
HAVE_LIBYICES_FALSE = @HAVE_LIBYICES_FALSE@
HAVE_LIBYICES_TRUE = @HAVE_LIBYICES_TRUE@
HAVE_YICES_FALSE = @HAVE_YICES_FALSE@
HAVE_YICES_TRUE = @HAVE_YICES_TRUE@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_LTDL_FALSE = @INSTALL_LTDL_FALSE@
INSTALL_LTDL_TRUE = @INSTALL_LTDL_TRUE@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_PATH = @JAVA_PATH@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@ --quiet
LN_S = @LN_S@
LTDLINCL = @LTDLINCL@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MOC = @MOC@
MPICXX = @MPICXX@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
OBJ = @OBJ@
OBJEXT = @OBJEXT@
OLD_COMPILER_VERSION_FALSE = @OLD_COMPILER_VERSION_FALSE@
OLD_COMPILER_VERSION_TRUE = @OLD_COMPILER_VERSION_TRUE@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OS_32BIT_FALSE = @OS_32BIT_FALSE@
OS_32BIT_TRUE = @OS_32BIT_TRUE@
OS_64BIT_FALSE = @OS_64BIT_FALSE@
OS_64BIT_TRUE = @OS_64BIT_TRUE@
OS_LINUX_FALSE = @OS_LINUX_FALSE@
OS_LINUX_TRUE = @OS_LINUX_TRUE@
OS_MACOSX_FALSE = @OS_MACOSX_FALSE@
OS_MACOSX_TRUE = @OS_MACOSX_TRUE@
OS_MINGW_FALSE = @OS_MINGW_FALSE@
OS_MINGW_TRUE = @OS_MINGW_TRUE@
OS_MSDOS_FALSE = @OS_MSDOS_FALSE@
OS_MSDOS_TRUE = @OS_MSDOS_TRUE@
OS_VENDOR_APPLE_FALSE = @OS_VENDOR_APPLE_FALSE@
OS_VENDOR_APPLE_TRUE = @OS_VENDOR_APPLE_TRUE@
OS_VENDOR_CENTOS_FALSE = @OS_VENDOR_CENTOS_FALSE@
OS_VENDOR_CENTOS_TRUE = @OS_VENDOR_CENTOS_TRUE@
OS_VENDOR_DEBIAN_FALSE = @OS_VENDOR_DEBIAN_FALSE@
OS_VENDOR_DEBIAN_TRUE = @OS_VENDOR_DEBIAN_TRUE@
OS_VENDOR_REDHAT_32BIT_FALSE = @OS_VENDOR_REDHAT_32BIT_FALSE@
OS_VENDOR_REDHAT_32BIT_TRUE = @OS_VENDOR_REDHAT_32BIT_TRUE@
OS_VENDOR_REDHAT_FALSE = @OS_VENDOR_REDHAT_FALSE@
OS_VENDOR_REDHAT_TRUE = @OS_VENDOR_REDHAT_TRUE@
OS_VENDOR_UBUNTU_FALSE = @OS_VENDOR_UBUNTU_FALSE@
OS_VENDOR_UBUNTU_TRUE = @OS_VENDOR_UBUNTU_TRUE@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
POET_INCL = @POET_INCL@
POET_LIB = @POET_LIB@
PPL_PATH = @PPL_PATH@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
PYTHON = @PYTHON@
PYTHON_CPPFLAGS = @PYTHON_CPPFLAGS@
PYTHON_EXTRA_LDFLAGS = @PYTHON_EXTRA_LDFLAGS@
PYTHON_EXTRA_LIBS = @PYTHON_EXTRA_LIBS@
PYTHON_LDFLAGS = @PYTHON_LDFLAGS@
PYTHON_SITE_PKG = @PYTHON_SITE_PKG@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QROSE_USE_MINGW32_FALSE = @QROSE_USE_MINGW32_FALSE@
QROSE_USE_MINGW32_TRUE = @QROSE_USE_MINGW32_TRUE@
QROSE_USE_WINDOWS_FALSE = @QROSE_USE_WINDOWS_FALSE@
QROSE_USE_WINDOWS_TRUE = @QROSE_USE_WINDOWS_TRUE@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_FALSE = @ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_FALSE@
ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_TRUE = @ROSE_BUILD_EDG_WITH_CUDA_SUPPORT_TRUE@
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_FALSE = @ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_FALSE@
ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_TRUE = @ROSE_BUILD_EDG_WITH_OPENCL_SUPPORT_TRUE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OS_IS_CYGWIN_FALSE = @ROSE_BUILD_OS_IS_CYGWIN_FALSE@
ROSE_BUILD_OS_IS_CYGWIN_TRUE = @ROSE_BUILD_OS_IS_CYGWIN_TRUE@
ROSE_BUILD_OS_IS_OSX_FALSE = @ROSE_BUILD_OS_IS_OSX_FALSE@
ROSE_BUILD_OS_IS_OSX_TRUE = @ROSE_BUILD_OS_IS_OSX_TRUE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_PYTHON_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_ROSEHPCT_FALSE = @ROSE_BUILD_ROSEHPCT_FALSE@
ROSE_BUILD_ROSEHPCT_TRUE = @ROSE_BUILD_ROSEHPCT_TRUE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HAS_EDG_SOURCE_FALSE = @ROSE_HAS_EDG_SOURCE_FALSE@
ROSE_HAS_EDG_SOURCE_TRUE = @ROSE_HAS_EDG_SOURCE_TRUE@
ROSE_HOME = @ROSE_HOME@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_MPI_FALSE = @ROSE_MPI_FALSE@
ROSE_MPI_TRUE = @ROSE_MPI_TRUE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_CONTAINS_JAVA_FILE_FALSE = @ROSE_OFP_CONTAINS_JAVA_FILE_FALSE@
ROSE_OFP_CONTAINS_JAVA_FILE_TRUE = @ROSE_OFP_CONTAINS_JAVA_FILE_TRUE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_PCH_FALSE = @ROSE_PCH_FALSE@
ROSE_PCH_TRUE = @ROSE_PCH_TRUE@
ROSE_PS2PDF_PATH = @ROSE_PS2PDF_PATH@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_ASSEMBLY_SEMANTICS_FALSE = @ROSE_USE_ASSEMBLY_SEMANTICS_FALSE@
ROSE_USE_ASSEMBLY_SEMANTICS_TRUE = @ROSE_USE_ASSEMBLY_SEMANTICS_TRUE@
ROSE_USE_BDDBDDB_FALSE = @ROSE_USE_BDDBDDB_FALSE@
ROSE_USE_BDDBDDB_TRUE = @ROSE_USE_BDDBDDB_TRUE@
ROSE_USE_BINARYCONTEXTLOOKUP_FALSE = @ROSE_USE_BINARYCONTEXTLOOKUP_FALSE@
ROSE_USE_BINARYCONTEXTLOOKUP_TRUE = @ROSE_USE_BINARYCONTEXTLOOKUP_TRUE@
ROSE_USE_BOOST_WAVE_FALSE = @ROSE_USE_BOOST_WAVE_FALSE@
ROSE_USE_BOOST_WAVE_TRUE = @ROSE_USE_BOOST_WAVE_TRUE@
ROSE_USE_CANDL = @ROSE_USE_CANDL@
ROSE_USE_CANDL_FALSE = @ROSE_USE_CANDL_FALSE@
ROSE_USE_CANDL_TRUE = @ROSE_USE_CANDL_TRUE@
ROSE_USE_CLOOG = @ROSE_USE_CLOOG@
ROSE_USE_CLOOG_FALSE = @ROSE_USE_CLOOG_FALSE@
ROSE_USE_CLOOG_TRUE = @ROSE_USE_CLOOG_TRUE@
ROSE_USE_CUDA_SUPPORT = @ROSE_USE_CUDA_SUPPORT@
ROSE_USE_CUDA_SUPPORT_FALSE = @ROSE_USE_CUDA_SUPPORT_FALSE@
ROSE_USE_CUDA_SUPPORT_TRUE = @ROSE_USE_CUDA_SUPPORT_TRUE@
ROSE_USE_DWARF_FALSE = @ROSE_USE_DWARF_FALSE@
ROSE_USE_DWARF_TRUE = @ROSE_USE_DWARF_TRUE@
ROSE_USE_EDG_VERSION_4_3_FALSE = @ROSE_USE_EDG_VERSION_4_3_FALSE@
ROSE_USE_EDG_VERSION_4_3_TRUE = @ROSE_USE_EDG_VERSION_4_3_TRUE@
ROSE_USE_EDG_VERSION_4_FALSE = @ROSE_USE_EDG_VERSION_4_FALSE@
ROSE_USE_EDG_VERSION_4_TRUE = @ROSE_USE_EDG_VERSION_4_TRUE@
ROSE_USE_ETHER_FALSE = @ROSE_USE_ETHER_FALSE@
ROSE_USE_ETHER_TRUE = @ROSE_USE_ETHER_TRUE@
ROSE_USE_GCC_OMP_FALSE = @ROSE_USE_GCC_OMP_FALSE@
ROSE_USE_GCC_OMP_TRUE = @ROSE_USE_GCC_OMP_TRUE@
ROSE_USE_GRAPHVIZ_DOT_FALSE = @ROSE_USE_GRAPHVIZ_DOT_FALSE@
ROSE_USE_GRAPHVIZ_DOT_TRUE = @ROSE_USE_GRAPHVIZ_DOT_TRUE@
ROSE_USE_IDA_FALSE = @ROSE_USE_IDA_FALSE@
ROSE_USE_IDA_TRUE = @ROSE_USE_IDA_TRUE@
ROSE_USE_INDENT_FALSE = @ROSE_USE_INDENT_FALSE@
ROSE_USE_INDENT_TRUE = @ROSE_USE_INDENT_TRUE@
ROSE_USE_INSURE_FALSE = @ROSE_USE_INSURE_FALSE@
ROSE_USE_INSURE_TRUE = @ROSE_USE_INSURE_TRUE@
ROSE_USE_INTEL_PIN_FALSE = @ROSE_USE_INTEL_PIN_FALSE@
ROSE_USE_INTEL_PIN_TRUE = @ROSE_USE_INTEL_PIN_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE@
ROSE_USE_LIBFFI_FALSE = @ROSE_USE_LIBFFI_FALSE@
ROSE_USE_LIBFFI_TRUE = @ROSE_USE_LIBFFI_TRUE@
ROSE_USE_LLVM_FALSE = @ROSE_USE_LLVM_FALSE@
ROSE_USE_LLVM_TRUE = @ROSE_USE_LLVM_TRUE@
ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE = @ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE@
ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE = @ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE@
ROSE_USE_MAPLE_FALSE = @ROSE_USE_MAPLE_FALSE@
ROSE_USE_MAPLE_TRUE = @ROSE_USE_MAPLE_TRUE@
ROSE_USE_MYSQL_FALSE = @ROSE_USE_MYSQL_FALSE@
ROSE_USE_MYSQL_TRUE = @ROSE_USE_MYSQL_TRUE@
ROSE_USE_NEW_EDG_INTERFACE_FALSE = @ROSE_USE_NEW_EDG_INTERFACE_FALSE@
ROSE_USE_NEW_EDG_INTERFACE_TRUE = @ROSE_USE_NEW_EDG_INTERFACE_TRUE@
ROSE_USE_OBJDUMP_FALSE = @ROSE_USE_OBJDUMP_FALSE@
ROSE_USE_OBJDUMP_TRUE = @ROSE_USE_OBJDUMP_TRUE@
ROSE_USE_OMNI_OPENMP_FALSE = @ROSE_USE_OMNI_OPENMP_FALSE@
ROSE_USE_OMNI_OPENMP_TRUE = @ROSE_USE_OMNI_OPENMP_TRUE@
ROSE_USE_OPENCL_SUPPORT = @ROSE_USE_OPENCL_SUPPORT@
ROSE_USE_OPENCL_SUPPORT_FALSE = @ROSE_USE_OPENCL_SUPPORT_FALSE@
ROSE_USE_OPENCL_SUPPORT_TRUE = @ROSE_USE_OPENCL_SUPPORT_TRUE@
ROSE_USE_OPENGL_FALSE = @ROSE_USE_OPENGL_FALSE@
ROSE_USE_OPENGL_TRUE = @ROSE_USE_OPENGL_TRUE@
ROSE_USE_PHP_FALSE = @ROSE_USE_PHP_FALSE@
ROSE_USE_PHP_TRUE = @ROSE_USE_PHP_TRUE@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_PPL_FALSE = @ROSE_USE_PPL_FALSE@
ROSE_USE_PPL_TRUE = @ROSE_USE_PPL_TRUE@
ROSE_USE_PS2PDF_FALSE = @ROSE_USE_PS2PDF_FALSE@
ROSE_USE_PS2PDF_TRUE = @ROSE_USE_PS2PDF_TRUE@
ROSE_USE_PYTHON_FALSE = @ROSE_USE_PYTHON_FALSE@
ROSE_USE_PYTHON_TRUE = @ROSE_USE_PYTHON_TRUE@
ROSE_USE_QROSE_FALSE = @ROSE_USE_QROSE_FALSE@
ROSE_USE_QROSE_TRUE = @ROSE_USE_QROSE_TRUE@
ROSE_USE_QT_FALSE = @ROSE_USE_QT_FALSE@
ROSE_USE_QT_TRUE = @ROSE_USE_QT_TRUE@
ROSE_USE_RTED_FALSE = @ROSE_USE_RTED_FALSE@
ROSE_USE_RTED_TRUE = @ROSE_USE_RTED_TRUE@
ROSE_USE_SAT_FALSE = @ROSE_USE_SAT_FALSE@
ROSE_USE_SAT_TRUE = @ROSE_USE_SAT_TRUE@
ROSE_USE_SCOPLIB = @ROSE_USE_SCOPLIB@
ROSE_USE_SCOPLIB_FALSE = @ROSE_USE_SCOPLIB_FALSE@
ROSE_USE_SCOPLIB_TRUE = @ROSE_USE_SCOPLIB_TRUE@
ROSE_USE_SMALLER_GENERATED_FILES_FALSE = @ROSE_USE_SMALLER_GENERATED_FILES_FALSE@
ROSE_USE_SMALLER_GENERATED_FILES_TRUE = @ROSE_USE_SMALLER_GENERATED_FILES_TRUE@
ROSE_USE_SQLITE_DATABASE_FALSE = @ROSE_USE_SQLITE_DATABASE_FALSE@
ROSE_USE_SQLITE_DATABASE_TRUE = @ROSE_USE_SQLITE_DATABASE_TRUE@
ROSE_USE_SSL_SUPPORT_FALSE = @ROSE_USE_SSL_SUPPORT_FALSE@
ROSE_USE_SSL_SUPPORT_TRUE = @ROSE_USE_SSL_SUPPORT_TRUE@
ROSE_USE_TCLSH_FALSE = @ROSE_USE_TCLSH_FALSE@
ROSE_USE_TCLSH_TRUE = @ROSE_USE_TCLSH_TRUE@
ROSE_USE_TEST_SMT_SOLVER_FALSE = @ROSE_USE_TEST_SMT_SOLVER_FALSE@
ROSE_USE_TEST_SMT_SOLVER_TRUE = @ROSE_USE_TEST_SMT_SOLVER_TRUE@
ROSE_USE_TRACE_ANALYSIS_FALSE = @ROSE_USE_TRACE_ANALYSIS_FALSE@
ROSE_USE_TRACE_ANALYSIS_TRUE = @ROSE_USE_TRACE_ANALYSIS_TRUE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE@
ROSE_USE_VISUALIZATION_FALSE = @ROSE_USE_VISUALIZATION_FALSE@
ROSE_USE_VISUALIZATION_TRUE = @ROSE_USE_VISUALIZATION_TRUE@
ROSE_USE_WGET_FALSE = @ROSE_USE_WGET_FALSE@
ROSE_USE_WGET_TRUE = @ROSE_USE_WGET_TRUE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@
ROSE_USE_XML_FALSE = @ROSE_USE_XML_FALSE@
ROSE_USE_XML_TRUE = @ROSE_USE_XML_TRUE@
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE = @ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_FALSE@
ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE = @ROSE_USING_ALTERNATE_BACKEND_CXX_COMPILER_TRUE@
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE = @ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_FALSE@
ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE = @ROSE_USING_ALTERNATE_BACKEND_C_COMPILER_TRUE@
ROSE_USING_BOOST_VERSION_1_35_FALSE = @ROSE_USING_BOOST_VERSION_1_35_FALSE@
ROSE_USING_BOOST_VERSION_1_35_TRUE = @ROSE_USING_BOOST_VERSION_1_35_TRUE@
ROSE_USING_BOOST_VERSION_1_36_FALSE = @ROSE_USING_BOOST_VERSION_1_36_FALSE@
ROSE_USING_BOOST_VERSION_1_36_TRUE = @ROSE_USING_BOOST_VERSION_1_36_TRUE@
ROSE_USING_BOOST_VERSION_1_37_FALSE = @ROSE_USING_BOOST_VERSION_1_37_FALSE@
ROSE_USING_BOOST_VERSION_1_37_TRUE = @ROSE_USING_BOOST_VERSION_1_37_TRUE@
ROSE_USING_BOOST_VERSION_1_38_FALSE = @ROSE_USING_BOOST_VERSION_1_38_FALSE@
ROSE_USING_BOOST_VERSION_1_38_TRUE = @ROSE_USING_BOOST_VERSION_1_38_TRUE@
ROSE_USING_BOOST_VERSION_1_39_FALSE = @ROSE_USING_BOOST_VERSION_1_39_FALSE@
ROSE_USING_BOOST_VERSION_1_39_TRUE = @ROSE_USING_BOOST_VERSION_1_39_TRUE@
ROSE_USING_BOOST_VERSION_1_40_FALSE = @ROSE_USING_BOOST_VERSION_1_40_FALSE@
ROSE_USING_BOOST_VERSION_1_40_TRUE = @ROSE_USING_BOOST_VERSION_1_40_TRUE@
ROSE_USING_BOOST_VERSION_1_41_FALSE = @ROSE_USING_BOOST_VERSION_1_41_FALSE@
ROSE_USING_BOOST_VERSION_1_41_TRUE = @ROSE_USING_BOOST_VERSION_1_41_TRUE@
ROSE_USING_BOOST_VERSION_1_42_FALSE = @ROSE_USING_BOOST_VERSION_1_42_FALSE@
ROSE_USING_BOOST_VERSION_1_42_TRUE = @ROSE_USING_BOOST_VERSION_1_42_TRUE@
ROSE_USING_BOOST_VERSION_1_43_FALSE = @ROSE_USING_BOOST_VERSION_1_43_FALSE@
ROSE_USING_BOOST_VERSION_1_43_TRUE = @ROSE_USING_BOOST_VERSION_1_43_TRUE@
ROSE_USING_BOOST_VERSION_1_44_FALSE = @ROSE_USING_BOOST_VERSION_1_44_FALSE@
ROSE_USING_BOOST_VERSION_1_44_TRUE = @ROSE_USING_BOOST_VERSION_1_44_TRUE@
ROSE_USING_BOOST_VERSION_1_45_FALSE = @ROSE_USING_BOOST_VERSION_1_45_FALSE@
ROSE_USING_BOOST_VERSION_1_45_TRUE = @ROSE_USING_BOOST_VERSION_1_45_TRUE@
ROSE_USING_BOOST_VERSION_1_46_FALSE = @ROSE_USING_BOOST_VERSION_1_46_FALSE@
ROSE_USING_BOOST_VERSION_1_46_TRUE = @ROSE_USING_BOOST_VERSION_1_46_TRUE@
ROSE_USING_BOOST_VERSION_1_47_FALSE = @ROSE_USING_BOOST_VERSION_1_47_FALSE@
ROSE_USING_BOOST_VERSION_1_47_TRUE = @ROSE_USING_BOOST_VERSION_1_47_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_0_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_0_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_0_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_1_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_1_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_1_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_1_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_2_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_2_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_2_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_2_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_4_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_4_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_4_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_4_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_5_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_5_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_5_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_5_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_6_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_6_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_6_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_6_TRUE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE@
ROSE_USING_ROSE_ANALYSIS_FALSE = @ROSE_USING_ROSE_ANALYSIS_FALSE@
ROSE_USING_ROSE_ANALYSIS_TRUE = @ROSE_USING_ROSE_ANALYSIS_TRUE@
ROSE_USING_ROSE_AST_FILE_IO_FALSE = @ROSE_USING_ROSE_AST_FILE_IO_FALSE@
ROSE_USING_ROSE_AST_FILE_IO_TRUE = @ROSE_USING_ROSE_AST_FILE_IO_TRUE@
ROSE_USING_ROSE_CODE_GENERATION_FALSE = @ROSE_USING_ROSE_CODE_GENERATION_FALSE@
ROSE_USING_ROSE_CODE_GENERATION_TRUE = @ROSE_USING_ROSE_CODE_GENERATION_TRUE@
ROSE_USING_ROSE_FALSE = @ROSE_USING_ROSE_FALSE@
ROSE_USING_ROSE_TRANSLATOR_FALSE = @ROSE_USING_ROSE_TRANSLATOR_FALSE@
ROSE_USING_ROSE_TRANSLATOR_TRUE = @ROSE_USING_ROSE_TRANSLATOR_TRUE@
ROSE_USING_ROSE_TRUE = @ROSE_USING_ROSE_TRUE@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_ROSEQT_FALSE = @ROSE_WITH_ROSEQT_FALSE@
ROSE_WITH_ROSEQT_TRUE = @ROSE_WITH_ROSEQT_TRUE@
ROSE_WITH_UPC_FALSE = @ROSE_WITH_UPC_FALSE@
ROSE_WITH_UPC_TRUE = @ROSE_WITH_UPC_TRUE@
RT_LIBS = @RT_LIBS@
SCOPLIB_PATH = @SCOPLIB_PATH@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
UPC = @UPC@
UPCFLAGS = @UPCFLAGS@
USE_BINARY_ANALYSIS_TESTS_FALSE = @USE_BINARY_ANALYSIS_TESTS_FALSE@
USE_BINARY_ANALYSIS_TESTS_TRUE = @USE_BINARY_ANALYSIS_TESTS_TRUE@
USE_GCJ_FALSE = @USE_GCJ_FALSE@
USE_GCJ_TRUE = @USE_GCJ_TRUE@
USE_HASKELL_FALSE = @USE_HASKELL_FALSE@
USE_HASKELL_TRUE = @USE_HASKELL_TRUE@
USE_ROSE_GLUT_SUPPORT_FALSE = @USE_ROSE_GLUT_SUPPORT_FALSE@
USE_ROSE_GLUT_SUPPORT_TRUE = @USE_ROSE_GLUT_SUPPORT_TRUE@
USE_ROSE_IN_BUILD_TREE_VAR_FALSE = @USE_ROSE_IN_BUILD_TREE_VAR_FALSE@
USE_ROSE_IN_BUILD_TREE_VAR_TRUE = @USE_ROSE_IN_BUILD_TREE_VAR_TRUE@
USE_VALGRIND_FALSE = @USE_VALGRIND_FALSE@
USE_VALGRIND_TRUE = @USE_VALGRIND_TRUE@
USING_GCC_3_4_4_BACKEND_COMPILER_FALSE = @USING_GCC_3_4_4_BACKEND_COMPILER_FALSE@
USING_GCC_3_4_4_BACKEND_COMPILER_TRUE = @USING_GCC_3_4_4_BACKEND_COMPILER_TRUE@
USING_GCC_4_0_4_BACKEND_COMPILER_FALSE = @USING_GCC_4_0_4_BACKEND_COMPILER_FALSE@
USING_GCC_4_0_4_BACKEND_COMPILER_TRUE = @USING_GCC_4_0_4_BACKEND_COMPILER_TRUE@
USING_GNU_COMPILER_FALSE = @USING_GNU_COMPILER_FALSE@
USING_GNU_COMPILER_TRUE = @USING_GNU_COMPILER_TRUE@
USING_INTEL_COMPILER_FALSE = @USING_INTEL_COMPILER_FALSE@
USING_INTEL_COMPILER_TRUE = @USING_INTEL_COMPILER_TRUE@
USING_WINDOWS = @USING_WINDOWS@
USING_XTENSA_BACKEND_COMPILER_FALSE = @USING_XTENSA_BACKEND_COMPILER_FALSE@
USING_XTENSA_BACKEND_COMPILER_TRUE = @USING_XTENSA_BACKEND_COMPILER_TRUE@
VALGRIND_BINARY = @VALGRIND_BINARY@
VERSION = @VERSION@
WITH_GOMP_OPENMP_LIB_FALSE = @WITH_GOMP_OPENMP_LIB_FALSE@
WITH_GOMP_OPENMP_LIB_TRUE = @WITH_GOMP_OPENMP_LIB_TRUE@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
X_CFLAGS = @X_CFLAGS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_LIBS = @X_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
YACC = @YACC@
YICES = @YICES@
YICES_PREFIX = @YICES_PREFIX@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_ROSE_LSB_RELEASE = @ac_ct_ROSE_LSB_RELEASE@
ac_ct_ROSE_OBJDUMP_PATH = @ac_ct_ROSE_OBJDUMP_PATH@
ac_ct_ROSE_PS2PDF_PATH = @ac_ct_ROSE_PS2PDF_PATH@
ac_ct_ROSE_WGET_PATH = @ac_ct_ROSE_WGET_PATH@
ac_ct_STRIP = @ac_ct_STRIP@
ac_ct_UPC = @ac_ct_UPC@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
configure_date = @configure_date@
datadir = @datadir@
dwarf_path = @dwarf_path@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localstatedir = @localstatedir@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
php_path = @php_path@
poet_dir = @poet_dir@
prefix = @prefix@
program_transform_name = @program_transform_name@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
rted_path = @rted_path@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
subdirs = @subdirs@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_pwd = @top_pwd@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@YICES_PREFIX@/include
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @YICES_PREFIX@/lib/libyices.a
GLUT_LIBS = ${glut_path}

# ROSE-DWARF libdwarf support
@ROSE_USE_DWARF_TRUE@ROSE_DWARF_INCLUDES = -I$(dwarf_path)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(dwarf_path) -L$(dwarf_path) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(dwarf_path)/libdwarf.a -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @DWARF_LINK@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now
#ROSE_LLVM_LIB_WITH_PATH = $(llvm_path)/lib/libLLVMXCoreCodeGen.a $(llvm_path)/lib/libLLVMXCoreAsmPrinter.a $(llvm_path)/lib/libLLVMXCoreInfo.a $(llvm_path)/lib/libLLVMSystemZCodeGen.a $(llvm_path)/lib/libLLVMSystemZAsmPrinter.a $(llvm_path)/lib/libLLVMSystemZInfo.a $(llvm_path)/lib/libLLVMSparcCodeGen.a $(llvm_path)/lib/libLLVMSparcAsmPrinter.a $(llvm_path)/lib/libLLVMSparcInfo.a $(llvm_path)/lib/libLLVMPowerPCCodeGen.a $(llvm_path)/lib/libLLVMPowerPCAsmPrinter.a $(llvm_path)/lib/libLLVMPowerPCInfo.a $(llvm_path)/lib/libLLVMpic16passes.a $(llvm_path)/lib/libLLVMPIC16AsmPrinter.a $(llvm_path)/lib/libLLVMPIC16CodeGen.a $(llvm_path)/lib/libLLVMPIC16Info.a $(llvm_path)/lib/libLLVMMSP430CodeGen.a $(llvm_path)/lib/libLLVMMSP430AsmPrinter.a $(llvm_path)/lib/libLLVMMSP430Info.a $(llvm_path)/lib/libLLVMMSIL.a $(llvm_path)/lib/libLLVMMSILInfo.a $(llvm_path)/lib/libLLVMMipsAsmPrinter.a $(llvm_path)/lib/libLLVMMipsCodeGen.a $(llvm_path)/lib/libLLVMMipsInfo.a $(llvm_path)/lib/libLLVMMBlazeAsmPrinter.a $(llvm_path)/lib/libLLVMMBlazeCodeGen.a $(llvm_path)/lib/libLLVMMBlazeInfo.a $(llvm_path)/lib/libLLVMLinker.a $(llvm_path)/lib/libLLVMipo.a $(llvm_path)/lib/libLLVMInterpreter.a $(llvm_path)/lib/libLLVMInstrumentation.a $(llvm_path)/lib/libLLVMJIT.a $(llvm_path)/lib/libLLVMExecutionEngine.a $(llvm_path)/lib/libLLVMCppBackend.a $(llvm_path)/lib/libLLVMCppBackendInfo.a $(llvm_path)/lib/libLLVMCellSPUCodeGen.a $(llvm_path)/lib/libLLVMCellSPUAsmPrinter.a $(llvm_path)/lib/libLLVMCellSPUInfo.a $(llvm_path)/lib/libLLVMCBackend.a $(llvm_path)/lib/libLLVMCBackendInfo.a $(llvm_path)/lib/libLLVMBlackfinCodeGen.a $(llvm_path)/lib/libLLVMBlackfinAsmPrinter.a $(llvm_path)/lib/libLLVMBlackfinInfo.a $(llvm_path)/lib/libLLVMBitWriter.a $(llvm_path)/lib/libLLVMX86Disassembler.a $(llvm_path)/lib/libLLVMX86AsmParser.a $(llvm_path)/lib/libLLVMX86AsmPrinter.a $(llvm_path)/lib/libLLVMX86CodeGen.a $(llvm_path)/lib/libLLVMX86Info.a $(llvm_path)/lib/libLLVMAsmParser.a $(llvm_path)/lib/libLLVMARMAsmParser.a $(llvm_path)/lib/libLLVMMCParser.a $(llvm_path)/lib/libLLVMARMAsmPrinter.a $(llvm_path)/lib/libLLVMARMCodeGen.a $(llvm_path)/lib/libLLVMARMInfo.a $(llvm_path)/lib/libLLVMArchive.a $(llvm_path)/lib/libLLVMBitReader.a $(llvm_path)/lib/libLLVMAlphaCodeGen.a $(llvm_path)/lib/libLLVMSelectionDAG.a $(llvm_path)/lib/libLLVMAlphaAsmPrinter.a $(llvm_path)/lib/libLLVMAsmPrinter.a $(llvm_path)/lib/libLLVMCodeGen.a $(llvm_path)/lib/libLLVMScalarOpts.a $(llvm_path)/lib/libLLVMInstCombine.a $(llvm_path)/lib/libLLVMTransformUtils.a $(llvm_path)/lib/libLLVMipa.a $(llvm_path)/lib/libLLVMAnalysis.a $(llvm_path)/lib/libLLVMTarget.a $(llvm_path)/lib/libLLVMMC.a $(llvm_path)/lib/libLLVMCore.a $(llvm_path)/lib/libLLVMAlphaInfo.a $(llvm_path)/lib/libLLVMSupport.a $(llvm_path)/lib/libLLVMSystem.a

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_USE_DWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm

# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
ROSE_INCLUDES = \
     $(ROSE_BOOST_PREINCLUDE_PATH) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/binaryAnalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/dataflowAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE)


# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)
ROSE_LIBS = $(top_builddir)/src/librose.la -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS)  $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Location of sample binary files (executables, libraries, etc) that serve as input to
# some of the binary analysis tests.
BINARY_SAMPLES = $(top_srcdir)/binaries/samples

# Test harness variables. See "rth_run.pl --help" for more info.
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl \
	srcdir=$(srcdir) top_srcdir=$(top_srcdir) \
	VALGRIND=$(VALGRIND) BINARY_SAMPLES=$(BINARY_SAMPLES)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
SUBDIRS = LANL_POP gfortranTestSuite

###########################################################################
# These are Fortran testcodes targeting aspects F66, F77, F90, F95, F2003 #
###########################################################################

# #######################
#      PASSING TESTS
# #######################
F90_TESTCODES_REQUIRED_TO_PASS = test2011_01.f90 test2011_02.f90 \
	test2011_04.f90 test2011_06.f90 test2011_07.f90 \
	test2007_01.f90 test2007_02.f90 test2007_03.f90 \
	test2007_04.f90 test2007_05.f90 test2007_06.f90 \
	test2007_07.f90 test2007_08.f90 test2007_09.f90 \
	test2007_10.f90 test2007_11.f90 test2007_12.f90 \
	test2007_13.f90 test2007_14.f90 test2007_15.f90 \
	test2007_16.f90 test2007_17.f90 test2007_19.f90 \
	test2007_20.f90 test2007_21.f90 test2007_22.f90 \
	test2007_23.f90 test2007_24.f90 test2007_25.f90 \
	test2007_26.f90 test2007_27.f90 test2007_28.f90 \
	test2007_29.f90 test2007_32.f90 test2007_33.f90 \
	test2007_34.f90 test2007_36.f90 test2007_38.f90 \
	test2007_39.f90 test2007_40.f90 test2007_48.f90 \
	test2007_49.f90 test2007_50.f90 test2007_51.f90 \
	test2007_52.f90 test2007_53.f90 test2007_54.f90 \
	test2007_55.f90 test2007_56.f90 test2007_57.f90 \
	test2007_58.f90 test2007_59.f90 test2007_60.f90 \
	test2007_61.f90 test2007_62.f90 test2007_63.f90 \
	test2007_64.f90 test2007_65.f90 test2007_66.f90 \
	test2007_67.f90 test2007_68.f90 test2007_69.f90 \
	test2007_71.f90 test2007_72.f90 test2007_73.f90 \
	test2007_74.f90 test2007_75.f90 test2007_76.f90 \
	test2007_77.f90 test2007_78.f90 test2007_79.f90 \
	test2007_80.f90 test2007_89.f90 test2007_90.f90 \
	test2007_91.f90 test2007_92.f90 test2007_93.f90 \
	test2007_94.f90 test2007_95.f90 test2007_96.f90 \
	test2007_97.f90 test2007_99.f90 test2007_100.f90 \
	test2007_101.f90 test2007_102.f90 test2007_103.f90 \
	test2007_104.f90 test2007_105.f90 test2007_106.f90 \
	test2007_109.f90 test2007_110.f90 test2007_111.f90 \
	test2007_117.f90 test2007_118.f90 test2007_119.f90 \
	test2007_121.f90 test2007_122.f90 test2007_126.f90 \
	test2007_127.f90 test2007_135.f90 test2007_136.f90 \
	test2007_137.f90 test2007_138.f90 test2007_139.f90 \
	test2007_140.f90 test2007_141.f90 test2007_143.f90 \
	test2007_149.f90 test2007_158.f90 test2007_159.f90 \
	test2007_160.f90 test2007_161.f90 test2007_168.f90 \
	test2007_169.f90 test2007_178.f90 test2007_179.f90 \
	test2007_181.f90 test2007_182.f90 test2007_190.f90 \
	test2007_219.f90 test2007_236.f90 test2007_238.f90 \
	test2007_239.f90 test2007_244.f90 test2007_248.f90 \
	test2007_249.f90 test2007_250.f90 test2007_262.f90 \
	test2010_01.f90 test2010_02.f90 test2010_15.f90 \
	test2010_16.f90 test2010_18.f90 test2010_20.f90 \
	test2010_23.f90 test2010_25.f90 test2010_28.f90 \
	test2010_32.f90 test2010_33.f90 test2010_34.f90 \
	test2010_37.f90 test2010_38.f90 test2010_40.f90 \
	test2010_41.f90 test2010_42.f90 test2010_44.f90 \
	test2010_45.f90 test2010_46.f90 test2010_47.f90 \
	test2010_49.f90 test2010_50.f90 test2010_59.f90 \
	test2010_60.f90 test2010_61.f90 test2010_62.f90 \
	test2010_63.f90 test2010_64.f90 test2010_111.f90 \
	test2010_112.f90 test2010_113.f90 test2010_114.f90 \
	test2010_115.f90 test2010_118.f90 test2010_120.f90 \
	test2010_121.f90 test2010_122.f90 test2010_123.f90 \
	test2010_124.f90 test2010_125.f90 test2010_127.f90 \
	test2010_128.f90 test2010_129.f90 test2010_132.f90 \
	test2010_133.f90 test2010_134.f90 test2010_135.f90 \
	test2010_136.f90 test2010_137.f90 test2010_138.f90 \
	test2010_139.f90 test2010_140.f90 test2010_141.f90 \
	test2010_142.f90 test2010_143.f90 test2010_144.f90 \
	test2010_150.f90 test2010_151.f90 test2010_152.f90 \
	test2010_153.f90 test2010_154.f90 test2010_155.f90 \
	test2010_156.f90 test2010_158.f90 test2010_159.f90 \
	test2010_160.f90 test2010_162.f90 test2010_163.f90 \
	test2010_165.f90 test2010_166.f90 test2010_167.f90 \
	test2010_168.f90 test2010_172.f90 test2010_173.f90 \
	test2010_174.f90 test2010_182.f90 test2010_183.f90 \
	test2010_184.f90 test2011_05.f90 test2011_08.f90 \
	test2011_09.f90 test2011_10.f90 test2011_12.f90 \
	test2011_13.f90 test2011_14.f90 test2011_15.f90 \
	test2011_16.f90 test2011_17.f90 test2011_19.f90 \
	test2011_20.f90 test2011_36.f90 test2011_39.f90 \
	test2011_40.f90 test2011_Rice_allocate-derived-type-scope.f90 \
	test2011_Rice_asterisk-length.f90 \
	test2011_Rice_attrs-dimension.f90 \
	test2011_Rice_caseSensitive.f90 \
	test2011_Rice_char-array-decl-asterisk.f90 \
	test2011_Rice_char-kind-decl.f90 \
	test2011_Rice_constructor-initializer.f90 \
	test2011_Rice_data-implied-do.f90 \
	test2011_Rice_derived-type-2d-component.f90 \
	test2011_Rice_derived-type-3d-component.f90 \
	test2011_Rice_derived-type-array.f90 test2011_Rice_elseif.f90 \
	test2011_Rice_empty-string-constant.f90 test2011_Rice_eq.f90 \
	test2011_Rice_explicit-shape1.f90 \
	test2011_Rice_explicit-shape2.f90 \
	test2011_Rice_forward-decl-func-type.f90 \
	test2011_Rice_forward-ref-derived-type.f90 \
	test2011_Rice_funcdecl-1.f90 \
	test2011_Rice_function-where-var-expected.f90 \
	test2011_Rice_ifConstruct.f90 test2011_Rice_ifStmt.f90 \
	test2011_Rice_interface.f90 test2011_Rice_if-stop.f90 \
	test2011_Rice_intent.f90 \
	test2011_Rice_io-implied-do-with-stride.f90 \
	test2011_Rice_keyword-arg-extra-paren-2.f90 \
	test2011_Rice_keyword-arg-extra-paren.f90 \
	test2011_Rice_lost-kindtype-1.f90 \
	test2011_Rice_lost-kindtype-2.f90 \
	test2011_Rice_multi-char-decl.f90 \
	test2011_Rice_pause-no-stop-code.f90 test2011_Rice_pointer.f90 \
	test2011_Rice_pointer-after-dimension.f90 \
	test2011_Rice_pointer-init.f90 \
	test2011_Rice_pointer-to-forward-ref-derived-type.f90 \
	test2011_Rice_public.f90 test2011_Rice_return-with-expr.f90 \
	test2011_Rice_singleton-array-constructor.f90 \
	test2011_Rice_stop-no-stop-code.f90 \
	test2011_Rice_vector-constructor-1.f90 \
	test2011_Rice_vector-constructor-2.f90 \
	test2011_Rice_vector-constructor-3.f90 \
	test2011_Rice_vector-constructor-4.f90 \
	test2011_Rice_write-no-output-item-list.f90 \
	test2011_Rice_wrong-func-type.f90 \
	test2011_Rice_wrong-func-type-2.f90 \
	test2011_Rice_wrong-func-type-3.f90 canonicalExample.f90 \
	$(am__append_1) $(am__append_2) $(am__append_3) \
	$(am__append_4)

# DQ (4/9/2011): Insure++ has identified problems with these tests, great news but I am not prepared to fix 
# them yet. Currently these fail for Insure++, they also report errors which will be valuable in identifing 
# the root cause of the problems that we have seen with the altrnative-return support in Fortran.
# But as a basis for continuted testing, we first isolate these tests to NOT be run when Insure++
# is in use so that we can focus on this in a later iteration after we have initial testing into place.
# I want to make sure that these are the only problem that cause Insure++ to fail, then we can re-enable 
# these tests and track down the problem.
# DQ (4/3/2011): The test2011_Rice_alternate-return-argument.f90 failes too frequently (not frequently 
# enough to reproduce the failure in a controled way, but frequently enough to hold back other progress
# in ROSE (e.g for other language and analysis support). I have forced this test to run where it appears
# to be reliable, but have skipped testing in on 4.1.x systems where it appears to be unreliable. The
# fault is not in the test but somewhere in ROSE (we expect), but it can't be reproduced so far in a 
# controled way. We are standing up more agressive static analysis and dynamic analysis testing in ROSE 
# which we hope will help address this issue.
# DQ (3/29/2011): Added test2011_Rice_alternate-return-argument.f90 to short list of test codes that
# appear to have a problem on 4.1.x version compilers.  Both of these codes implement the alternate 
# return but have been a problem on 4.1.x and maybe 4.3.x compilers (though might have less to do 
# with the gfortran versions than something else either in ROSE or in the JVM on these machines.
# The goal is to restrict these tests and see if the seamingly statistical failures on the Hudson
# machines stop, then we can expand the testing with this information.  Organizing the tests this 
# way will at least make sure that the tests are run, if only for one version of the compiler.
# DQ (2/13/2011): GNU gfortran 4.2 is a gnu configuration where I want to have test2010_161.f90 be tested.
# It has previously demonstrated a statistical failure on 4.1.2 and 4.3.2 (running it on 4.2 machines
# is an incremental step to getting it into more uniform testing, since I can't get it to fail locally).
# It also passes valgrind just fine, so this is a bit of a mystery at present.
# (4/19/2011): Removed problem tests from being tested in ROSE for now.
#if ROSE_USING_GFORTRAN_VERSION_4_2
#   F90_TESTCODES_REQUIRED_TO_PASS += \
#     test2010_161.f90 \
#     test2011_Rice_alternate-return-argument.f90 \
#     test2011_Rice_alt-return-call.f90
#endif

# DQ (3/29/2011): This is now passing the LLVM tests, so I will leave it alone and thus leave it in to run on all platforms.
# test2011_Rice_alternate-return-argument.f90

# DQ (3/29/2011): Since Rice is using the gfortran 4.4.x compiler we want to also have these tests 
# run there. This should simplify their testing, while avoiding the 4.1.x and 4.3.x compilers where 
# this has been a problem.  However, it is still not clear that this problem anything to do with the 
# gfortran version (even though it appears to corrolate perfectly).
# DQ (4/2/2011): Removed this test from use on GNU 4.4.x machines since it appears to fail there.
# We are standing up more agressive static analysis and dynamic analysis testing in ROSE which 
# we hope will help address this issue.
#  F90_TESTCODES_REQUIRED_TO_PASS += \
# test2010_161.f90 

# DQ (3/29/2011): This is now passing the LLVM tests, so I will leave it alone and thus leave it in to run on all platforms.
# test2011_Rice_alternate-return-argument.f90
F90_TESTCODES_REQUIRING_PREPROCESSOR_REQUIRED_TO_PASS = 
F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS = test2007_124.f \
	test2007_125.f test2007_128.f test2007_129.f test2007_132.f \
	test2007_145.f test2007_148.f test2007_150.f test2007_151.f \
	test2007_153.f test2007_154.f test2007_155.f test2007_156.f \
	test2007_157.f test2007_162.f test2007_163.f test2007_164.f \
	test2007_175.f test2007_183.f test2007_184.f test2007_185.f \
	test2007_186.f test2007_187.f test2007_188.f test2007_189.f \
	test2007_191.f test2007_192.f test2007_193.f test2007_194.f \
	test2007_195.f test2007_196.f test2007_197.f test2007_198.f \
	test2007_200.f test2007_201.f test2007_202.f test2007_204.f \
	test2007_205.f test2007_206.f test2007_207.f test2007_208.f \
	test2007_209.f test2007_211.f test2007_212.f test2007_213.f \
	test2007_214.f test2007_215.f test2007_216.f test2007_217.f \
	test2007_218.f test2007_220.f test2007_221.f test2007_222.f \
	test2007_223.f test2007_224.f test2007_226.f test2007_227.f \
	test2007_228.f test2007_229.f test2007_230.f test2007_231.f \
	test2007_232.f test2007_234.f test2007_242.f test2007_243.f \
	test2007_245.f test2007_246.f test2007_247.f test2007_251.f \
	test2007_253.f test2007_256.f test2007_258.f test2007_259.f \
	test2007_260.f test2007_261.f test2010_29.f test2010_30.f \
	test2010_68.f test2010_69.f \
	test2011_Rice_continuation-spits-token.f \
	test2011_Rice_initial-tab.f \
	$(OPENMP_TESTS_F77_TESTCODES_REQUIRED_TO_PASS)

# DQ (1/18/2011): Failing tests.
#     test2007_150.f 
#     test2007_209.f 
#     test2007_227.f 
#     test2007_232.f 

# DQ (1/20/2011): Failing tests.
#     test2007_227.f 
F03_TESTCODES_REQUIRED_TO_PASS = \
     test2007_30.f03 \
     test2007_31.f03 \
     test2007_35.f03 \
     test2007_37.f03 \
     test2007_41.f03 \
     test2007_42.f03 \
     test2007_43.f03 \
     test2007_44.f03 \
     test2007_45.f03 \
     test2007_47.f03 \
     test2007_98.f03 \
     test2007_112.f03 \
     test2007_113.f03 \
     test2007_114.f03 \
     test2007_115.f03 \
     test2007_116.f03 \
     test2007_120.f03 \
     test2007_123.f03 \
     test2007_130.f03 \
     test2007_133.f03 \
     test2007_134.f03 \
     test2007_174.f03 \
     test2007_176.f03 \
     test2010_176.f03 \
     test2010_177.f03 \
     test2010_178.f03 \
     test2010_179.f03 \
     test2010_180.f03 \
     test2010_181.f03 \
     test2011_24.f03 \
     test2011_25.f03 \
     test2011_27.f03 \
     test2011_28.f03 \
     test2011_29.f03 \
     test2011_30.f03 \
     test2011_31.f03 \
     test2011_32.f03 \
     test2011_33.f03 \
     test2011_34.f03 \
     test2011_35.f03 \
     test2011_Rice_attrs-pointer-array.f03 \
     test2011_Rice_attrs-value-intent.f03 \
     test2011_Rice_bindc-name-2.f03 \
     test2011_Rice_bindc-name-sub.f03 \
     test2011_Rice_bindc-name.f03 \
     test2011_Rice_bindc.f03


# DQ (1/18/2011): Failing tests.
#     test2007_133.f03 

# DQ (1/20/2011): Failing tests.
#     test2007_133.f03 

# DQ (4/3/2010): Added test code used in Fortran OpenMP tests.
OPENMP_TESTS_F77_TESTCODES_REQUIRED_TO_PASS = \
     jacobi.f \
     default.f \
     flush.f \
     exmpaleA221f.f \
     exampleA251f.f \
     schedule.f \
     testNewOFP.f


# This now passes as part of the F03_TESTCODES_REQUIRED_TO_PASS tests
#   F03_TESTCODES_REQUIRED_TO_PASS += test2007_43.f03

# #######################
#      FAILING TESTS
# #######################
F90_TESTCODES_CURRENTLY_FAILING = \
     test2007_46.f90 \
     test2007_70.f90 \
     test2007_81.f90 \
     test2007_82.f90 \
     test2007_83.f90 \
     test2007_84.f90 \
     test2007_87.f90 \
     test2007_88.f90 \
     test2007_107.f90 \
     test2007_108.f90 \
     test2007_131.f90 \
     test2007_144.f90 \
     test2007_152.f90 \
     test2007_165.f90 \
     test2007_166.f90 \
     test2007_170.f90 \
     test2007_177.f90 \
     test2007_237.f90 \
     test2007_240.f90 \
     test2007_254.f90 \
     test2007_255.f90 \
     test2007_257.f90 \
     test2007_LANL.f90 \
     test2007_example.f90 \
     test2008_30.f90 \
     test2009_1.f90 \
     test2010_03.f90 \
     test2010_04.f90 \
     test2010_05.f90 \
     test2010_17.f90 \
     test2010_19.f90 \
     test2010_21.f90 \
     test2010_22.f90 \
     test2010_24.f90 \
     test2010_26.f90 \
     test2010_31.f90 \
     test2010_36.f90 \
     test2010_43.f90 \
     test2010_48.f90 \
     test2010_51.f90 \
     test2010_65.f90 \
     test2010_66.f90 \
     test2010_67.f90 \
     test2010_71.f90 \
     test2010_72.f90 \
     test2010_73.f90 \
     test2010_78.f90 \
     test2010_79.f90 \
     test2010_80.f90 \
     test2010_81.f90 \
     test2010_82.f90 \
     test2010_83.f90 \
     test2010_84.f90 \
     test2010_85.f90 \
     test2010_86.f90 \
     test2010_87.f90 \
     test2010_88.f90 \
     test2010_89.f90 \
     test2010_90.f90 \
     test2010_91.f90 \
     test2010_92.f90 \
     test2010_93.f90 \
     test2010_94.f90 \
     test2010_95.f90 \
     test2010_96.f90 \
     test2010_97.f90 \
     test2010_99.f90 \
     test2010_100.f90 \
     test2010_101.f90 \
     test2010_102.f90 \
     test2010_103.f90 \
     test2010_107.f90 \
     test2010_108.f90 \
     test2010_109.f90 \
     test2010_110.f90 \
     test2010_116.f90 \
     test2010_117.f90 \
     test2010_130.f90 \
     test2010_131.f90 \
     test2010_145.f90 \
     test2010_146.f90 \
     test2010_147.f90 \
     test2010_148.f90 \
     test2010_149.f90 \
     test2010_161.f90 \
     test2010_169.f90 \
     test2010_170.f90 \
     test2010_175.f90 \
     test2011_03.f90 \
     test2011_11.f90 \
     test2011_18.f90 \
     test2011_21.f90 \
     test2011_22.f90 \
     test2011_23.f90 \
     test2011_38.f90 \
     test2011_41.f90 \
     test2011_42.f90 \
     test2011_43.f90 \
     test2011_44.f90 \
     test2011_45.f90 \
     test2011_46.f90 \
     test2011_47.f90 \
     test2011_48.f90 \
     test2011_49.f90 \
     test2011_50.f90 \
     test2011_51.f90 \
     test2011_52.f90 \
     test2011_53.f90 \
     test2011_54.f90 \
     test2011_55.f90 \
     test2011_56.f90 \
     test2011_57.f90 \
     test2011_58.f90 \
     test2011_59.f90 \
     test2011_60.f90 \
     test2011_61.f90 \
     test2011_62.f90 \
     test2011_63.f90 \
     test2011_64.f90 \
     test2011_65.f90 \
     test2011_66.f90 \
     test2011_67.f90 \
     test2011_68.f90 \
     test2011_69.f90 \
     test2011_70.f90 \
     test2011_71.f90 \
     test2011_72.f90 \
     test2011_73.f90 \
     test2011_75.f90 \
     test2011_76.f90 \
     test2011_Rice_A-cant-assert-keyword-nonnull.f90 \
     test2011_Rice_B-cant-assert-keyword-nonnull.f90 \
     test2011_Rice_C-cant-assert-keyword-nonnull.f90 \
     test2011_Rice_lost-func-return-type.f90 \
     fCaller.f90 \
     triangle.f90 \
     X-comment-in-wrong-place.f90 \
     X-enddo-plus-label.f90  \
     X-print-no-output-item-list.f90


# "X-*" tests are Rice-reported bugs not yet fixed.
# DQ(1/30/2011): test2010_150.* - test2010_168.* are Rice tests

# JJW -- this can't be in the f90 file list because it does not have the .f90 extension
#    test2008_02.f
F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING = \
    test2008_01.F90

#if !OS_MACOSX
#  # Liao 2/11/2011. gfortran 4.2.0 on Mac cannot handle include '/long/absolute/path/file.h'
#  F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING += test2008_01.F90
#endif
F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING = \
     test2007_85.f \
     test2007_86.f \
     test2007_142.f \
     test2007_146.f \
     test2007_147.f \
     test2007_167.f \
     test2007_199.f \
     test2007_203.f \
     test2007_210.f \
     test2007_225.f \
     test2007_233.f \
     test2007_235.f \
     test2007_241.f \
     test2007_252.f \
     test2008_02.f \
     test2008_03.f \
     test2010_52.f \
     test2010_53.f \
     test2010_54.f \
     test2010_55.f \
     test2010_56.f \
     test2010_57.f \
     test2010_70.f \
     test2010_105.f \
     test2010_157.f \
     test2011_94.f 

F03_TESTCODES_CURRENTLY_FAILING = \
     test2007_18.f03 \
     test2007_171.f03 \
     test2007_172.f03 \
     test2007_173.f03 \
     test2007_180.f03 \
     test2010_27.f03 \
     test2010_74.f03 \
     test2010_75.f03 \
     test2010_76.f03 \
     test2010_77.f03 \
     test2010_104.f03 \
     test2010_106.f03 \
     test2010_126.f03 \
     test2010_171.f03 \
     test2011_26.f03 \
     test2011_74.f03

F08_TESTCODES_CURRENTLY_FAILING = \
     test2010_98.f08

noinst_headers = 

# Automake's testing mechanism (which defines the "make check" rule) requires passing tests.
F90_TESTCODES = \
$(F90_TESTCODES_REQUIRED_TO_PASS)

F77_TESTCODES = \
$(F77_TESTCODES_REQUIRED_TO_PASS)

F77_FIXED_FORMAT_TESTCODES = \
$(F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS)

F03_TESTCODES = \
$(F03_TESTCODES_REQUIRED_TO_PASS)


# DQ (11/20/2010): Added test codes requiring preprocessing
F90_TESTCODES_REQUIRING_PREPROCESSOR = \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING)


# QMTest allows both passing and failing tests.
ALL_F90_TESTCODES = \
$(F90_TESTCODES_REQUIRED_TO_PASS) \
$(F90_TESTCODES_CURRENTLY_FAILING)

ALL_F77_TESTCODES = \
$(F77_TESTCODES_REQUIRED_TO_PASS) \
$(F77_TESTCODES_CURRENTLY_FAILING)

ALL_F77_FIXED_FORMAT_TESTCODES = \
$(F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS) \
$(F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING)

ALL_F03_TESTCODES = \
$(F03_TESTCODES_REQUIRED_TO_PASS) \
$(F03_TESTCODES_CURRENTLY_FAILING)

ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR = \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_REQUIRED_TO_PASS) \
$(F90_TESTCODES_REQUIRING_PREPROCESSOR_CURRENTLY_FAILING)


# File option to accumulate performance information about the compilation
PERFORMANCE_REPORT_OPTION = -rose:compilationPerformanceFile $(top_builddir)/FORTRAN_ROSE_PERFORMANCE_DATA.csv

# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict
# ROSE_FLAGS = -rose:C_only -rose:verbose 2 --edg:restrict $(PERFORMANCE_REPORT_OPTION)
ROSE_FLAGS = -rose:verbose 0 -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 3 -rose:output_parser_actions -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 0 -rose:output_tokens -rose:output_parser_actions -I$(srcdir)
# ROSE_FLAGS = -rose:verbose 0 -rose:output_tokens -I$(srcdir)

# VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes
VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes
# VALGRIND = /usr/apps/valgrind/new/bin/valgrind $(VALGRIND_OPTIONS)
# VALGRIND = valgrind $(VALGRIND_OPTIONS)
VALGRIND = 
PASSING_TEST_F90_Objects = ${F90_TESTCODES:.f90=.o}
PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Objects = ${F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.o}
PASSING_TEST_F77_Objects = ${F77_TESTCODES:.f77=.o}

# DQ (3/11/2010): F77 tests were not being run, this fixes this.
# PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_TESTCODES:.f=.o}
PASSING_TEST_F77_FIXED_FORMAT_Objects = ${F77_FIXED_FORMAT_TESTCODES_REQUIRED_TO_PASS:.f=.o}
PASSING_TEST_F03_Objects = ${F03_TESTCODES:.f03=.o}
TEST_F90_Objects = ${ALL_F90_TESTCODES:.f90=.o}
TEST_REQUIRING_PREPROCESSOR_F90_Objects = ${ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR:.F90=.o}
TEST_F77_Objects = ${ALL_F77_TESTCODES:.f77=.o}
TEST_F77_FIXED_FORMAT_Objects = ${ALL_F77_FIXED_FORMAT_TESTCODES:.f=.o}
TEST_F03_Objects = ${ALL_F03_TESTCODES:.f03=.o}

# PASSING_TEST_Objects = $(PASSING_TEST_F90_Objects) $(PASSING_TEST_F77_Objects) $(PASSING_TEST_F77_FIXED_FORMAT_Objects) $(PASSING_TEST_F03_Objects) 
PASSING_TEST_Objects = $(PASSING_TEST_REQUIRING_PREPROCESSOR_F90_Objects) $(PASSING_TEST_F90_Objects) $(PASSING_TEST_F77_Objects) $(PASSING_TEST_F77_FIXED_FORMAT_Objects) $(PASSING_TEST_F03_Objects) 
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@QMTEST_Objects = ${ALL_TESTCODES:.f90=.qmt}

# Make rule to build the QMTest database files
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@CURRENT_DIRECTORY = `pwd`

# We will build a larger collection of module tests soon (supported by makefile dependence rules).
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@PASSING_MODULE_TEST_Objects = module_B_file.o

# DQ (10/4/2010): Test calling OFP directly and ROSE for different filename extensions.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@CALL_OFP = java -Djava.class.path=$(top_srcdir)/src/3rdPartyLibraries/antlr-jars/antlr-3.2.jar:$(top_builddir)/src/3rdPartyLibraries/fortran-parser/OpenFortranParser-0.8.2.jar fortran.ofp.FrontEnd

# Make sure that all the test codes end up in the distribution
# EXTRA_DIST = $(ALL_TESTCODES)
EXTRA_DIST = $(ALL_F77_FIXED_FORMAT_TESTCODES) $(ALL_F77_TESTCODES) $(ALL_F90_TESTCODES) $(ALL_F03_TESTCODES) \
   $(ALL_F90_TESTCODES_REQUIRING_PREPROCESSOR) \
   test2007_suffixTest_01.f test2007_suffixTest_02.f77 test2007_suffixTest_03.f90 test2007_suffixTest_04.f95 \
   test2007_suffixTest_05.f03 test2007_suffixTest_06.F test2007_suffixTest_07.F90 test2007_suffixTest_08.F95 \
   test2007_suffixTest_09.F03 test2007_suffixTest_10.F08 test2007_suffixTest_11.f08 \
   module_A_file.f90 module_B_file.f90 test2010_31_header.f90 test2010_50.h test2010_54.h test2010_55.h \
   original_mpif.h inputUsingDefinesOnCommandline.F90 fortran_foo_single_quote.h fortran_foo_double_quote.h \
   cpp_foo.h cpp_foobar.h ISO_C_BINDING.f03 mpi_f08_types.f03 mpi_f08_interfaces_test.f03 mpif.h mpiof.h

all: all-recursive

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(top_srcdir)/config/QMTest_makefile.inc $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps tests/CompileTests/Fortran_tests/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps tests/CompileTests/Fortran_tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../../config
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-local mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-libtool \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	check-local clean clean-generic clean-libtool clean-local \
	clean-recursive ctags ctags-recursive distclean \
	distclean-generic distclean-libtool distclean-recursive \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-generic \
	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am uninstall-info-am


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)

# These fail and have been moved to be tested unde 4.2.x only.
# test2011_Rice_alternate-return-argument.f90
# test2011_Rice_alt-return-call.f90

# SKW 4/17/2011: tests which may actually be incorrect Fortran 90 -- need to study the standard.
#     test2011_Rice_false-forward-decl-func-type.f90
#     test2011_Rice_forward-ref-with-sub.f90
#     test2011_Rice_lost-func-return-type.f90

# SKW 3/18/2011: tests which are correct and pass in ROSE, but sometimes fail
# when run in Hudson (nondeterministically, on amd64-linux with gcc 4.1.2)
#     test2011_Rice_A-cant-assert-keyword-nonnull.f90
#     test2011_Rice_B-cant-assert-keyword-nonnull.f90
#     test2011_Rice_C-cant-assert-keyword-nonnull.f90

#Liao 2/11/2010, 'include' issue on gfortran 4.2.0 of Mac OS X
# 4.2.1 can handle them properly
#if !OS_MACOSX
#  F90_TESTCODES_REQUIRED_TO_PASS += \
#       test2007_29.f90 \
#       test2010_01.f90 \
#       test2010_50.f90
#endif

# DQ (2/12/2011): This test codes appears to randomly fail (failed on GNU 4.1.2)
# I will look into this separately. 
# Within Hudson is has failed for:
#       test#2044 on hudson-rose-04 using GNU 4.3.2
#       test#2056 on tux284 using GNU 4.1.2
# It passes without error using Valgrind and I can't get it to fail locally 
# on tux321 (using GNU 4.2.4).  One intermediate step would be to have it be 
# tested by Hudson on only 4.2.4 machines.
#    test2010_161.f90

# DQ (1/31/2011): Some F90 testcodes need to be be F03 testcodes.  These are
# fixed as only F03 codes (note that test2011_26.f03 is already a F03 code).
#     test2011_24.f90
#     test2011_25.f90
#     test2011_27.f90
#     test2011_28.f90
#     test2011_29.f90
#     test2011_30.f90
#     test2011_31.f90
#     test2011_32.f90
#     test2011_33.f90
#     test2011_34.f90
#     test2011_35.f90

# DQ (1/18/2011): Failing tests.
#     test2007_100.f90
#     test2007_135.f90 
#     test2007_219.f90 
#     test2010_35.f90
#     test2010_49.f90
#     test2010_59.f90 
#     test2010_136.f90 
#     test2010_151.f90 
#     test2010_154.f90 
#     test2010_174.f90 
#     test2011_05.f90 

# DQ (1/20/2011): Failing tests.
#     test2007_248.f90 
#     test2010_49.f90 
#     test2010_136.f90 
#     test2010_151.f90 

# This used to work, but fails how that test2010_172.f90 and test2010_184.f90 pass
# It seems that these are mutually exclusive!!!
#    test2007_103.f90
#    test2007_139.f90
#    test2007_189.f
#    test2007_227.f
#    test2010_29.f
#    test2010_30.f 
#    test2010_120.f90

# DQ (12/5/2010): This generates an internal gfortran compiler error.
# retest on Hudson later after we get the current work checked in.
# test2010_119.f90:29: internal compiler error: in emit_move_insn, at expr.c:3162
#     test2010_119.f90

@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@ # These are tests that fail using the gfrotran version 4.0 compiler (but pass with all other versions of gfortran).

# Go back and build the translator we are using to test Fortran (in case make check 
# is run directly in this directory before make has been run from the root of the 
# ROSE directory structure).  This does not appear to work!
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@../../testTranslator:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd ../..; $(MAKE) testTranslator
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@echo "Force the lt-testTranslator to be built in ../../.libs so that we can rename it for Insure++ runs."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	../../testTranslator --help > /dev/null

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testTranslator: ../../testTranslator

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@../../testGraphGeneration:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd ../..; $(MAKE) testGraphGeneration

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testGraphGeneration: ../../testGraphGeneration

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@../../testTokenGeneration:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd ../..; $(MAKE) testTokenGeneration

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testTokenGeneration: ../../testTokenGeneration

# DQ (10/4/2010): Added tests to make sure that the AST graphs can be generated for all
# Fortran input test codes. This tests a problem that was reported previously by Rice.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(TEST_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
# $(TEST_F90_Objects): ../../testTranslator
# Example of how to call the OpenFortranParser
#	java parser.java.FortranMain --class parser.java.FortranParserActionJNI $(srcdir)/$(@:.o=.f90)
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f90)
# How to call a ROSE translator with a Fortran source file.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	$(VALGRIND) ../../testParser $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.f90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	echo "Removing the just built copy of lt-testTranslator to save space..."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_$(@:.o=)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(TEST_REQUIRING_PREPROCESSOR_F90_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/$(@:.o=.F90)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	echo "Removing the just built copy of lt-testTranslator to save space..."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_$(@:.o=)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(TEST_F77_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f77)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f77)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	echo "Removing the just built copy of lt-testTranslator to save space..."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_$(@:.o=)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(TEST_F77_FIXED_FORMAT_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration ${ALL_TESTCODES}
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:f77 -c $(srcdir)/$(@:.o=.f)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	echo "Removing the just built copy of lt-testTranslator to save space..."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_$(@:.o=)

# Note: If using gfortran version greater then 4.1, we can't call it with Fortran 2003 code since it is so buggy.
#       So we use -rose:skip_syntax_check to avoid the frontend syntax checking and -rose:skipfinalCompileStep
#       to avoid processing the generated code (which would have the same problem).  It is easier to just use
#       the version 4.1 gfortran which has better Fortran 2003 syntax checking support. This problem is confirmed 
#       on versions of gfortran 4.2 and 4.3.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(TEST_F03_Objects): ../../testTranslator ../../testGraphGeneration ../../testTokenGeneration 
#	java parser.java.FortranMain --dump $(srcdir)/$(@:.o=.f03)
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
#	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	$(VALGRIND) ../../testGraphGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
#	$(VALGRIND) ../../testTokenGeneration $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
#	Since gfortran does not support F03, and thus we skip the compileation using the backend gfortran compiler, we have to force the generation of an object file. 
#	Build a object file since gfortran fails to do so (avoids remaking the makefile target)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	@echo "   ...force generation of $@, because gfortran compiler does not handle fortran 2003 standard (and the makefile needs $@ to avoid recompilation)."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_FALSE@	@touch $@
#	DQ (4/22/2011): For Insure++ we want to get the filename into the names used for the report files.
#	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; exit 1; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	@if test ! -f "../../.libs/lt-testTranslator"; then echo "Can NOT find ../../.libs/lt-testTranslator"; ../../testTranslator --help > /dev/null; echo "Fixed"; fi
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	cp ../../.libs/lt-testTranslator testTranslator_$(@:.o=)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	./testTranslator_$(@:.o=) $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep -rose:f2003 -c $(srcdir)/$(@:.o=.f03)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	echo "Removing the just built copy of lt-testTranslator to save space..."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_$(@:.o=)

# DQ (4/6/2010): Added test for parsing only (tested here for C++ code)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testParser: ../../testParser
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testParser $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2007_01.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@$(QMTEST_Objects): ../../testTranslator $(srcdir)/$(@:.qmt=.c)
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "Calling QMTEST_Objects rule: "
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	qm.sh f rose.RoseTest $(CURRENT_DIRECTORY)/../../testTranslator NULL $(ROSE_FLAGS) -c $(srcdir)/$(@:.qmt=.f90)

# This is a rule to add the current files into a QMTest database
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@build_qmtest_database: $(QMTEST_Objects)
#	@echo "Building QMTest database using file "
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	rm -rf QMTest_database;
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	mkdir QMTest;
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	rm -rf QMTest/*.qmt
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	mv *.qmt QMTest
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd QMTest; qmtest -D`pwd` create-tdb

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@run_qm_tests:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd QMTest; qmtest run -o TestResults.qmr -j4

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@run_qm_gui:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	cd QMTest; qmtest gui

# Include makefile rules specific to QMTest

# DQ (11/11/2008): Module test copied from developersScratchSpace/Dan/Fortran_tests
# This file declares a module used by module_B_file.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@module_A_file.o: testTranslator
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)

# Force representation of module dependency so that mod files are properly generated before use.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@module_B_file.o: testTranslator module_A_file.o
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -I$(srcdir) -c $(srcdir)/$(@:.o=.f90)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@test2010_01.o:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@test2010_02.o:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@test2010_05.o:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:relax_syntax_check -c $(srcdir)/$(@:.o=.f90)

# Output spew test from John.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@outputSpew.o:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:caf -rose:skip_syntax_check -c $(srcdir)/$(@:.o=.caf)

# Makefile rule to reproduce a current OFP bug that causes OFP to fail silently (not returning a proper exit code).
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@current_OFP_error:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -rose:exit_after_parser -c $(srcdir)/test2010_31.f90

# DQ (3/29/2011): Added special test to support this problem that appears correlated to gfortran 4.1.2
# though might be unrelated to the gfortran version number.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@problemTests:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2010_161.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(VALGRIND) ../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2011_Rice_alternate-return-argument.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testSuffixRules:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_01.f
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_01.f
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_02.f77
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_02.f77
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_03.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_03.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_04.f95
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_04.f95
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_05.f03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_05.f03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_06.F
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_06.F
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_07.F90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_07.F90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_08.F95
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_08.F95
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_09.F03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_09.F03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_10.F08
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_10.F08
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_11.f08
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/test2007_suffixTest_11.f08

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testOFP:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	 $(CALL_OFP) --dump $(srcdir)/test2007_suffixTest_01.f

# DQ (10/18/2010): Test suggested from bug reported by Carlo Bertolli at Imperial.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testCPP_Defines:
#	Test source code with macro defined from the command line: e.g. "integer*PS  pe"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -DPS=8 $(srcdir)/inputUsingDefinesOnCommandline.F90

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testMPI:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/mpi.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -c $(srcdir)/mpi_test_01.f90

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testMPItypes:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/ISO_C_BINDING.f03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/mpi_f08_types.f03
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:skip_syntax_check -rose:skipfinalCompileStep $(srcdir)/mpi_f08_interfaces_test.f03

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@testMultipleFortranFiles: $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90 || cat $(srcdir)/test2010_79.f90 rose_test2010_79.f90

# DQ (11/5/2010): This bug causes the unparsed second file to include a Fortran "include" statement (magically).
# Note that the compilation will generate an error not caught by make since the use of "cat" will succeed.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@riceBug1: $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90 $(srcdir)/test2010_79.f90 || cat $(srcdir)/test2010_79.f90 rose_test2010_79.f90

# DQ (11/5/2010): When unparsed, this file is missing the statement "i1 = 1" in the generated code.
# DQ (11/30/2010): Rice has a fix for this in their merge that should be checked in shortly.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@riceBug2:$(srcdir)/test2010_78.f90 $(srcdir)/test2010_80.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90
#	../../testTranslator $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_80.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_78.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testGraphGeneration $(ROSE_FLAGS) -rose:f90 -c $(srcdir)/test2010_80.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "Source code to test2010_80.f90"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@cat $(srcdir)/test2010_80.f90
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "Generated code for rose_test2010_80.f90 (missing \"i1 = 1\""
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@cat rose_test2010_80.f90

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@bug3:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:f90 -rose:output_parser_actions -I$(srcdir) -c $(srcdir)/test2010_81.f90

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@bug4:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	../../testTranslator $(ROSE_FLAGS) -rose:output_parser_actions -I$(srcdir) -c $(srcdir)/verify.f

# DQ (4/9/2011): Let's at least run these in parallel (more important for the Insure++ tests).
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@extra_tests: $(PASSING_MODULE_TEST_Objects) testCPP_Defines testMPItypes testMultipleFortranFiles

# DQ (2/2/2011): We are now enforcing the module names are unique so that we can always run the 
# test code in parallel and avoid name conflicts with *.mod (gfortran) and *.rmod (rose) files.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@enforce_module_name_policy:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	$(top_srcdir)/scripts/policies/UniqueFortranModules.pl $(srcdir)

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@tests:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@$(MAKE) enforce_module_name_policy
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@$(MAKE) $(PASSING_TEST_Objects)
#	@$(MAKE) $(PASSING_MODULE_TEST_Objects)
#	@$(MAKE) testCPP_Defines
#	@$(MAKE) testMPItypes
#	@$(MAKE) testMultipleFortranFiles
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@$(MAKE) extra_tests
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "***************************************************************************************************"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "****** ROSE/tests/CompileTests/Fortran_tests: make tests rule complete (terminated normally) ******"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "***************************************************************************************************"

@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@check-local:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "Tests for Fortran."
#  Run this test explicitly since it has to be run using a specific rule and can't be lumped with the rest
#	These Fortran programs must be called externally to the test codes in the "TESTCODES" make variable
#	DQ (2/2/2011): This test presently fails (test codes are being fixed).
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@	@$(MAKE) enforce_module_name_policy
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@	@$(MAKE) $(PASSING_TEST_Objects)
#	@$(MAKE) $(PASSING_MODULE_TEST_Objects)
#	@$(MAKE) testCPP_Defines
#	@$(MAKE) testMPItypes
#	@$(MAKE) testMultipleFortranFiles
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@	@$(MAKE) extra_tests
#	DQ (4/6/2010): This fails on Hudson, but I don't know why.
#	@$(MAKE) testParser
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@@ROSE_USING_GFORTRAN_VERSION_4_0_TRUE@	@echo "Skipping Fortran code tests when using the gfortran version 4.0.x compiler (fails to support common command line options of later versions)."
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "***************************************************************************************************"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "****** ROSE/tests/CompileTests/Fortran_tests: make check rule complete (terminated normally) ******"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@	@echo "***************************************************************************************************"

# Fortran support not available in ROSE unless specified on the configure command line.
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@check-local:
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@	@echo "***********************************************************************************"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@	@echo "****** ROSE/tests/CompileTests/Fortran_tests: FORTRAN NOT CONFIGURED IN ROSE ******"
@ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@	@echo "***********************************************************************************"

# This will output the example testcodes that are failing
listProblemFiles: $(F77_TESTCODES_CURRENTLY_FAILING) $(F90_TESTCODES_CURRENTLY_FAILING) $(F03_TESTCODES_CURRENTLY_FAILING) $(F77_FIXED_FORMAT_TESTCODES_CURRENTLY_FAILING)
	egrep -n "*"  $(srcdir)/$(?)

# DQ (3/12/2010): Fortran 2008 tests from OFP
# f08-tests

clean-local:
	rm -f *.o rose_*.f* *.rmod
	rm -f *.s *.mod rose_*.f rose_*.f77 rose_*.f90 rose_*.f95 rose_*.f03 rose_*.f08 *.dot *.pdf *~ *.ps *.out *.log rose_performance_report_lockfile.lock
	rm -f rose_*.F rose_*.F77 rose_*.F90 rose_*.F95 rose_*.F03 rose_*.F08 test2007_suffixTest_0?_postprocessed.*
	rm -f *_postprocessed.* 
	rm -rf QMTest
#	Remove the links built to get the filename being compiled into the name of the executable.
@ROSE_USE_INSURE_TRUE@	rm -f testTranslator_*
@ROSE_USE_INSURE_TRUE@	rm -f *.rpt

# SKW's trivial change to force new Hudson run
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
