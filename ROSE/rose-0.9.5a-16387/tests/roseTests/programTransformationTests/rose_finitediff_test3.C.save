int min(int ,int );

void dgemm(double *a,double *b,double *c,int n)
{
  int _var_1;
  int _var_0;
  int i;
  int j;
  int k;
// Finite differencing: cache_fd__1 is a cache of (_var_2 * n)
  int cache_fd__1;
// Finite differencing: cache_fd__2 is a cache of (k * n)
  int cache_fd__2;
// Finite differencing: cache_fd__3 is a cache of (j * n)
  int cache_fd__3;
  for (_var_1 = 0; _var_1 <= ((-1) + n); _var_1 += 16) {
    for (_var_0 = 0; _var_0 <= ((-1) + n); _var_0 += 16) {
      for (i = 0; i <= ((-1) + n); i += 1) {
        for ((cache_fd__2 = (_var_1 * n) , k = _var_1); k <= min(((-1) + n),(_var_1 + 15)); (cache_fd__2 += n , k += 1)) {
          for ((cache_fd__3 = (_var_0 * n) , j = _var_0); j <= min((n + (-16)),_var_0); (cache_fd__3 += 16 * n , j += 16)) {
            int _var_2;
            (cache_fd__1 = cache_fd__3 , _var_2 = j);
            c[cache_fd__3 + i] = (c[cache_fd__3 + i] + (a[cache_fd__2 + i] * b[cache_fd__3 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
            (cache_fd__1 += n , _var_2 = (1 + _var_2));
            c[cache_fd__1 + i] = (c[cache_fd__1 + i] + (a[cache_fd__2 + i] * b[cache_fd__1 + k]));
          }
          for (; j <= min(((-1) + n),(_var_0 + 15)); (cache_fd__3 += n , j += 1)) {
            c[cache_fd__3 + i] = (c[cache_fd__3 + i] + (a[cache_fd__2 + i] * b[cache_fd__3 + k]));
          }
        }
      }
    }
  }
}
