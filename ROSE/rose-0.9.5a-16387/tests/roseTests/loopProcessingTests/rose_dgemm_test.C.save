
int min2(int a0,int a1)
{
  return a0 < a1?a0 : a1;
}

void dgemm_test(const int M,const int N,const int K,const double alpha,const double *A,const int lda,const double *B,const int ldb,const double beta,double *C,const int ldc)
{
  int i;
  int j;
  int l;
  int _var_0;
  for (_var_0 = 0; _var_0 <= -1 + N; _var_0 += 16) {
    for (i = 0; i <= -1 + M; i += 1) {
      for (j = _var_0; j <= min2(-1 + N,_var_0 + 15); j += 1) {
        C[(j * ldc) + i] = (beta * C[(j * ldc) + i]);
        for (l = 0; l <= K + -16; l += 16) {
          int _var_1 = l;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(l * lda) + i]) * B[(j * ldb) + l]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
          _var_1 = 1 + _var_1;
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(_var_1 * lda) + i]) * B[(j * ldb) + _var_1]));
        }
        for (; l <= -1 + K; l += 1) {
          C[(j * ldc) + i] = (C[(j * ldc) + i] + ((alpha * A[(l * lda) + i]) * B[(j * ldb) + l]));
        }
      }
    }
  }
}
