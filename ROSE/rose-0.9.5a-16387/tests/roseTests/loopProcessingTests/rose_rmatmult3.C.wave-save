#include "stdio.h"
#include "assert.h"
/* Restrict macros for various compilers */
#ifdef __GNUC__
#define	RESTRICT	__restrict
#elif defined __KCC
#define RESTRICT restrict
#else
#define RESTRICT
#endif
#define	LOOP_IMPLEMENTATION	2
#define	VALIDITY_CHECK	0
#define	PC(ii,jj,kk)	ii + (jj)*jp + (kk)*kp
#define	COEFF_POINTER_INCREMENT(i)	dbl +=i; dbc +=i; dbr +=i; dcl +=i; dcc +=i; dcr +=i; dfl +=i; dfc +=i; dfr +=i;cbl +=i; cbc +=i; cbr +=i; ccl +=i; ccc +=i; ccr +=i; cfl +=i; cfc +=i; cfr +=i;ubl +=i; ubc +=i; ubr +=i; ucl +=i; ucc +=i; ucr +=i; ufl +=i; ufc +=i; ufr +=i;
#define	POINTER_INCREMENT(i)	dbl +=i; dbc +=i; dbr +=i; dcl +=i; dcc +=i; dcr +=i; dfl +=i; dfc +=i; dfr +=i;cbl +=i; cbc +=i; cbr +=i; ccl +=i; ccc +=i; ccr +=i; cfl +=i; cfc +=i; cfr +=i;ubl +=i; ubc +=i; ubr +=i; ucl +=i; ucc +=i; ucr +=i; ufl +=i; ufc +=i; ufr +=i;xdbl +=i; xdbc +=i; xdbr +=i; xdcl +=i; xdcc +=i; xdcr +=i; xdfl +=i; xdfc +=i; xdfr +=i;xcbl +=i; xcbc +=i; xcbr +=i; xccl +=i; xccc +=i; xccr +=i; xcfl +=i; xcfc +=i; xcfr +=i;xubl +=i; xubc +=i; xubr +=i; xucl +=i; xucc +=i; xucr +=i; xufl +=i; xufc +=i; xufr +=i; lhs +=i;
#define	POINTER_INCREMENT_ONE	dbl++; dbc++; dbr++; dcl++; dcc++; dcr++; dfl++; dfc++; dfr++; cbl++; cbc++; cbr++; ccl++; ccc++; ccr++; cfl++; cfc++; cfr++; ubl++; ubc++; ubr++; ucl++; ucc++; ucr++; ufl++; ufc++; ufr++; xdbl++; xdbc++; xdbr++; xdcl++; xdcc++; xdcr++; xdfl++; xdfc++; xdfr++; xcbl++; xcbc++; xcbr++; xccl++; xccc++; xccr++; xcfl++; xcfc++; xcfr++; xubl++; xubc++; xubr++; xucl++; xucc++; xucr++; xufl++; xufc++; xufr++; lhs++;
extern void perfometer();

void rmatmult3(int imin,int imax,int jmin,int jmax,int kmin,int kmax,int jp,int kp,double *__restrict__ dbl,double *__restrict__ dbc,double *__restrict__ dbr,double *__restrict__ dcl,double *__restrict__ dcc,double *__restrict__ dcr,double *__restrict__ dfl,double *__restrict__ dfc,double *__restrict__ dfr,double *__restrict__ cbl,double *__restrict__ cbc,double *__restrict__ cbr,double *__restrict__ ccl,double *__restrict__ ccc,double *__restrict__ ccr,double *__restrict__ cfl,double *__restrict__ cfc,double *__restrict__ cfr,double *__restrict__ ubl,double *__restrict__ ubc,double *__restrict__ ubr,double *__restrict__ ucl,double *__restrict__ ucc,double *__restrict__ ucr,double *__restrict__ ufl,double *__restrict__ ufc,double *__restrict__ ufr,double *__restrict__ x,double *__restrict__ b)
{
  int m;
  char *me = "rmatmult3";
  int i;
  int ii;
  int jj;
  int kk;
  double *__restrict__ lhs = b;
  double *__restrict__ xdbl = (((x - kp) - jp) - 1);
  double *__restrict__ xdbc = ((x - kp) - jp);
  double *__restrict__ xdbr = (((x - kp) - jp) + 1);
  double *__restrict__ xdcl = ((x - kp) - 1);
  double *__restrict__ xdcc = (x - kp);
  double *__restrict__ xdcr = ((x - kp) + 1);
  double *__restrict__ xdfl = (((x - kp) + jp) - 1);
  double *__restrict__ xdfc = ((x - kp) + jp);
  double *__restrict__ xdfr = (((x - kp) + jp) + 1);
  double *__restrict__ xcbl = ((x - jp) - 1);
  double *__restrict__ xcbc = (x - jp);
  double *__restrict__ xcbr = ((x - jp) + 1);
  double *__restrict__ xccl = (x - 1);
  double *__restrict__ xccc = x;
  double *__restrict__ xccr = (x + 1);
  double *__restrict__ xcfl = ((x + jp) - 1);
  double *__restrict__ xcfc = (x + jp);
  double *__restrict__ xcfr = ((x + jp) + 1);
  double *__restrict__ xubl = (((x + kp) - jp) - 1);
  double *__restrict__ xubc = ((x + kp) - jp);
  double *__restrict__ xubr = (((x + kp) - jp) + 1);
  double *__restrict__ xucl = ((x + kp) - 1);
  double *__restrict__ xucc = (x + kp);
  double *__restrict__ xucr = ((x + kp) + 1);
  double *__restrict__ xufl = (((x + kp) + jp) - 1);
  double *__restrict__ xufc = ((x + kp) + jp);
  double *__restrict__ xufr = (((x + kp) + jp) + 1);
  double myflops = 0.0;
  FILE *filePtr;
  static int firstPass = 1;
  register double temp;
/*   perfometer(); */
/* On the first pass into this function for decks/zrad.0001, if ii=imin, b[i] = 1.0, otherwise, b[i]=6.075507e-13.
     We can use this information to create a correctness check on new loop implementations.
  */
#if LOOP_IMPLEMENTATION == 1
      for ( kk = kmin ; kk < kmax ; kk++ ) {
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            for ( ii = imin ; ii < imax ; ii++ ) {
                i = ii + jj * jp + kk * kp ;
                b[i] =
                    dbl[i] * xdbl[i] + dbc[i] * xdbc[i] + dbr[i] * xdbr[i] +
                    dcl[i] * xdcl[i] + dcc[i] * xdcc[i] + dcr[i] * xdcr[i] +
                    dfl[i] * xdfl[i] + dfc[i] * xdfc[i] + dfr[i] * xdfr[i] +
                    cbl[i] * xcbl[i] + cbc[i] * xcbc[i] + cbr[i] * xcbr[i] +
                    ccl[i] * xccl[i] + ccc[i] * xccc[i] + ccr[i] * xccr[i] +
                    cfl[i] * xcfl[i] + cfc[i] * xcfc[i] + cfr[i] * xcfr[i] +
                    ubl[i] * xubl[i] + ubc[i] * xubc[i] + ubr[i] * xubr[i] +
                    ucl[i] * xucl[i] + ucc[i] * xucc[i] + ucr[i] * xucr[i] +
                    ufl[i] * xufl[i] + ufc[i] * xufc[i] + ufr[i] * xufr[i] ;
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(b[i]-1.0) > 1.0e-5 )
                        {
                            printf("b[%d,%d,%d]=%e, should be 1.000000\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(b[i] - 6.075507e-13) > 1.0e-5)
                        {
                            printf("b[%d,%d,%d]=%e, should be 6.075507e-13\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */
                
            }/* end of ii loop */
        }/* end of jj loop */
    }/* end of kk loop */
    
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif
    
#elif LOOP_IMPLEMENTATION == 2
  int dummy_to_preserve_preprocessor_directive = 0;
  for (kk = kmin; kk <= -1 + kmax; kk += 1) {
    for (jj = jmin; jj <= -1 + jmax; jj += 1) {
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((dbl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + ((kk - 1) * kp)])) + ((dbc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + ((kk - 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((dbr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + ((kk - 1) * kp)]))) + ((dcl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + ((kk - 1) * kp)]))) + ((dcc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + ((kk - 1) * kp)]))) + ((dcr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + ((kk - 1) * kp)]))) + ((dfl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + ((kk - 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((dfc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + ((kk - 1) * kp)]))) + ((dfr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + ((kk - 1) * kp)]))) + ((cbl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + (kk * kp)]))) + ((cbc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + (kk * kp)]))) + ((cbr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + (kk * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((ccl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + (kk * kp)]))) + ((ccc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + (kk * kp)]))) + ((ccr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + (kk * kp)]))) + ((cfl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + (kk * kp)]))) + ((cfc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + (kk * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((cfr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + (kk * kp)]))) + ((ubl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ubc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ubr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ucl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + ((kk + 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((ucc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + ((kk + 1) * kp)]))) + ((ucr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + ((kk + 1) * kp)]))) + ((ufl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + ((kk + 1) * kp)]))) + ((ufc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + ((kk + 1) * kp)]))) + ((ufr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + ((kk + 1) * kp)])));
      }
    }
  }
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif
  
#elif LOOP_IMPLEMENTATION == 3
    
    POINTER_INCREMENT( kmin*kp );
    
    for ( kk = kmin ; kk < kmax ; kk++ ) {
        
        POINTER_INCREMENT( jmin*jp );
        
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            
            POINTER_INCREMENT( 2 );
            
            for ( ii = imin ; ii < imax ; ii++ ) {
                *lhs = (*dbl++) * (*xdbl++) + (*dbc++) * (*xdbc++) + (*dbr++) * (*xdbr++) +
                    (*dcl++) * (*xdcl++) + (*dcc++) * (*xdcc++) + (*dcr++) * (*xdcr++) +
                    (*dfl++) * (*xdfl++) + (*dfc++) * (*xdfc++) + (*dfr++) * (*xdfr++) +
                    (*cbl++) * (*xcbl++) + (*cbc++) * (*xcbc++) + (*cbr++) * (*xcbr++) +
                    (*ccl++) * (*xccl++) + (*ccc++) * (*xccc++) + (*ccr++) * (*xccr++) +
                    (*cfl++) * (*xcfl++) + (*cfc++) * (*xcfc++) + (*cfr++) * (*xcfr++) +
                    (*ubl++) * (*xubl++) + (*ubc++) * (*xubc++) + (*ubr++) * (*xubr++) +
                    (*ucl++) * (*xucl++) + (*ucc++) * (*xucc++) + (*ucr++) * (*xucr++) +
                    (*ufl++) * (*xufl++) + (*ufc++) * (*xufc++) + (*ufr++) * (*xufr++) ;
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(*lhs-1.0) > 1.0e-5 )
                        {
                            printf("lhs[%d,%d,%d]=%e, should be 1.000000\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(*lhs - 6.075507e-13) > 1.0e-5)
                        {
                            printf("lhs[%d,%d,%d]=%e, should be 6.075507e-13\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */
                lhs++;
                
            }/* end of ii loop */
            POINTER_INCREMENT( 2 );
                    
        }/* end of jj loop */
        POINTER_INCREMENT( 2*jp );
        
    }/* end of kk loop */
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif  
    
#elif LOOP_IMPLEMENTATION == 4
    
    POINTER_INCREMENT( kmin*kp );
    
    for ( kk = kmin ; kk < kmax ; kk++ ) {
        
        POINTER_INCREMENT( jmin*jp );
        
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            
            POINTER_INCREMENT( 2 );
            
            for ( ii = imin ; ii < imax ; ii++ ) {
                i = ii + jj * jp + kk * kp ;
                *lhs = (*dbl) * (*xdbl) + (*dbc) * (*xdbc) + (*dbr) * (*xdbr) +
                    (*dcl) * (*xdcl) + (*dcc) * (*xdcc) + (*dcr) * (*xdcr) +
                    (*dfl) * (*xdfl) + (*dfc) * (*xdfc) + (*dfr) * (*xdfr) +
                    (*cbl) * (*xcbl) + (*cbc) * (*xcbc) + (*cbr) * (*xcbr) +
                    (*ccl) * (*xccl) + (*ccc) * (*xccc) + (*ccr) * (*xccr) +
                    (*cfl) * (*xcfl) + (*cfc) * (*xcfc) + (*cfr) * (*xcfr) +
                    (*ubl) * (*xubl) + (*ubc) * (*xubc) + (*ubr) * (*xubr) +
                    (*ucl) * (*xucl) + (*ucc) * (*xucc) + (*ucr) * (*xucr) +
                    (*ufl) * (*xufl) + (*ufc) * (*xufc) + (*ufr) * (*xufr) ;
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(*lhs-1.0) > 1.0e-5 )
                        {
                            printf("lhs[%d,%d,%d]=%e, should be 1.000000\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(*lhs - 6.075507e-13) > 1.0e-5)
                        {
                            printf("lhs[%d,%d,%d]=%e, should be 6.075507e-13\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */
            
                POINTER_INCREMENT_ONE;
                
            }/* end of ii loop */
            POINTER_INCREMENT( 2 );
                    
        }/* end of jj loop */
        POINTER_INCREMENT( 2*jp );
        
    }/* end of kk loop */
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif
    
#elif LOOP_IMPLEMENTATION == 5
    
    xdbl += kmin*kp;
    lhs += kmin*kp;
    COEFF_POINTER_INCREMENT( kmin*kp );
    
    for ( kk = kmin ; kk < kmax ; kk++ ) {
        
        xdbl += jmin*jp;
        lhs += jmin*jp;
        COEFF_POINTER_INCREMENT( jmin*jp );
        
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            
            xdbl += 2;
            lhs += 2;
            COEFF_POINTER_INCREMENT( 2 );
            
            for ( ii = imin ; ii < imax ; ii++ ) {
                temp = (*dbl++) * (*xdbl++);
                temp += (*dbc++) * (*xdbl++);
                temp += (*dbr++) * (*xdbl);
                xdbl+=jp-2;
                temp += (*dcl++) * (*xdbl++);
                temp += (*dcc++) * (*xdbl++);
                temp += (*dcr++) * (*xdbl);
                xdbl += jp-2;
                temp += (*dfl++) * (*xdbl++);
                temp += (*dfc++) * (*xdbl++);
                temp += (*dfr++) * (*xdbl);
                xdbl += kp-2*jp-2;
                temp += (*cbl++) * (*xdbl++);
                temp += (*cbc++) * (*xdbl++);
                temp += (*cbr++) * (*xdbl);
                xdbl += jp-2;
                temp += (*ccl++) * (*xdbl++);
                temp += (*ccc++) * (*xdbl++);
                temp += (*ccr++) * (*xdbl);
                xdbl += jp-2;
                temp += (*cfl++) * (*xdbl++);
                temp += (*cfc++) * (*xdbl++);
                temp += (*cfr++) * (*xdbl);
                xdbl += kp-2*jp-2;
                temp += (*ubl++) * (*xdbl++); 
                temp += (*ubc++) * (*xdbl++);
                temp += (*ubr++) * (*xdbl);
                xdbl += jp-2;
                temp += (*ucl++) * (*xdbl++);
                temp += (*ucc++) * (*xdbl++);
                temp += (*ucr++) * (*xdbl);
                xdbl += jp-2;
                temp += (*ufl++) * (*xdbl++);
                temp += (*ufc++) * (*xdbl++);
                temp += (*ufr++) * (*xdbl) ;
                *lhs = temp;
                
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(*lhs-1.0) > 1.0e-5 )
                        {
                            printf("at [%d,%d,%d], *lhs=%e, should be 1.000000\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(*lhs - 6.075507e-13) > 1.0e-5)
                        {
                            printf("at [%d,%d,%d], *lhs=%e, should be 6.075507e-13\n",ii,jj,kk,*lhs);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */        
                lhs++;
        /* shift xdbl back to where it started from +1 */        /* shift xdbl back to where it started from +1 */
                xdbl -= 2*kp + 2*jp + 1;
                
            }/* end of ii loop */
            
            xdbl += 2;
            lhs += 2;
            COEFF_POINTER_INCREMENT( 2 );
            
        }/* end of jj loop */
        xdbl += 2*jp;
        lhs += 2*jp;
        COEFF_POINTER_INCREMENT( 2*jp );
        
    }/* end of kk loop */
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif  
    
#elif LOOP_IMPLEMENTATION == 6
    
    for ( kk = kmin ; kk < kmax ; kk++ ) {
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            for ( ii = imin ; ii < imax ; ii++ ) {
                i = ii + jj * jp + kk * kp ;
                b[i] =
                    dbl[i] * (*(x+(ii-1+(jj-1)*jp+(kk-1)*kp))) +
                    dbc[i] * (*(x+(ii+(jj-1)*jp+(kk-1)*kp))) +
                    dbr[i] * (*(x+(ii+1+(jj-1)*jp+(kk-1)*kp))) +
                    dcl[i] * (*(x+(ii-1+(jj)*jp+(kk-1)*kp))) +
                    dcc[i] * (*(x+(ii+(jj)*jp+(kk-1)*kp))) +
                    dcr[i] * (*(x+(ii+1+(jj)*jp+(kk-1)*kp))) +
                    dfl[i] * (*(x+(ii-1+(jj+1)*jp+(kk-1)*kp))) +
                    dfc[i] * (*(x+(ii+(jj+1)*jp+(kk-1)*kp))) +
                    dfr[i] * (*(x+(ii+1+(jj+1)*jp+(kk-1)*kp))) +
                    cbl[i] * (*(x+(ii-1+(jj-1)*jp+(kk)*kp))) +
                    cbc[i] * (*(x+(ii+(jj-1)*jp+(kk)*kp))) +
                    cbr[i] * (*(x+(ii+1+(jj-1)*jp+(kk)*kp))) +
                    ccl[i] * (*(x+(ii-1+(jj)*jp+(kk)*kp))) +
                    ccc[i] * (*(x+(ii+(jj)*jp+(kk)*kp))) +
                    ccr[i] * (*(x+(ii+1+(jj)*jp+(kk)*kp))) +
                    cfl[i] * (*(x+(ii-1+(jj+1)*jp+(kk)*kp))) +
                    cfc[i] * (*(x+(ii+(jj+1)*jp+(kk)*kp))) +
                    cfr[i] * (*(x+(ii+1+(jj+1)*jp+(kk)*kp))) +
                    ubl[i] * (*(x+(ii-1+(jj-1)*jp+(kk+1)*kp))) +
                    ubc[i] * (*(x+(ii+(jj-1)*jp+(kk+1)*kp))) +
                    ubr[i] * (*(x+(ii+1+(jj-1)*jp+(kk+1)*kp))) +
                    ucl[i] * (*(x+(ii-1+(jj)*jp+(kk+1)*kp))) +
                    ucc[i] * (*(x+(ii+(jj)*jp+(kk+1)*kp))) +
                    ucr[i] * (*(x+(ii+1+(jj)*jp+(kk+1)*kp))) +
                    ufl[i] * (*(x+(ii-1+(jj+1)*jp+(kk+1)*kp))) +
                    ufc[i] * (*(x+(ii+(jj+1)*jp+(kk+1)*kp))) +
                    ufr[i] * (*(x+(ii+1+(jj+1)*jp+(kk+1)*kp))) ;
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(b[i]-1.0) > 1.0e-5 )
                        {
                            printf("b[%d,%d,%d]=%e, should be 1.000000\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(b[i] - 6.075507e-13) > 1.0e-5)
                        {
                            printf("b[%d,%d,%d]=%e, should be 6.075507e-13\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */
                
            }/* end of ii loop */
        }/* end of jj loop */
    }/* end of kk loop */
    
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif
        
#elif LOOP_IMPLEMENTATION == 7
    
    for ( kk = kmin ; kk < kmax ; kk++ ) {
        for ( jj = jmin ; jj < jmax ; jj++ ) {
            for ( ii = imin ; ii < imax ; ii++ ) {
                i = ii + jj * jp + kk * kp ;
                b[i] =
                    dbl[i] * (*(x+(ii-1+(jj-1)*jp+(kk-1)*kp))) +
                    dbc[i] * (*(x+(ii+(jj-1)*jp+(kk-1)*kp))) +
                    dbr[i] * (*(x+(ii+1+(jj-1)*jp+(kk-1)*kp))) +
                    dcl[i] * (*(x+(ii-1+(jj)*jp+(kk-1)*kp))) +
                    dcc[i] * (*(x+(ii+(jj)*jp+(kk-1)*kp))) +
                    dcr[i] * (*(x+(ii+1+(jj)*jp+(kk-1)*kp))) +
                    dfl[i] * (*(x+(ii-1+(jj+1)*jp+(kk-1)*kp))) +
                    dfc[i] * (*(x+(ii+(jj+1)*jp+(kk-1)*kp))) +
                    dfr[i] * (*(x+(ii+1+(jj+1)*jp+(kk-1)*kp))) +
                    cbl[i] * (*(x+(ii-1+(jj-1)*jp+(kk)*kp))) +
                    cbc[i] * (*(x+(ii+(jj-1)*jp+(kk)*kp))) +
                    cbr[i] * (*(x+(ii+1+(jj-1)*jp+(kk)*kp))) +
                    ccl[i] * (*(x+(ii-1+(jj)*jp+(kk)*kp))) +
                    ccc[i] * (*(x+(ii+(jj)*jp+(kk)*kp))) +
                    ccr[i] * (*(x+(ii+1+(jj)*jp+(kk)*kp))) +
                    cfl[i] * (*(x+(ii-1+(jj+1)*jp+(kk)*kp))) +
                    cfc[i] * (*(x+(ii+(jj+1)*jp+(kk)*kp))) +
                    cfr[i] * (*(x+(ii+1+(jj+1)*jp+(kk)*kp))) +
                    ubl[i] * (*(x+(ii-1+(jj-1)*jp+(kk+1)*kp))) +
                    ubc[i] * (*(x+(ii+(jj-1)*jp+(kk+1)*kp))) +
                    ubr[i] * (*(x+(ii+1+(jj-1)*jp+(kk+1)*kp))) +
                    ucl[i] * (*(x+(ii-1+(jj)*jp+(kk+1)*kp))) +
                    ucc[i] * (*(x+(ii+(jj)*jp+(kk+1)*kp))) +
                    ucr[i] * (*(x+(ii+1+(jj)*jp+(kk+1)*kp))) +
                    ufl[i] * (*(x+(ii-1+(jj+1)*jp+(kk+1)*kp))) +
                    ufc[i] * (*(x+(ii+(jj+1)*jp+(kk+1)*kp))) +
                    ufr[i] * (*(x+(ii+1+(jj+1)*jp+(kk+1)*kp))) ;
#if VALIDITY_CHECK == 1
                if(firstPass==1)
                {
                    if(ii==imin)
                    {
                        if( fabs(b[i]-1.0) > 1.0e-5 )
                        {
                            printf("b[%d,%d,%d]=%e, should be 1.000000\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                    else
                    {
                        if( fabs(b[i] - 6.075507e-13) > 1.0e-5)
                        {
                            printf("b[%d,%d,%d]=%e, should be 6.075507e-13\n",ii,jj,kk,b[i]);
                            abort();
                        }
                    }
                }
#endif /* end of VALIDITY_CHECK */
                
            }/* end of ii loop */
        }/* end of jj loop */
    }/* end of kk loop */
    
#if VALIDITY_CHECK == 1
    if(firstPass==1)
        firstPass=0;
#endif
    
#endif
  
  myflops += (((53.0 * ((imax - imin))) * ((jmax - jmin))) * ((kmax - kmin)));
}

