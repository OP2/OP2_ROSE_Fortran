
virtual $GRAMMAR_PREFIX_Node* $CLASSNAME::copy ( $GRAMMAR_PREFIX_CopyHelp& help) const
   {
     $CLASSNAME* result = NULL;

  // printf ("Copy $CLASSNAME = %p = %s \n",this,SageInterface::get_name(this).c_str());

  // Record the depth of the copy so that we build an clear internal state (new feature) 
  // used to associated old and new symbols in the original AST and the copy of the AST.
  // The default value of the depth is 0, so after this call the depth is 1!
     help.incrementDepth();

#if 0
  // DQ (10/22/2005): This is a useful test for the copy mechanism (in preprocessor.C)
  // but it is not generally true that things can only be copied once!
  // Check and see if this has been marked as copied! (detects recursive copy bug)
  // AstAttribute* existingAttribute = const_cast<$CLASSNAME*>(this)->attribute["copied"];
     bool previouslyCopied = const_cast<$CLASSNAME*>(this)->attribute.exists("copied");
     if (previouslyCopied == true)
        {
          this->get_file_info()->display("Called from copy $CLASSNAME: debug");
        }
     ROSE_ASSERT(previouslyCopied == false);

  // If not previously copied then build an attribute (on the heap) to mark it as copied
     AstAttribute* newAttribute = new AstAttribute();
     ROSE_ASSERT(newAttribute != NULL);

  // Add it to the AST (so it can be found later in any other attempt to copy this AST node)
     const_cast<$CLASSNAME*>(this)->attribute.add("copied",newAttribute);
#endif

  // Copy data members from base classes
$CONSTRUCT_ARG_COPY 

  // Build an empty copy of this object (will be filled in, but 
  // the parent can't be set and must be set by the caller)
     result = new $CLASSNAME( $CONSTRUCT_ARG_LIST );
     ROSE_ASSERT(result != NULL);

  // Copy data members of "this" class
$POST_CONSTRUCT_COPY

  // DQ (10/9/2007): comment out to test template problem ... This breaks test2004_76.C and test2004_142.C
  // DQ (10/5/2007): Add custom function to be called to fixup IR node specific details.
  // fixupCopy(result,help);

  // DQ (10/16/2007): The semantics of copy should include setting the parents of all 
  // the Sg_File_Info objects that are built for the new IR nodes.
     SgLocatedNode* locatedNode = isSgLocatedNode(result);
     if (locatedNode != NULL)
        {
       // If this is a SgLocatedNode then check the parents of the Sg_File_Info objects
          Sg_File_Info* start = locatedNode->get_startOfConstruct();
          ROSE_ASSERT(start != NULL);
#if 0
       // Debugging information
          if (start->get_parent() == NULL)
             {
               printf ("Detected a result->get_startOfConstruct() with NULL parent for result = %p = %s \n",result,result->class_name().c_str());
             }
#endif
          start->set_parent(locatedNode);
          ROSE_ASSERT(start->get_parent() != NULL);

          Sg_File_Info* end = locatedNode->get_endOfConstruct();

       // DQ (10/27/2007): Some input AST's have not been constructed properly so that the copy of the endOfConstruct was not made.
       // Warn about this but allow it for now so that the outliner can be allowed to work (under older semantics).
       // ROSE_ASSERT(end != NULL);
          if (end == NULL)
             {
               printf ("Warning, input to AST copy was not a correct AST (with valid endOfConstruct pointer) this = %p = %s \n",this,this->class_name().c_str());
             }
            else
             {
#if 0
            // Debugging information
               if (end->get_parent() == NULL)
                  {
                    printf ("Detected a result->get_endOfConstruct() with NULL parent for result = %p = %s \n",result,result->class_name().c_str());
                  }
#endif
               end->set_parent(locatedNode);
               ROSE_ASSERT(end->get_parent() != NULL);
             }

          SgExpression* expression = isSgExpression(result);
          if (isSgExpression(this) != NULL)
             {
               Sg_File_Info* operatorPosition = expression->get_operatorPosition();

            // Not all SgExpression IR nodes have a valid operatorPosition (only applies to actual operators)
               if (operatorPosition != NULL)
                  {
#if 0
                 // Debugging information
                    if (operatorPosition->get_parent() == NULL)
                       {
                         printf ("Detected a result->get_operatorPosition() with NULL parent for result = %p = %s \n",result,result->class_name().c_str());
                       }
#endif
                    operatorPosition->set_parent(expression);
                    ROSE_ASSERT(operatorPosition->get_parent() != NULL);
                  }
             }
        }

  // DQ (10/16/2007): Also set the Sg_File_Info parents for the SgInitializedName
     SgInitializedName* initializedName = isSgInitializedName(result);
     if (initializedName != NULL)
        {
       // If this is a SgLocatedNode then check the parents of the Sg_File_Info objects
          Sg_File_Info* start = initializedName->get_startOfConstruct();
          ROSE_ASSERT(start != NULL);
#if 0
       // Debugging information
          if (start->get_parent() == NULL)
             {
               printf ("Detected a result->get_startOfConstruct() with NULL parent for result = %p = %s \n",result,result->class_name().c_str());
             }
#endif
          start->set_parent(initializedName);
          ROSE_ASSERT(start->get_parent() != NULL);

#if 0
       // DQ (10/16/2007): Note that a SgInitializedName does not have a get_endOfConstruct() member function yet with g++ this does compile!
          Sg_File_Info* end = initializedName->get_endOfConstruct();

       // DQ (10/16/2007): For the moment allow the initializedName->get_endOfConstruct() to be NULL and issue a warning.
       // ROSE_ASSERT(end != NULL);
          if (end == NULL)
             {
               printf ("Detected a result->get_endOfConstruct() == NULL for result = %p = %s \n",result,result->class_name().c_str());
             }
            else
             {
               if (end->get_parent() == NULL)
                  {
                    printf ("Detected a result->get_endOfConstruct() with NULL parent for result = %p = %s \n",result,result->class_name().c_str());
                  }
               end->set_parent(initializedName);
               ROSE_ASSERT(end->get_parent() != NULL);
             }
#endif
        }

  // DQ (10/15/2007): Add everything to the map held internally so that we can more easily reference things like scopes.
     help.insertCopiedNodePair(this,result);

  // printf ("End of copy $CLASSNAME = %p = %s \n",this,SageInterface::get_name(this).c_str());

  // Record the depth of the copy so that we build an clear internal state (new feature) 
  // used to associated old and new symbols in the original AST and the copy of the AST.
     help.decrementDepth();

  // Test if this is the root of the copy!
     if (help.get_depth() == 0)
        {
       // This is the original calling node.

       // Call the fixup mechanism to correct details of the AST copy mechanism.
       // printf ("Calling $CLASSNAME::fixupCopy() (from root of AST being copied) \n");
#if ALT_FIXUP_COPY
       // DQ (11/7/2007): These need to be called separately (see documentation)
          fixupCopy_scopes (result,help);
          fixupCopy_symbols (result,help);
          fixupCopy_references (result,help);
#else
          fixupCopy(result,help);
#endif
       // Allow this to be called recursively, so accumulate the state.
       // Also, clear the state in the SgCopyHelp object.
       // help.clearState();
        }

     return result;
   }


