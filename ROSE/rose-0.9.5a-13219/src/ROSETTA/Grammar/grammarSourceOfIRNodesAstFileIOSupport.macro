
/* JH (02/02/2006) ROSETTA generated code, do not change!! */

//############################################################################
/* JH (02/02/2006) Constructor of the IR node $CLASSNAME that takes its 
 * corresponding StorageClass as parameter
 */
$CLASSNAME :: $CLASSNAME ( const $CLASSNAMEStorageClass& storageSource )  $PARENT_CLASSNAME
   {

CONSTRUCTOR_SOURCE

   }

//############################################################################
/* JH (11/23/2005) : computing the pointer to the passed global index, specific 
 * within the working AST. 
 */
$CLASSNAME*
$CLASSNAME_getPointerFromGlobalIndex ( unsigned long globalIndex )
   {
     $CLASSNAME* returnPointer = NULL;
     if ( globalIndex != 0 )
        {

#if FILE_IO_EXTRA_CHECK
          assert ( ( AST_FILE_IO::getAccumulatedPoolSizeOfNewAst( V_$CLASSNAME ) ) <= globalIndex ) ;
          assert ( globalIndex < (AST_FILE_IO::getAccumulatedPoolSizeOfNewAst ( V_$CLASSNAME + 1 ) ) );
#endif
          unsigned long localIndex = globalIndex - AST_FILE_IO::getAccumulatedPoolSizeOfNewAst ( V_$CLASSNAME )  
                                                 + AST_FILE_IO::getSizeOfMemoryPool ( V_$CLASSNAME );
          unsigned long positionInPool = localIndex % $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE ;
          unsigned long memoryBlock = (localIndex - positionInPool) / $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE ;

#if FILE_IO_EXTRA_CHECK
          // assert ( 0 <= memoryBlock && memoryBlock < Memory_Block_List.size() ) ;
          // assert ( 0 <= positionInPool && positionInPool < (unsigned long)(CLASS_ALLOCATION_POOL_SIZE) );
#endif

          returnPointer = &( ( ($CLASSNAME*)($CLASSNAME_Memory_Block_List[memoryBlock]) ) [positionInPool]) ;

#if FILE_IO_EXTRA_CHECK
          assert ( returnPointer != NULL ) ;
#endif
        }
     return returnPointer ;
   }

//############################################################################
/*JH (11/23/2005) : computing the pointer to the passed global index, specific 
  for the AST with the index astIndex
*/
$CLASSNAME*
$CLASSNAME_getPointerFromGlobalIndex ( AstSpecificDataManagingClass *astInPool, unsigned long globalIndex )
   {
     $CLASSNAME* returnPointer = NULL;
     if ( globalIndex != 0 )
        {

#if FILE_IO_EXTRA_CHECK
          assert ( ( AST_FILE_IO::getAccumulatedPoolSizeOfAst( astInPool, V_$CLASSNAME ) ) <= globalIndex ) ;
          assert ( globalIndex < (AST_FILE_IO::getAccumulatedPoolSizeOfAst ( astInPool, V_$CLASSNAME + 1 ) ) );
#endif
          unsigned long localIndex = globalIndex - AST_FILE_IO::getAccumulatedPoolSizeOfAst ( astInPool, V_$CLASSNAME )
                                                 + AST_FILE_IO::getSizeOfMemoryPoolUpToAst ( astInPool, V_$CLASSNAME );
          unsigned long positionInPool = localIndex % $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE ;
          unsigned long memoryBlock = (localIndex - positionInPool) / $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE ;

#if FILE_IO_EXTRA_CHECK
          // assert ( 0 <= memoryBlock && memoryBlock < Memory_Block_List.size() ) ;
          // assert ( 0 <= positionInPool && positionInPool < (unsigned long)(CLASS_ALLOCATION_POOL_SIZE) );
#endif

          returnPointer = &( ( ($CLASSNAME*)($CLASSNAME_Memory_Block_List[memoryBlock]) ) [positionInPool]) ;

#if FILE_IO_EXTRA_CHECK
          assert ( returnPointer != NULL ) ;
#endif
        }
     return returnPointer ;
   }

//############################################################################
/* JH (01/14/2006) Traverse memory pool, set global ids and return accumulated
 * pool size! We set for every valid object in the memory pool the freepointer
 * to the global index and increase the global index afterwards. For all the 
 * invalid objects (means address ranges within the memory pool that were not
 * returned by the new operator) the freepointer is set to NULL, in order to 
 * distinguish valid from invalid objects! 
 */
unsigned long
$CLASSNAME_getNumberOfValidNodesAndSetGlobalIndexInFreepointer( unsigned long numberOfPreviousNodes )
   {
     assert ( AST_FILE_IO::areFreepointersContainingGlobalIndices() == false );
     $CLASSNAME* pointer = NULL;
     unsigned long globalIndex = numberOfPreviousNodes ;
     std::vector < unsigned char* > :: const_iterator block;
     for ( block = $CLASSNAME_Memory_Block_List.begin(); block != $CLASSNAME_Memory_Block_List.end() ; ++block )
        {
          pointer = ($CLASSNAME*)(*block);
          for (int i = 0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE; ++i )
             {
            // DQ (6/6/2010): In reading in multiple files, when the extendMemoryPoolForFileIO() function is called,
            // we have entries with pointer[i].get_freepointer() set to NULL at the end of any newly allocated memory pool.
            // These are rare and so are a problem that is difficult to reproduce except when the CLASSNAME_CLASS_ALLOCATION_POOL_SIZE
            // is set to 1 to test the pool extention at the price of performance.  In this case we want to reset the
            // elements of the memory pool that have freepointer set to either AST_FileIO::IS_VALID_POINTER() or NULL.
            // This should not be a problem if the AST resd reset the freepointer to AST_FileIO::IS_VALID_POINTER()
            // properly; so this will have to be checked next.
            // if ( pointer[i].get_freepointer() == AST_FileIO::IS_VALID_POINTER() )
            // if ( (pointer[i].get_freepointer() == AST_FileIO::IS_VALID_POINTER()) || (pointer[i].get_freepointer() == NULL) )
               if ( pointer[i].get_freepointer() == AST_FileIO::IS_VALID_POINTER() )
                  {
                    pointer[i].set_freepointer(($CLASSNAME*)(globalIndex));
                    globalIndex++;
                  }
               else
                  {
                    pointer[i].set_freepointer(NULL);
                  }
              }
        }
     return globalIndex;
   }

//############################################################################
// JH (01/14/2006)
void
$CLASSNAME_resetValidFreepointers( )
   {
     assert ( AST_FILE_IO::areFreepointersContainingGlobalIndices() == true );
     $CLASSNAME* pointer = NULL;
     std::vector < unsigned char* > :: const_iterator block;
     $CLASSNAME* pointerOfLinkedList = NULL;
     for ( block = $CLASSNAME_Memory_Block_List.begin(); block != $CLASSNAME_Memory_Block_List.end() ; ++block )
        {
          pointer = ($CLASSNAME*)(*block);
          for (int i = 0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE; ++i )
             {
            // DQ (6/6/2010): This would seem to mark all of the rest of the entries in a memory block of the memory pool to be valid
            // even when they are not really used as valid IR nodes.  Debug this case when we have everything working for size 1
            // memory blocks!.
               if ( pointer[i].get_freepointer() != NULL )
                  {
                    pointer[i].set_freepointer(AST_FileIO::IS_VALID_POINTER()) ;
                  }
               else
                  {
                    if ( pointerOfLinkedList == NULL )
                       {
                         $CLASSNAME_Current_Link = &(pointer[i]);
                       }
                    else
                       {
                         printf ("In $CLASSNAME_resetValidFreepointers(): Resetting the freepointer of %p = %s from %p to %p \n",pointerOfLinkedList,pointer[i].class_name().c_str(),pointer[i].get_freepointer(),&(pointer[i]));
                         pointerOfLinkedList->set_freepointer(&(pointer[i]));
                      // DQ (6/6/2010): Temporary debugging...
                         ROSE_ASSERT(false);
                       }
                    pointerOfLinkedList = &(pointer[i]);
                  }
              }
        }

     if ( pointerOfLinkedList != NULL )
        {
          printf ("In $CLASSNAME_resetValidFreepointers(): Resetting the freepointer of %p = %s from %p to %p \n",pointerOfLinkedList,pointerOfLinkedList->class_name().c_str(),pointerOfLinkedList->get_freepointer(),(void*)NULL);
          pointerOfLinkedList->set_freepointer(NULL);
       // DQ (6/6/2010): Temporary debugging...
          ROSE_ASSERT(false);
        }

     return ;
   }

//############################################################################
/* JH (01/14/2006) clearing the memory pool. This method deletes all objects 
 * within the memory pool and resets the freepointers, in order to achieve a 
 * linked list, that has no jumps and starts at the beginning! This function 
 * does not extend the memory pool, since we do not delete any memory blocks,
 * but delete the valid objects.  
 */
void
$CLASSNAME_clearMemoryPool( )
   {
  // printf ("Inside of $CLASSNAME_clearMemoryPool() \n");

     $CLASSNAME* pointer = NULL, *tempPointer = NULL;
     std::vector < unsigned char* > :: const_iterator block;
     if ( $CLASSNAME_Memory_Block_List.empty() == false )
        {
  // JH (08/08/2006) commented out, since this deletion of the 
  // memory pool contents caused the problems. We now delete the 
  // memory pools entities by calling an delete on the roots of the 
  // stored ASTs, done in AST_FILE_IO::clearAllMemoryPools()
#if 0
       // first, we delete the valid objects within the memory pool
          block = Memory_Block_List.begin();
          while (  block != Memory_Block_List.end() )
             {
               pointer = ($CLASSNAME*) (*block);
               for (int i = 0; i < CLASS_ALLOCATION_POOL_SIZE; ++i)
                  {
                    if (pointer->p_freepointer != NULL )
                       {
                         delete ( pointer );
                       }
                     pointer++;
                  }
                ++block;
             }
#endif
       // JH (08/08/2006) However, since the deletion may leave the memory pool
       // not in the the strict ordering we want it to be, we still reset the 
       // freepointers, in order to have a linked list, without any jumps
          block = $CLASSNAME_Memory_Block_List.begin() ;
          $CLASSNAME_Current_Link = ($CLASSNAME*) (*block);

       // second, we reset the freepointers,in order to yield a valid linked list
          while ( block != $CLASSNAME_Memory_Block_List.end() )
             {
               pointer = ($CLASSNAME*) (*block);
               if ( tempPointer != NULL )
                  {
                    tempPointer->set_freepointer(pointer);
                  }
               for (int i = 0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE - 1; ++i)
                  {
                    pointer[i].set_freepointer(&(pointer[i+1]));
                  }
                pointer[$CLASSNAME_CLASS_ALLOCATION_POOL_SIZE-1].set_freepointer(NULL);
                tempPointer = &(pointer[$CLASSNAME_CLASS_ALLOCATION_POOL_SIZE-1]);
                ++block;
             }
        }
   }


//############################################################################
// JH (01/14/2006) Traversal for the MemoryPool, used for Ast file io
#if 0
void
$CLASSNAME::extendMemoryPoolForFileIO( )
   {
     $CLASSNAME* pointer = NULL;
     int blockIndex = Memory_Block_List.size();
     unsigned long newPoolSize = AST_FILE_IO::getSizeOfMemoryPool(V_$CLASSNAME) + 
                                 AST_FILE_IO::getPoolSizeOfNewAst(V_$CLASSNAME);
     while ( (unsigned long) (blockIndex * CLASS_ALLOCATION_POOL_SIZE) < newPoolSize)
       {
         pointer = ($CLASSNAME*) ROSE_MALLOC ( CLASS_ALLOCATION_POOL_SIZE * sizeof($CLASSNAME) );
         assert( pointer != NULL );
         Memory_Block_List.push_back( (unsigned char*)(pointer) );
         if ( 0 < blockIndex )
            {
              (($CLASSNAME*)(Memory_Block_List[blockIndex-1]))[ CLASS_ALLOCATION_POOL_SIZE - 1 ].p_freepointer = pointer;
            }
         else
            {
              Current_Link = pointer;
            }
         for (int i = 0; i < CLASS_ALLOCATION_POOL_SIZE-1; ++i)
            {
              pointer [ i ].p_freepointer = &(pointer[i+1]);
            }
         pointer[ CLASS_ALLOCATION_POOL_SIZE -1 ].p_freepointer = NULL;
         blockIndex++;
       }
   }
#endif

// DQ (4/30/2006): New version of code added (from Jochen) to fix bug in
//                 reading multiple binary files to for a single AST.
/////////// new version ////////////////////////////////
//############################################################################
// JH (01/14/2006) Traversal for the MemoryPool, used for Ast file io
void
$CLASSNAME_extendMemoryPoolForFileIO( )
  {
    $CLASSNAME* pointer = NULL;
    bool firstEntry = true;
    int blockIndex = $CLASSNAME_Memory_Block_List.size();
    unsigned long newPoolSize = AST_FILE_IO::getSizeOfMemoryPool(V_$CLASSNAME) +
                                AST_FILE_IO::getPoolSizeOfNewAst(V_$CLASSNAME);
#if 0
    printf ("blockIndex = %d newPoolSize = %zu AST_FILE_IO::getSizeOfMemoryPool(V_$CLASSNAME) = %zu AST_FILE_IO::getPoolSizeOfNewAst(V_$CLASSNAME) = %zu $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE = %d \n",
         blockIndex,newPoolSize,AST_FILE_IO::getSizeOfMemoryPool(V_$CLASSNAME),AST_FILE_IO::getPoolSizeOfNewAst(V_$CLASSNAME),$CLASSNAME_CLASS_ALLOCATION_POOL_SIZE);
#endif

    while ( (unsigned long) (blockIndex * $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE) < newPoolSize)
      {
#if 0
        printf ("     Allocating a new block: blockIndex = %d \n",blockIndex);
#endif
        pointer = ($CLASSNAME*) ROSE_MALLOC ( $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE * sizeof($CLASSNAME) );
        assert( pointer != NULL );

        $CLASSNAME_Memory_Block_List.push_back( (unsigned char*)(pointer) );

        if ( 0 < blockIndex )
           {
          // Set the freepointer of the last entry in the previous block to point to the new block list (just allocated).
          // This is a key bugfix for ROSE.  We don't want to modify the previously read AST so avoid resetting the 
          // the freepointer of the last entry in list (from the previous AST).  So just skip the first iteration.
          // (($CLASSNAME*)($CLASSNAME_Memory_Block_List[blockIndex-1]))[ $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE - 1 ].set_freepointer(pointer);
          // if ( $CLASSNAME_Current_Link != NULL )
          // if ( firstEntry == false )
             if ( $CLASSNAME_Current_Link != NULL )
                {
               // DQ (6/6/2010): Avoid setting the free point of any node from the previously read AST.
               // Note that $CLASSNAME_Current_Link will be NULL or VALID depending on if there is a 
               // next entry in the memory pool and we don't need the freepointer to point to it.
               // This fixes (I hope) a critical problem that prevented multiple binary file AST's from
               // being read in from disk and was a block to the expanded use of AST merge.
                  (($CLASSNAME*)($CLASSNAME_Memory_Block_List[blockIndex-1]))[ $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE - 1 ].set_freepointer(pointer);
                }
             firstEntry = false;
           }

        if ( $CLASSNAME_Current_Link == NULL )
           {
          // Set the Current_Link so that the the new operator will use the just allocated block list.
             $CLASSNAME_Current_Link = pointer;
           }

        for (int i = 0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE-1; ++i)
           {
          // Set the freepointer of each entry in the newly allocated block to point to the next entry in the same block (forms a link list).
             pointer [ i ].set_freepointer(&(pointer[i+1]));
           }

     // Set the freepointer of the last entry in the newly allocated block to NULL.
        pointer[ $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE -1 ].set_freepointer(NULL);

        blockIndex++;
      }
  }

//############################################################################
/* JH (04/01/2006) Method that delivers the last valid object within a memory
 * pool. This could be used, to read new ASTs even, if the memory pools are 
 * not compressed. However, that stuff is not yet implemented! 
 */
unsigned long
$CLASSNAME_getNumberOfLastValidPointer()
   {
      $CLASSNAME* testPointer = ($CLASSNAME*)($CLASSNAME_Memory_Block_List.back());
      unsigned long localIndex = $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE - 1;
      while (testPointer[localIndex].get_freepointer() !=  AST_FileIO::IS_VALID_POINTER() )
         {
           localIndex--;
         }
      return (localIndex + $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE * ($CLASSNAME_Memory_Block_List.size()-1));
   }

//############################################################################
/* JH (01/14/2006) function that steps through the valid IR nodes in the 
 * memory pool and initializes the data member in class $CLASSNAMEStroageClass
 * from its counterpart of $CLASSNAME. The return value is just for checking, 
 * that the whole StorageClassArray is initialized!
 */
unsigned long
$CLASSNAME_initializeStorageClassArray( $CLASSNAMEStorageClass *storageArray )
   {
     unsigned long storageCounter = 0;
     std::vector < unsigned char* > :: const_iterator block = $CLASSNAME_Memory_Block_List.begin();
     $CLASSNAME* pointer = NULL;
     while ( block < $CLASSNAME_Memory_Block_List.end() )
        {
          pointer = ($CLASSNAME*) (*block);
          for ( int i = 0; i < $CLASSNAME_CLASS_ALLOCATION_POOL_SIZE; ++i )
             {
               if ( pointer->get_freepointer() != NULL )
                  {
                    storageArray->pickOutIRNodeData (pointer) ;
                    storageArray++;
                    storageCounter++;
                  }
               pointer++;
             }
           block++;
        }
     return storageCounter;
   }

