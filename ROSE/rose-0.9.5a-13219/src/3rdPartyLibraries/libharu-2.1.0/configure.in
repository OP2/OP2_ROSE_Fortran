dnl this file has to be processed by autoconf
dnl run ./buildconf.sh to get a working ./configure script
AC_PREREQ(2.60)

AC_INIT([libhpdf],[2.1.0])
AC_CONFIG_SRCDIR([README])
AC_CONFIG_SRCDIR(include/hpdf.h)
AC_CONFIG_HEADERS(include/hpdf_config.h)
AM_INIT_AUTOMAKE([no-define])
AM_MAINTAINER_MODE

dnl Check for programs
AC_PROG_CC
AC_PROG_LD
AM_PROG_LIBTOOL
AC_PROG_INSTALL

dnl Check for size_t
AC_TYPE_SIZE_T

dnl Check for header files
AC_CHECK_HEADERS(string.h strings.h unistd.h stdint.h)

AC_CHECK_LIB([m], [floor], [LIBS="$LIBS -lm"], [AC_MSG_ERROR([can't continue without libm])])

DEFAULT_INSTALL_PREFIX="/usr/local"
STANDARD_PREFIXES="/usr /usr/local /opt /local"

HPDF_MAJOR_VERSION=2
HPDF_MINOR_VERSION=1
HPDF_BUGFIX_VERSION=0
HPDF_EXTRA_VERSION=""

HPDF_VERSION_TEXT="${HPDF_MAJOR_VERSION}.${HPDF_MINOR_VERSION}.${HPDF_BUGFIX_VERSION}${HPDF_EXTRA_VERSION}"
HPDF_VERSION_ID=`expr [$]HPDF_MAJOR_VERSION \* 10000 + [$]HPDF_MINOR_VERSION \* 100 + [$]HPDF_BUGFIX_VERSION`

dnl generate hpdf_version.h {{{
echo "/* automatically generated by configure */" > hpdf_version.h.new
echo "/* edit configure.in to change version number */" >> hpdf_version.h.new
echo "#define HPDF_MAJOR_VERSION $HPDF_MAJOR_VERSION" >> hpdf_version.h.new
echo "#define HPDF_MINOR_VERSION $HPDF_MINOR_VERSION" >> hpdf_version.h.new
echo "#define HPDF_BUGFIX_VERSION $HPDF_BUGFIX_VERSION" >> hpdf_version.h.new
echo "#define HPDF_EXTRA_VERSION \"$HPDF_EXTRA_VERSION\"" >> hpdf_version.h.new
echo "#define HPDF_VERSION_TEXT \"$HPDF_VERSION_TEXT\"" >> hpdf_version.h.new
echo "#define HPDF_VERSION_ID $HPDF_VERSION_ID" >> hpdf_version.h.new
cmp hpdf_version.h.new $srcdir/include/hpdf_version.h >/dev/null 2>&1
if test $? -ne 0 ; then
  rm -f $srcdir/include/hpdf_version.h && mv hpdf_version.h.new $srcdir/include/hpdf_version.h && \
  echo 'Updated include/hpdf_version.h'
else
  rm -f hpdf_version.h.new
fi
dnl }}}

dnl {{{ --enable-debug
AC_ARG_ENABLE(debug,
  [AS_HELP_STRING([--enable-debug],[enable debugging symbols and compile flags])
  ],
  [
    if test x"$enableval" = xyes ; then
      debug="yes"
    else
      debug="no"
    fi
  ]
)

if test x"$debug" = xyes ; then
  AC_DEFINE([HPDF_DEBUG], [], [debug build])

  if test x"$GCC" = xyes; then

    dnl Remove any optimization flags from CFLAGS
    changequote({,})
    CFLAGS=`echo "$CFLAGS" | /usr/bin/sed -e 's/-O[0-9s]*//g'`
    CFLAGS=`echo "$CFLAGS" | /usr/bin/sed -e 's/-g[0-2]\? //g'`
    changequote([,])
    CFLAGS="$CFLAGS -g3 -Wall -O0"

  fi

  dnl Do not strip symbols from developer object files.
  INSTALL_STRIP_FLAG=""
else
  dnl Make sure to strip symbols from non-developer object files.
  INSTALL_STRIP_FLAG="-s"
fi
dnl }}}

dnl {{{ --enable-debug-trace
AC_ARG_ENABLE(debug-trace,
  [AS_HELP_STRING([--enable-debug-trace],[enable debug trace (only available along with --enable-debug)])
  ],
  [
    if test x"$enableval" = xyes && test x"$debug" = xyes; then
      debug_trace="yes"
    else
      debug_trace="no"
    fi
  ]
)

if test x"$debug_trace" = xyes ; then
  AC_DEFINE([HPDF_DEBUG_TRACE], [], [debug trace enabled])
fi
dnl }}}

dnl {{{ --with-libdir
AC_ARG_WITH(libdir,
  [AS_HELP_STRING([--with-libdir],[look for libraries in .../NAME rather than .../lib])
  ],
  [LIBDIR=$with_libdir],
  [LIBDIR=lib]
)
dnl }}}

dnl {{{ --with-zlib
AC_ARG_WITH(zlib,
  [AS_HELP_STRING([--with-zlib],[specify Zlib install prefix])
  ],
  [ ],
  [with_zlib=yes]
)

if test "x$with_zlib" = "xno"; then
  AC_DEFINE([HPDF_NOZLIB], [], [zlib is not available])
else
  AC_MSG_CHECKING([Zlib install prefix])

  if test "x$with_zlib" = "xyes"; then
    for i in `echo "$STANDARD_PREFIXES"`; do
      if test -f "$i/include/zlib.h"; then
        ZLIB_DIR="$i"
        break;
      fi
    done
  else
    if test -f "$with_zlib/include/zlib.h"; then
      ZLIB_DIR="$with_zlib"
      break;
    else
      AC_MSG_ERROR([Can't find Zlib headers under $with_zlib directory]);
    fi
  fi

  if test "x$ZLIB_DIR" = "x"; then
    AC_MSG_ERROR([Unable to locate Zlib headers, please use --with-zlib=<DIR>]);
  fi

  AC_MSG_RESULT([$ZLIB_DIR])
  LDFLAGS="$LDFLAGS -L$ZLIB_DIR/$LIBDIR"
  CFLAGS="$CFLAGS -I$ZLIB_DIR/include"
  LIBS="$LIBS -lz"

  AC_CHECK_LIB([z], [deflate], [], [
    AC_MSG_ERROR([deflate() is missing, check config.log for more details])
  ])

  HAVE_ZLIB=yes
fi
dnl }}}

dnl {{{ --with-png
AC_ARG_WITH(png,
  [AS_HELP_STRING([--with-png],[specify libpng install prefix])
  ],
  [ ],
  [with_png=yes]
)

if test "x$with_png" = "xno"; then
  AC_DEFINE([HPDF_NOPNGLIB], [], [libpng is not available])
else

  if test "x$HAVE_ZLIB" != "xyes"; then
    AC_MSG_ERROR([PNG support requires Zlib, but it's not enabled. Either enable Zlib or disable PNG support.]);
  fi

  AC_MSG_CHECKING([libpng install prefix])

  if test "x$with_png" = "xyes"; then
    for i in `echo "$STANDARD_PREFIXES"`; do
      if test -f "$i/include/png.h"; then
        LIBPNG_DIR="$i"
        break;
      fi
    done
  else
    if test -f "$with_png/include/png.h"; then
      LIBPNG_DIR="$with_png"
      break;
    else
      AC_MSG_ERROR([Can't find libpng headers under $with_png directory]);
    fi
  fi

  if test "x$LIBPNG_DIR" = "x"; then
    AC_MSG_ERROR([Unable to locate libpng headers, please use --with-png=<DIR>]);
  fi

  AC_MSG_RESULT([$LIBPNG_DIR])
  LDFLAGS="$LDFLAGS -L$LIBPNG_DIR/$LIBDIR"
  CFLAGS="$CFLAGS -I$LIBPNG_DIR/include"
  LIBS="$LIBS -lpng"

  AC_CHECK_LIB([png], [png_init_io], [], [
    AC_MSG_ERROR([png_init_io() is missing, check config.log for more details])
  ])
fi
dnl }}}

dnl link against libm
LIBS="$LIBS -lm"
AC_SUBST(INSTALL_STRIP_FLAG)

AC_CONFIG_FILES([Makefile src/Makefile include/Makefile])
AC_OUTPUT

# vim600: expandtab sw=2 ts=2 sts=2 fdm=marker
