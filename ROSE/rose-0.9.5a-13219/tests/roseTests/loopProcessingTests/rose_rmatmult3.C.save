/* Restrict macros for various compilers */
#ifdef __GNUC__
#define RESTRICT __restrict
#elif defined __KCC
#define RESTRICT restrict
#else
#define RESTRICT
#endif
#define LOOP_IMPLEMENTATION 2
#define VALIDITY_CHECK 0
#define PC(ii,jj,kk) \
ii + (jj)*jp + (kk)*kp
#define COEFF_POINTER_INCREMENT(i) \
dbl +=i; dbc +=i; dbr +=i; dcl +=i; dcc +=i; dcr +=i; dfl +=i; dfc +=i; dfr +=i;\
cbl +=i; cbc +=i; cbr +=i; ccl +=i; ccc +=i; ccr +=i; cfl +=i; cfc +=i; cfr +=i;\
ubl +=i; ubc +=i; ubr +=i; ucl +=i; ucc +=i; ucr +=i; ufl +=i; ufc +=i; ufr +=i;
#define POINTER_INCREMENT(i) \
dbl +=i; dbc +=i; dbr +=i; dcl +=i; dcc +=i; dcr +=i; dfl +=i; dfc +=i; dfr +=i;\
cbl +=i; cbc +=i; cbr +=i; ccl +=i; ccc +=i; ccr +=i; cfl +=i; cfc +=i; cfr +=i;\
ubl +=i; ubc +=i; ubr +=i; ucl +=i; ucc +=i; ucr +=i; ufl +=i; ufc +=i; ufr +=i;\
xdbl +=i; xdbc +=i; xdbr +=i; xdcl +=i; xdcc +=i; xdcr +=i; xdfl +=i; xdfc +=i; xdfr +=i;\
xcbl +=i; xcbc +=i; xcbr +=i; xccl +=i; xccc +=i; xccr +=i; xcfl +=i; xcfc +=i; xcfr +=i;\
xubl +=i; xubc +=i; xubr +=i; xucl +=i; xucc +=i; xucr +=i; xufl +=i; xufc +=i; xufr +=i; \
lhs +=i;
#define POINTER_INCREMENT_ONE \
dbl++; dbc++; dbr++; dcl++; dcc++; dcr++; dfl++; dfc++; dfr++; cbl++; cbc++; \
cbr++; ccl++; ccc++; ccr++; cfl++; cfc++; cfr++; ubl++; ubc++; ubr++; ucl++; \
ucc++; ucr++; ufl++; ufc++; ufr++; xdbl++; xdbc++; xdbr++; xdcl++; xdcc++; xdcr++; \
xdfl++; xdfc++; xdfr++; xcbl++; xcbc++; xcbr++; xccl++; xccc++; xccr++; xcfl++; xcfc++; \
xcfr++; xubl++; xubc++; xubr++; xucl++; xucc++; xucr++; xufl++; xufc++; xufr++; lhs++;
extern void perfometer();

void rmatmult3(int imin,int imax,int jmin,int jmax,int kmin,int kmax,int jp,int kp,double *__restrict__ dbl,double *__restrict__ dbc,double *__restrict__ dbr,double *__restrict__ dcl,double *__restrict__ dcc,double *__restrict__ dcr,double *__restrict__ dfl,double *__restrict__ dfc,double *__restrict__ dfr,double *__restrict__ cbl,double *__restrict__ cbc,double *__restrict__ cbr,double *__restrict__ ccl,double *__restrict__ ccc,double *__restrict__ ccr,double *__restrict__ cfl,double *__restrict__ cfc,double *__restrict__ cfr,double *__restrict__ ubl,double *__restrict__ ubc,double *__restrict__ ubr,double *__restrict__ ucl,double *__restrict__ ucc,double *__restrict__ ucr,double *__restrict__ ufl,double *__restrict__ ufc,double *__restrict__ ufr,double *__restrict__ x,double *__restrict__ b)
{
  int m;
  char *me = "rmatmult3";
  int i;
  int ii;
  int jj;
  int kk;
  double *__restrict__ lhs = b;
  double *__restrict__ xdbl = (((x - kp) - jp) - 1);
  double *__restrict__ xdbc = ((x - kp) - jp);
  double *__restrict__ xdbr = (((x - kp) - jp) + 1);
  double *__restrict__ xdcl = ((x - kp) - 1);
  double *__restrict__ xdcc = (x - kp);
  double *__restrict__ xdcr = ((x - kp) + 1);
  double *__restrict__ xdfl = (((x - kp) + jp) - 1);
  double *__restrict__ xdfc = ((x - kp) + jp);
  double *__restrict__ xdfr = (((x - kp) + jp) + 1);
  double *__restrict__ xcbl = ((x - jp) - 1);
  double *__restrict__ xcbc = (x - jp);
  double *__restrict__ xcbr = ((x - jp) + 1);
  double *__restrict__ xccl = (x - 1);
  double *__restrict__ xccc = x;
  double *__restrict__ xccr = (x + 1);
  double *__restrict__ xcfl = ((x + jp) - 1);
  double *__restrict__ xcfc = (x + jp);
  double *__restrict__ xcfr = ((x + jp) + 1);
  double *__restrict__ xubl = (((x + kp) - jp) - 1);
  double *__restrict__ xubc = ((x + kp) - jp);
  double *__restrict__ xubr = (((x + kp) - jp) + 1);
  double *__restrict__ xucl = ((x + kp) - 1);
  double *__restrict__ xucc = (x + kp);
  double *__restrict__ xucr = ((x + kp) + 1);
  double *__restrict__ xufl = (((x + kp) + jp) - 1);
  double *__restrict__ xufc = ((x + kp) + jp);
  double *__restrict__ xufr = (((x + kp) + jp) + 1);
  double myflops = 0.0;
  static int firstPass = 1;
  register double temp;
  for (kk = kmin; kk <= -1 + kmax; kk += 1) {
    for (jj = jmin; jj <= -1 + jmax; jj += 1) {
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((dbl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + ((kk - 1) * kp)])) + ((dbc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + ((kk - 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((dbr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + ((kk - 1) * kp)]))) + ((dcl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + ((kk - 1) * kp)]))) + ((dcc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + ((kk - 1) * kp)]))) + ((dcr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + ((kk - 1) * kp)]))) + ((dfl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + ((kk - 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((dfc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + ((kk - 1) * kp)]))) + ((dfr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + ((kk - 1) * kp)]))) + ((cbl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + (kk * kp)]))) + ((cbc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + (kk * kp)]))) + ((cbr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + (kk * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((ccl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + (kk * kp)]))) + ((ccc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + (kk * kp)]))) + ((ccr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + (kk * kp)]))) + ((cfl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + (kk * kp)]))) + ((cfc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + (kk * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((cfr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + (kk * kp)]))) + ((ubl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ubc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ubr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj - 1) * jp)) + ((kk + 1) * kp)]))) + ((ucl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + (jj * jp)) + ((kk + 1) * kp)])));
      }
      for (ii = imin; ii <= -1 + imax; ii += 1) {
        b[(ii + (jj * jp)) + (kk * kp)] = (((((b[(ii + (jj * jp)) + (kk * kp)] + ((ucc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + (jj * jp)) + ((kk + 1) * kp)]))) + ((ucr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + (jj * jp)) + ((kk + 1) * kp)]))) + ((ufl[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii - 1) + ((jj + 1) * jp)) + ((kk + 1) * kp)]))) + ((ufc[(ii + (jj * jp)) + (kk * kp)]) * (x[(ii + ((jj + 1) * jp)) + ((kk + 1) * kp)]))) + ((ufr[(ii + (jj * jp)) + (kk * kp)]) * (x[((ii + 1) + ((jj + 1) * jp)) + ((kk + 1) * kp)])));
      }
    }
  }
#if VALIDITY_CHECK == 1
#endif
#elif LOOP_IMPLEMENTATION == 3
#if VALIDITY_CHECK == 1
#endif /* end of VALIDITY_CHECK */
/* end of ii loop */
/* end of jj loop */
/* end of kk loop */
#if VALIDITY_CHECK == 1
#endif  
#elif LOOP_IMPLEMENTATION == 4
#if VALIDITY_CHECK == 1
#endif /* end of VALIDITY_CHECK */
/* end of ii loop */
/* end of jj loop */
/* end of kk loop */
#if VALIDITY_CHECK == 1
#endif
#elif LOOP_IMPLEMENTATION == 5
#if VALIDITY_CHECK == 1
#endif /* end of VALIDITY_CHECK */        
/* shift xdbl back to where it started from +1 */
/* end of ii loop */
/* end of jj loop */
/* end of kk loop */
#if VALIDITY_CHECK == 1
#endif  
#elif LOOP_IMPLEMENTATION == 6
#if VALIDITY_CHECK == 1
#endif /* end of VALIDITY_CHECK */
/* end of ii loop */
/* end of jj loop */
/* end of kk loop */
#if VALIDITY_CHECK == 1
#endif
#elif LOOP_IMPLEMENTATION == 7
#if VALIDITY_CHECK == 1
#endif /* end of VALIDITY_CHECK */
/* end of ii loop */
/* end of jj loop */
/* end of kk loop */
#if VALIDITY_CHECK == 1
#endif
#endif
  myflops += (((53.0 * ((imax - imin))) * ((jmax - jmin))) * ((kmax - kmin)));
}
