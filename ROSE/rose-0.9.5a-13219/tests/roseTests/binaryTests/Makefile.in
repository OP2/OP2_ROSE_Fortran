# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic 
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2)

###############################################################################################################################
# The executables and their test cases...
###############################################################################################################################

# Parses an executable to produce a dump file (*.dump), an assembly file (rose_*.s), and a new executable created by unparsing
# the AST (*.new). The *.new file is typically identical to the original executable.

#Test the binary control flow graph that uses the semantic representation to perform an accurate analysis

#Test the binary call graph that uses the semantic representation to perform an accurate analysis

# Tests ELF string table reallocation functions by changing some strings.  At first glance this would appear to be something
# quite easy to do, but it turns out to involve lots of details.

# Reads in an ELF executable and changes the byte order from little-endian to big-endian or vice versa and writes out a new
# file. Note that the byte order change affects the ELF file format but not the executable described by that format.

# Reads in an ELF executable and changes the word size from eight to four bytes or vice versa and writes out a new file. Note
# that the word size change affects the ELF file format but not the executable described by that format.

# Demonstrates how to change names of dynamically-linked functions. This example reads an ELF executable dynamically linked to
# the MPI library and changes all calls to PMPI_* functions with calls to XMPI_* functions. See the top of the source file
# for more details.

# Demonstrates how to build an ELF executable from scratch. Lots of comments in the source code. The resulting file is executable
# on an x86 Linux using syscall 1 to exit with a particular value.

# Demonstrates how to build a PE executable from scratch. This demo is not as complete at the ELF version, but does show how to
# create a file that contains multiple format headers (a DOS header and a PE header).

# Changes the size and/or location of a section in an executable file.

# Finds constant values and propagates them across instructions

# Finds constant values and propagates them across instructions using an ABI

# Uses VirtualMachineSemantics semantic analysis policy

# Use SymbolicSemantics semantic analysis policy

# Use SymbolicSemantics with YicesSolver policy, invoking "yices" executable. We should be able
# to compile this test even when the "yices" command is not available. However, we won't be able
# to test it if we don't have it.

# Use SymbolicSemantics with YicesSolver, linked to Yikes library. We should be able to compile
# this test even when the "yices" library is not available. However, we won't be able to run the
# test if we don't have the library.

# Disassembles an executable according to various command-line switches.

# Disassemble a file containing bare instructions

# Program to show function boundary information for a binary executable

# Program to add read-only data to ELF core dumps.

# Program that encodes/decodes data similar to ROT-13 but acceping binary data

# Program to test the assembler (see also "disassemble --assemble")

# Program to test that we can write and then read an AST for a binary executable

# Program to test the RegisterDescriptor and RegisterDictionary classes.
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_1 = execFormatsTest \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCFG testBinCG \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfStrtab testElfByteOrder \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfWordSize testElfSchulz \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfConstruct \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testPeConstruct \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstants findConstantsABI \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	virtualMachineSemantics \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	symbolicSemantics \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsExe \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsLib disassemble \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testEtherInsns \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	expandCoreDump rot13 \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler testAstIO \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testRegisters
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_2 = execFormatsTest.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCFG.passed testBinCG.C \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfStrtab.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfByteOrder.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfWordSize.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfSchulz-1.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfSchulz-2.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfConstruct.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testPeConstruct.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstants.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstantsABI.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	virtualMachineSemantics.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	symbolicSemantics.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_3 = execFormatsTest.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCFG.conf testBinCG.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfStrtab.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfByteOrder.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfWordSize.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfSchulz.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfConstruct.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testPeConstruct.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstants.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstantsABI.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	virtualMachineSemantics.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	symbolicSemantics.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsExe.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	semantics.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsLib.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassemble.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassemble.ans assembler.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testEtherInsns.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_1.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_2.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_3.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	expandCoreDump.conf rot13.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler.ans \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAstIO.conf \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testRegisters.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_4 = cfg_x86.dot cfg_x86.dot \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	a.out a.out \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	arm-ctrlaltdel.dump-1 \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	arm-ctrlaltdel.dump-2 \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	arm-ctrlaltdel.dump-3
@HAVE_YICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_5 = yicesSemanticsExe.passed
@HAVE_LIBYICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_6 = yicesSemanticsLib.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_7 = disassemble.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	assembler.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testEtherInsns.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_1.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_2.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries_3.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	expandCoreDump.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rot13.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAstIO.passed \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testRegisters.passed

# Not sure what this does.
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_8 = testLibraryDb
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_9 = testLibraryDb.passed
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_10 = testLibraryDb.conf
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_11 = test.db

###############################################################################################################################
# Miscellaneous....
###############################################################################################################################

# Don't delete things indiscriminately--sometimes developers have other related files that should not be touched!
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__append_12 = $(STATIC_TEST_TARGETS) $(patsubst %.passed, %.failed, $(STATIC_TEST_TARGETS))
subdir = tests/roseTests/binaryTests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acmacros/canonicalize-symlink.m4 \
	$(top_srcdir)/acmacros/compiler-ar.m4 \
	$(top_srcdir)/acmacros/compiler-id.m4 \
	$(top_srcdir)/acmacros/configure-log.m4 \
	$(top_srcdir)/acmacros/pkg.m4 $(top_srcdir)/config/EDG.m4 \
	$(top_srcdir)/config/ROSE.m4 \
	$(top_srcdir)/config/ac_pkg_swig.m4 \
	$(top_srcdir)/config/ax_boost_base.m4 \
	$(top_srcdir)/config/ax_boost_date_time.m4 \
	$(top_srcdir)/config/ax_boost_filesystem.m4 \
	$(top_srcdir)/config/ax_boost_program_options.m4 \
	$(top_srcdir)/config/ax_boost_regex.m4 \
	$(top_srcdir)/config/ax_boost_system.m4 \
	$(top_srcdir)/config/ax_boost_thread.m4 \
	$(top_srcdir)/config/ax_boost_wave.m4 \
	$(top_srcdir)/config/ax_lib_mysql.m4 \
	$(top_srcdir)/config/ax_lib_sqlite3.m4 \
	$(top_srcdir)/config/ax_with_prog.m4 \
	$(top_srcdir)/config/choose-backend-compiler.m4 \
	$(top_srcdir)/config/compiler-defs.m4 \
	$(top_srcdir)/config/determinte-os.m4 \
	$(top_srcdir)/config/enable-rosehpct.m4 \
	$(top_srcdir)/config/generate-backend-compiler-specific-headers.m4 \
	$(top_srcdir)/config/libxml.m4 \
	$(top_srcdir)/config/mdl_have_opengl.m4 \
	$(top_srcdir)/config/qrose_indigo_1.m4 \
	$(top_srcdir)/config/qrose_indigo_1_windows.m4 \
	$(top_srcdir)/config/support-GraphViz.m4 \
	$(top_srcdir)/config/support-IntelPin.m4 \
	$(top_srcdir)/config/support-backstroke.m4 \
	$(top_srcdir)/config/support-bddbddb.m4 \
	$(top_srcdir)/config/support-doxygen.m4 \
	$(top_srcdir)/config/support-dwarf.m4 \
	$(top_srcdir)/config/support-edg-debugging.m4 \
	$(top_srcdir)/config/support-gcc-omp.m4 \
	$(top_srcdir)/config/support-gomp-omp.m4 \
	$(top_srcdir)/config/support-haskell.m4 \
	$(top_srcdir)/config/support-ida.m4 \
	$(top_srcdir)/config/support-insure.m4 \
	$(top_srcdir)/config/support-java.m4 \
	$(top_srcdir)/config/support-libffi.m4 \
	$(top_srcdir)/config/support-llvm.m4 \
	$(top_srcdir)/config/support-maple.m4 \
	$(top_srcdir)/config/support-omp.m4 \
	$(top_srcdir)/config/support-php.m4 \
	$(top_srcdir)/config/support-purify.m4 \
	$(top_srcdir)/config/support-python.m4 \
	$(top_srcdir)/config/support-rose.m4 \
	$(top_srcdir)/config/support-rted.m4 \
	$(top_srcdir)/config/support-sat.m4 \
	$(top_srcdir)/config/support-ssl.m4 \
	$(top_srcdir)/config/support-visualization.m4 \
	$(top_srcdir)/config/support-windows.m4 \
	$(top_srcdir)/config/support-yices.m4 \
	$(top_srcdir)/config/swig_enable_cxx.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/rose_config.h
CONFIG_CLEAN_FILES =
@USE_BINARY_ANALYSIS_TESTS_TRUE@am__EXEEXT_1 =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	execFormatsTest$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCFG$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCG$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfStrtab$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfByteOrder$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfWordSize$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfSchulz$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfConstruct$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testPeConstruct$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstants$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	findConstantsABI$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	virtualMachineSemantics$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	symbolicSemantics$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsExe$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	yicesSemanticsLib$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassemble$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testEtherInsns$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	expandCoreDump$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rot13$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAstIO$(EXEEXT) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testRegisters$(EXEEXT)
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am__EXEEXT_2 = testLibraryDb$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__disassemble_SOURCES_DIST = disassemble.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_disassemble_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassemble.$(OBJEXT)
disassemble_OBJECTS = $(am_disassemble_OBJECTS)
am__DEPENDENCIES_1 =
@ROSE_USE_SQLITE_DATABASE_TRUE@am__DEPENDENCIES_2 =  \
@ROSE_USE_SQLITE_DATABASE_TRUE@	$(am__DEPENDENCIES_1)
@HAVE_LIBYICES_TRUE@am__DEPENDENCIES_3 =  \
@HAVE_LIBYICES_TRUE@	@YICES_PREFIX@/lib/libyices.a
@ROSE_USE_PHP_TRUE@am__DEPENDENCIES_4 = $(php_path)/lib/libphc.so \
@ROSE_USE_PHP_TRUE@	$(php_path)/lib/libphp5.so \
@ROSE_USE_PHP_TRUE@	$(am__DEPENDENCIES_1)
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_5 = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la
@ROSE_USE_QT_TRUE@am__DEPENDENCIES_6 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_7 = $(top_builddir)/src/librose.la \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_3) $(am__DEPENDENCIES_4) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_6) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__DEPENDENCIES_8 = $(am__DEPENDENCIES_7)
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassemble_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__disassembleBuffer_SOURCES_DIST = disassembleBuffer.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_disassembleBuffer_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	disassembleBuffer.$(OBJEXT)
disassembleBuffer_OBJECTS = $(am_disassembleBuffer_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassembleBuffer_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__execFormatsTest_SOURCES_DIST = execFormatsTest.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_execFormatsTest_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	execFormatsTest.$(OBJEXT)
execFormatsTest_OBJECTS = $(am_execFormatsTest_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@execFormatsTest_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__expandCoreDump_SOURCES_DIST = expandCoreDump.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_expandCoreDump_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	expandCoreDump.$(OBJEXT)
expandCoreDump_OBJECTS = $(am_expandCoreDump_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@expandCoreDump_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__findConstants_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_findConstants_OBJECTS = findConstants-semantics.$(OBJEXT)
findConstants_OBJECTS = $(am_findConstants_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstants_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__findConstantsABI_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_findConstantsABI_OBJECTS = findConstantsABI-semantics.$(OBJEXT)
findConstantsABI_OBJECTS = $(am_findConstantsABI_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstantsABI_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__functionBoundaries_SOURCES_DIST = functionBoundaries.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_functionBoundaries_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	functionBoundaries.$(OBJEXT)
functionBoundaries_OBJECTS = $(am_functionBoundaries_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__rot13_SOURCES_DIST = rot13.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_rot13_OBJECTS = rot13.$(OBJEXT)
rot13_OBJECTS = $(am_rot13_OBJECTS)
rot13_LDADD = $(LDADD)
am__shiftResizeSection_SOURCES_DIST = shiftResizeSection.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_shiftResizeSection_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	shiftResizeSection.$(OBJEXT)
shiftResizeSection_OBJECTS = $(am_shiftResizeSection_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@shiftResizeSection_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__symbolicSemantics_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_symbolicSemantics_OBJECTS = symbolicSemantics-semantics.$(OBJEXT)
symbolicSemantics_OBJECTS = $(am_symbolicSemantics_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@symbolicSemantics_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testAssembler_SOURCES_DIST = testAssembler.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testAssembler_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAssembler.$(OBJEXT)
testAssembler_OBJECTS = $(am_testAssembler_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAssembler_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testAstIO_SOURCES_DIST = testAstIO.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testAstIO_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testAstIO.$(OBJEXT)
testAstIO_OBJECTS = $(am_testAstIO_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAstIO_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testBinCFG_SOURCES_DIST = testBinCFG.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testBinCFG_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCFG.$(OBJEXT)
testBinCFG_OBJECTS = $(am_testBinCFG_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCFG_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testBinCG_SOURCES_DIST = testBinCG.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testBinCG_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testBinCG.$(OBJEXT)
testBinCG_OBJECTS = $(am_testBinCG_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCG_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testElfByteOrder_SOURCES_DIST = testElfByteOrder.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testElfByteOrder_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfByteOrder.$(OBJEXT)
testElfByteOrder_OBJECTS = $(am_testElfByteOrder_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfByteOrder_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testElfConstruct_SOURCES_DIST = testElfConstruct.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testElfConstruct_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfConstruct.$(OBJEXT)
testElfConstruct_OBJECTS = $(am_testElfConstruct_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfConstruct_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testElfSchulz_SOURCES_DIST = testElfSchulz.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testElfSchulz_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfSchulz.$(OBJEXT)
testElfSchulz_OBJECTS = $(am_testElfSchulz_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfSchulz_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testElfStrtab_SOURCES_DIST = testElfStrtab.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testElfStrtab_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfStrtab.$(OBJEXT)
testElfStrtab_OBJECTS = $(am_testElfStrtab_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfStrtab_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testElfWordSize_SOURCES_DIST = testElfWordSize.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testElfWordSize_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testElfWordSize.$(OBJEXT)
testElfWordSize_OBJECTS = $(am_testElfWordSize_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfWordSize_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testEtherInsns_SOURCES_DIST = testEtherInsns.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testEtherInsns_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testEtherInsns.$(OBJEXT)
testEtherInsns_OBJECTS = $(am_testEtherInsns_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testEtherInsns_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testLibraryDb_SOURCES_DIST = testLibraryDb.C
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testLibraryDb_OBJECTS = testLibraryDb.$(OBJEXT)
testLibraryDb_OBJECTS = $(am_testLibraryDb_OBJECTS)
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@testLibraryDb_DEPENDENCIES = $(am__DEPENDENCIES_1) \
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8)
am__testPeConstruct_SOURCES_DIST = testPeConstruct.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testPeConstruct_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testPeConstruct.$(OBJEXT)
testPeConstruct_OBJECTS = $(am_testPeConstruct_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testPeConstruct_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__testRegisters_SOURCES_DIST = testRegisters.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_testRegisters_OBJECTS =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	testRegisters.$(OBJEXT)
testRegisters_OBJECTS = $(am_testRegisters_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testRegisters_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__virtualMachineSemantics_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_virtualMachineSemantics_OBJECTS = virtualMachineSemantics-semantics.$(OBJEXT)
virtualMachineSemantics_OBJECTS =  \
	$(am_virtualMachineSemantics_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@virtualMachineSemantics_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__yicesSemanticsExe_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_yicesSemanticsExe_OBJECTS = yicesSemanticsExe-semantics.$(OBJEXT)
yicesSemanticsExe_OBJECTS = $(am_yicesSemanticsExe_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsExe_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
am__yicesSemanticsLib_SOURCES_DIST = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@am_yicesSemanticsLib_OBJECTS = yicesSemanticsLib-semantics.$(OBJEXT)
yicesSemanticsLib_OBJECTS = $(am_yicesSemanticsLib_OBJECTS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsLib_DEPENDENCIES =  \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_8) \
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp =
am__depfiles_maybe =
CXXCOMPILE = @echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = @echo "  COMPILE $@"; $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLINK = @echo "  LINK    $@"; $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(disassemble_SOURCES) $(disassembleBuffer_SOURCES) \
	$(execFormatsTest_SOURCES) $(expandCoreDump_SOURCES) \
	$(findConstants_SOURCES) $(findConstantsABI_SOURCES) \
	$(functionBoundaries_SOURCES) $(rot13_SOURCES) \
	$(shiftResizeSection_SOURCES) $(symbolicSemantics_SOURCES) \
	$(testAssembler_SOURCES) $(testAstIO_SOURCES) \
	$(testBinCFG_SOURCES) $(testBinCG_SOURCES) \
	$(testElfByteOrder_SOURCES) $(testElfConstruct_SOURCES) \
	$(testElfSchulz_SOURCES) $(testElfStrtab_SOURCES) \
	$(testElfWordSize_SOURCES) $(testEtherInsns_SOURCES) \
	$(testLibraryDb_SOURCES) $(testPeConstruct_SOURCES) \
	$(testRegisters_SOURCES) $(virtualMachineSemantics_SOURCES) \
	$(yicesSemanticsExe_SOURCES) $(yicesSemanticsLib_SOURCES)
DIST_SOURCES = $(am__disassemble_SOURCES_DIST) \
	$(am__disassembleBuffer_SOURCES_DIST) \
	$(am__execFormatsTest_SOURCES_DIST) \
	$(am__expandCoreDump_SOURCES_DIST) \
	$(am__findConstants_SOURCES_DIST) \
	$(am__findConstantsABI_SOURCES_DIST) \
	$(am__functionBoundaries_SOURCES_DIST) \
	$(am__rot13_SOURCES_DIST) \
	$(am__shiftResizeSection_SOURCES_DIST) \
	$(am__symbolicSemantics_SOURCES_DIST) \
	$(am__testAssembler_SOURCES_DIST) \
	$(am__testAstIO_SOURCES_DIST) $(am__testBinCFG_SOURCES_DIST) \
	$(am__testBinCG_SOURCES_DIST) \
	$(am__testElfByteOrder_SOURCES_DIST) \
	$(am__testElfConstruct_SOURCES_DIST) \
	$(am__testElfSchulz_SOURCES_DIST) \
	$(am__testElfStrtab_SOURCES_DIST) \
	$(am__testElfWordSize_SOURCES_DIST) \
	$(am__testEtherInsns_SOURCES_DIST) \
	$(am__testLibraryDb_SOURCES_DIST) \
	$(am__testPeConstruct_SOURCES_DIST) \
	$(am__testRegisters_SOURCES_DIST) \
	$(am__virtualMachineSemantics_SOURCES_DIST) \
	$(am__yicesSemanticsExe_SOURCES_DIST) \
	$(am__yicesSemanticsLib_SOURCES_DIST)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AUX_LINKER = @AUX_LINKER@
AWK = @AWK@
AXXPXX_SPECIFIC_TESTS_FALSE = @AXXPXX_SPECIFIC_TESTS_FALSE@
AXXPXX_SPECIFIC_TESTS_TRUE = @AXXPXX_SPECIFIC_TESTS_TRUE@
Axx_INCLUDES = @Axx_INCLUDES@
Axx_LIBS = @Axx_LIBS@
BACKEND_COMPILER_VERSION_MAJOR_NUMBER = @BACKEND_COMPILER_VERSION_MAJOR_NUMBER@
BACKEND_COMPILER_VERSION_MINOR_NUMBER = @BACKEND_COMPILER_VERSION_MINOR_NUMBER@
BACKEND_COMPILER_VERSION_NAME = @BACKEND_COMPILER_VERSION_NAME@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_FALSE@
BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE = @BACKEND_COMPILER_VERSION_OK_FOR_ROSE_TESTING_TRUE@
BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER = @BACKEND_COMPILER_VERSION_PATCHLEVEL_NUMBER@
BACKSTROKE_ROSS_INCLUDE = @BACKSTROKE_ROSS_INCLUDE@
BACKSTROKE_SPEEDES_INCLUDE = @BACKSTROKE_SPEEDES_INCLUDE@
BINARY_EDG_TARBALL_ENABLED_FALSE = @BINARY_EDG_TARBALL_ENABLED_FALSE@
BINARY_EDG_TARBALL_ENABLED_TRUE = @BINARY_EDG_TARBALL_ENABLED_TRUE@
BOOST_CPPFLAGS = @BOOST_CPPFLAGS@
BOOST_DATE_TIME_LIB = @BOOST_DATE_TIME_LIB@
BOOST_FILESYSTEM_LIB = @BOOST_FILESYSTEM_LIB@
BOOST_LDFLAGS = @BOOST_LDFLAGS@
BOOST_PROGRAM_OPTIONS_LIB = @BOOST_PROGRAM_OPTIONS_LIB@
BOOST_REGEX_LIB = @BOOST_REGEX_LIB@
BOOST_SYSTEM_LIB = @BOOST_SYSTEM_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_WAVE_LIB = @BOOST_WAVE_LIB@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CCLD = @CCLD@
CFLAGS = @CFLAGS@
CLASSPATH = @CLASSPATH@
CONVENIENCE_LTDL_FALSE = @CONVENIENCE_LTDL_FALSE@
CONVENIENCE_LTDL_TRUE = @CONVENIENCE_LTDL_TRUE@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CXXLD = @CXXLD@
CXX_DEBUG = @CXX_DEBUG@
CXX_OPTIMIZE = @CXX_OPTIMIZE@
CXX_SHARED_LIB_UPDATE = @CXX_SHARED_LIB_UPDATE@
CXX_STATIC_LIB_UPDATE = @CXX_STATIC_LIB_UPDATE@
CXX_TEMPLATE_OBJECTS = @CXX_TEMPLATE_OBJECTS@
CXX_TEMPLATE_REPOSITORY_PATH = @CXX_TEMPLATE_REPOSITORY_PATH@
CXX_WARNINGS = @CXX_WARNINGS@
CYGPATH_W = @CYGPATH_W@
C_DEBUG = @C_DEBUG@
C_OPTIMIZE = @C_OPTIMIZE@
C_WARNINGS = @C_WARNINGS@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DOT_TO_GML_TRANSLATOR_FALSE = @DOT_TO_GML_TRANSLATOR_FALSE@
DOT_TO_GML_TRANSLATOR_TRUE = @DOT_TO_GML_TRANSLATOR_TRUE@
DOXYGEN_ADDED_DIRECTORY_1 = @DOXYGEN_ADDED_DIRECTORY_1@
DOXYGEN_ADDED_DIRECTORY_2 = @DOXYGEN_ADDED_DIRECTORY_2@
DOXYGEN_ENABLED_SECTIONS = @DOXYGEN_ENABLED_SECTIONS@
DOXYGEN_EXTRACT_ALL = @DOXYGEN_EXTRACT_ALL@
DOXYGEN_EXTRACT_PRIVATE = @DOXYGEN_EXTRACT_PRIVATE@
DOXYGEN_EXTRACT_STATIC = @DOXYGEN_EXTRACT_STATIC@
DOXYGEN_HIDE_FRIEND_COMPOUNDS = @DOXYGEN_HIDE_FRIEND_COMPOUNDS@
DOXYGEN_HIDE_UNDOC_CLASSES = @DOXYGEN_HIDE_UNDOC_CLASSES@
DOXYGEN_HIDE_UNDOC_MEMBERS = @DOXYGEN_HIDE_UNDOC_MEMBERS@
DOXYGEN_INTERNAL_DOCS = @DOXYGEN_INTERNAL_DOCS@
DOXYGEN_USE_TAG_FILE = @DOXYGEN_USE_TAG_FILE@
DWARF_INCLUDE = @DWARF_INCLUDE@
DWARF_LINK = @DWARF_LINK@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_JAVAPORT_FALSE = @ENABLE_JAVAPORT_FALSE@
ENABLE_JAVAPORT_TRUE = @ENABLE_JAVAPORT_TRUE@
ETHER_PREFIX = @ETHER_PREFIX@
EXE = @EXE@
EXEEXT = @EXEEXT@
F77 = @F77@
FADA_CPPFLAGS = @FADA_CPPFLAGS@
FADA_LDFLAGS = @FADA_LDFLAGS@
FFLAGS = @FFLAGS@
FLTK_include_path = @FLTK_include_path@
FLTK_libs_path = @FLTK_libs_path@
GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX = @GENERATED_COMPILER_NAME_AND_VERSION_SUFFIX@
GEN_BE = @GEN_BE@
GFORTRAN_PATH = @GFORTRAN_PATH@
GHCBIN = @GHCBIN@
GLUT_include_path = @GLUT_include_path@
GLUT_libs_path = @GLUT_libs_path@
GL_CFLAGS = @GL_CFLAGS@
GL_LIBS = @GL_LIBS@
GraphViz_include_path = @GraphViz_include_path@
GraphViz_libs_path = @GraphViz_libs_path@
HAVE_LIBYICES_FALSE = @HAVE_LIBYICES_FALSE@
HAVE_LIBYICES_TRUE = @HAVE_LIBYICES_TRUE@
HAVE_YICES_FALSE = @HAVE_YICES_FALSE@
HAVE_YICES_TRUE = @HAVE_YICES_TRUE@
HS_CONFIG_OPTS = @HS_CONFIG_OPTS@
INCLUDE_COMPASS_MAKEFILE_INC = @INCLUDE_COMPASS_MAKEFILE_INC@
INDENT = @INDENT@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_LTDL_FALSE = @INSTALL_LTDL_FALSE@
INSTALL_LTDL_TRUE = @INSTALL_LTDL_TRUE@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSURE_OPTIONS = @INSURE_OPTIONS@
IntelPin_path = @IntelPin_path@
JAR = @JAR@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JAVA_JVM_INCLUDE = @JAVA_JVM_INCLUDE@
JAVA_JVM_LINK = @JAVA_JVM_LINK@
JAVA_PATH = @JAVA_PATH@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBADD_DL = @LIBADD_DL@
LIBFFI_CFLAGS = @LIBFFI_CFLAGS@
LIBFFI_LIBS = @LIBFFI_LIBS@
LIBLTDL = @LIBLTDL@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBS_WITH_RPATH = @LIBS_WITH_RPATH@
LIBTOOL = @LIBTOOL@ --quiet
LN_S = @LN_S@
LTDLINCL = @LTDLINCL@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAPLE_INCLUDES = @MAPLE_INCLUDES@
MAPLE_LIBS = @MAPLE_LIBS@
MD5 = @MD5@
MOC = @MOC@
MPICXX = @MPICXX@
MYSQL_CFLAGS = @MYSQL_CFLAGS@
MYSQL_CONFIG = @MYSQL_CONFIG@
MYSQL_INCLUDE = @MYSQL_INCLUDE@
MYSQL_LDFLAGS = @MYSQL_LDFLAGS@
MYSQL_VERSION = @MYSQL_VERSION@
OBJ = @OBJ@
OBJEXT = @OBJEXT@
OLD_COMPILER_VERSION_FALSE = @OLD_COMPILER_VERSION_FALSE@
OLD_COMPILER_VERSION_TRUE = @OLD_COMPILER_VERSION_TRUE@
OPEN_FORTRAN_PARSER_PATH = @OPEN_FORTRAN_PARSER_PATH@
OS_32BIT_FALSE = @OS_32BIT_FALSE@
OS_32BIT_TRUE = @OS_32BIT_TRUE@
OS_64BIT_FALSE = @OS_64BIT_FALSE@
OS_64BIT_TRUE = @OS_64BIT_TRUE@
OS_LINUX_FALSE = @OS_LINUX_FALSE@
OS_LINUX_TRUE = @OS_LINUX_TRUE@
OS_MACOSX_FALSE = @OS_MACOSX_FALSE@
OS_MACOSX_TRUE = @OS_MACOSX_TRUE@
OS_MINGW_FALSE = @OS_MINGW_FALSE@
OS_MINGW_TRUE = @OS_MINGW_TRUE@
OS_MSDOS_FALSE = @OS_MSDOS_FALSE@
OS_MSDOS_TRUE = @OS_MSDOS_TRUE@
OS_VENDOR_APPLE_FALSE = @OS_VENDOR_APPLE_FALSE@
OS_VENDOR_APPLE_TRUE = @OS_VENDOR_APPLE_TRUE@
OS_VENDOR_CENTOS_FALSE = @OS_VENDOR_CENTOS_FALSE@
OS_VENDOR_CENTOS_TRUE = @OS_VENDOR_CENTOS_TRUE@
OS_VENDOR_DEBIAN_FALSE = @OS_VENDOR_DEBIAN_FALSE@
OS_VENDOR_DEBIAN_TRUE = @OS_VENDOR_DEBIAN_TRUE@
OS_VENDOR_REDHAT_32BIT_FALSE = @OS_VENDOR_REDHAT_32BIT_FALSE@
OS_VENDOR_REDHAT_32BIT_TRUE = @OS_VENDOR_REDHAT_32BIT_TRUE@
OS_VENDOR_REDHAT_FALSE = @OS_VENDOR_REDHAT_FALSE@
OS_VENDOR_REDHAT_TRUE = @OS_VENDOR_REDHAT_TRUE@
OS_VENDOR_UBUNTU_FALSE = @OS_VENDOR_UBUNTU_FALSE@
OS_VENDOR_UBUNTU_TRUE = @OS_VENDOR_UBUNTU_TRUE@
OS_release = @OS_release@
OS_vendor = @OS_vendor@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_VERSION_NUMERIC = @PACKAGE_VERSION_NUMERIC@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PIP_CPPFLAGS = @PIP_CPPFLAGS@
PIP_LDFLAGS = @PIP_LDFLAGS@
PKG_CONFIG = @PKG_CONFIG@
PPL_CPPFLAGS = @PPL_CPPFLAGS@
PPL_LDFLAGS = @PPL_LDFLAGS@
PURIFY_OPTIONS = @PURIFY_OPTIONS@
Pxx_INCLUDES = @Pxx_INCLUDES@
Pxx_LIBS = @Pxx_LIBS@
QROSE_PREFIX = @QROSE_PREFIX@
QROSE_USE_MINGW32_FALSE = @QROSE_USE_MINGW32_FALSE@
QROSE_USE_MINGW32_TRUE = @QROSE_USE_MINGW32_TRUE@
QROSE_USE_WINDOWS_FALSE = @QROSE_USE_WINDOWS_FALSE@
QROSE_USE_WINDOWS_TRUE = @QROSE_USE_WINDOWS_TRUE@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
QT_VERSION = @QT_VERSION@
QT_VERSION_MAJOR = @QT_VERSION_MAJOR@
QT_VERSION_MINOR = @QT_VERSION_MINOR@
RANLIB = @RANLIB@
RCC = @RCC@
ROSEHPCT_DEP_INCLUDES = @ROSEHPCT_DEP_INCLUDES@
ROSEHPCT_DEP_LIBS = @ROSEHPCT_DEP_LIBS@
ROSE_BOOST_NORMAL_INCLUDE_PATH = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use). 
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_FALSE@
ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE = @ROSE_BUILD_BINARY_ANALYSIS_SUPPORT_TRUE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CUDA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_CXX_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_C_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_JAVA_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_OPENCL_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_OS_IS_CYGWIN_FALSE = @ROSE_BUILD_OS_IS_CYGWIN_FALSE@
ROSE_BUILD_OS_IS_CYGWIN_TRUE = @ROSE_BUILD_OS_IS_CYGWIN_TRUE@
ROSE_BUILD_OS_IS_OSX_FALSE = @ROSE_BUILD_OS_IS_OSX_FALSE@
ROSE_BUILD_OS_IS_OSX_TRUE = @ROSE_BUILD_OS_IS_OSX_TRUE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_FALSE@
ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE = @ROSE_BUILD_PHP_LANGUAGE_SUPPORT_TRUE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_PROJECTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_ROSEHPCT_FALSE = @ROSE_BUILD_ROSEHPCT_FALSE@
ROSE_BUILD_ROSEHPCT_TRUE = @ROSE_BUILD_ROSEHPCT_TRUE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TESTS_DIRECTORY_SUPPORT_TRUE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_FALSE@
ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE = @ROSE_BUILD_TUTORIAL_DIRECTORY_SUPPORT_TRUE@
ROSE_EDG_MAJOR_VERSION_NUMBER = @ROSE_EDG_MAJOR_VERSION_NUMBER@
ROSE_EDG_MINOR_VERSION_NUMBER = @ROSE_EDG_MINOR_VERSION_NUMBER@
ROSE_HAS_EDG_SOURCE_FALSE = @ROSE_HAS_EDG_SOURCE_FALSE@
ROSE_HAS_EDG_SOURCE_TRUE = @ROSE_HAS_EDG_SOURCE_TRUE@
ROSE_HOME = @ROSE_HOME@
ROSE_LSB_RELEASE = @ROSE_LSB_RELEASE@
ROSE_MPI_FALSE = @ROSE_MPI_FALSE@
ROSE_MPI_TRUE = @ROSE_MPI_TRUE@
ROSE_OBJDUMP_PATH = @ROSE_OBJDUMP_PATH@
ROSE_OFP_CONTAINS_JAVA_FILE_FALSE = @ROSE_OFP_CONTAINS_JAVA_FILE_FALSE@
ROSE_OFP_CONTAINS_JAVA_FILE_TRUE = @ROSE_OFP_CONTAINS_JAVA_FILE_TRUE@
ROSE_OFP_MAJOR_VERSION_NUMBER = @ROSE_OFP_MAJOR_VERSION_NUMBER@
ROSE_OFP_MINOR_VERSION_NUMBER = @ROSE_OFP_MINOR_VERSION_NUMBER@
ROSE_OFP_PATCH_VERSION_NUMBER = @ROSE_OFP_PATCH_VERSION_NUMBER@
ROSE_PCH_FALSE = @ROSE_PCH_FALSE@
ROSE_PCH_TRUE = @ROSE_PCH_TRUE@
ROSE_SUPPORT_GNU_EXTENSIONS = @ROSE_SUPPORT_GNU_EXTENSIONS@
ROSE_SUPPORT_MICROSOFT_EXTENSIONS = @ROSE_SUPPORT_MICROSOFT_EXTENSIONS@
ROSE_USE_ASSEMBLY_SEMANTICS_FALSE = @ROSE_USE_ASSEMBLY_SEMANTICS_FALSE@
ROSE_USE_ASSEMBLY_SEMANTICS_TRUE = @ROSE_USE_ASSEMBLY_SEMANTICS_TRUE@
ROSE_USE_BDDBDDB_FALSE = @ROSE_USE_BDDBDDB_FALSE@
ROSE_USE_BDDBDDB_TRUE = @ROSE_USE_BDDBDDB_TRUE@
ROSE_USE_BINARYCONTEXTLOOKUP_FALSE = @ROSE_USE_BINARYCONTEXTLOOKUP_FALSE@
ROSE_USE_BINARYCONTEXTLOOKUP_TRUE = @ROSE_USE_BINARYCONTEXTLOOKUP_TRUE@
ROSE_USE_BOOST_WAVE_FALSE = @ROSE_USE_BOOST_WAVE_FALSE@
ROSE_USE_BOOST_WAVE_TRUE = @ROSE_USE_BOOST_WAVE_TRUE@
ROSE_USE_CUDA_SUPPORT = @ROSE_USE_CUDA_SUPPORT@
ROSE_USE_CUDA_SUPPORT_FALSE = @ROSE_USE_CUDA_SUPPORT_FALSE@
ROSE_USE_CUDA_SUPPORT_TRUE = @ROSE_USE_CUDA_SUPPORT_TRUE@
ROSE_USE_DWARF_FALSE = @ROSE_USE_DWARF_FALSE@
ROSE_USE_DWARF_TRUE = @ROSE_USE_DWARF_TRUE@
ROSE_USE_ETHER_FALSE = @ROSE_USE_ETHER_FALSE@
ROSE_USE_ETHER_TRUE = @ROSE_USE_ETHER_TRUE@
ROSE_USE_FADALIB = @ROSE_USE_FADALIB@
ROSE_USE_FADALIB_FALSE = @ROSE_USE_FADALIB_FALSE@
ROSE_USE_FADALIB_TRUE = @ROSE_USE_FADALIB_TRUE@
ROSE_USE_GCC_OMP_FALSE = @ROSE_USE_GCC_OMP_FALSE@
ROSE_USE_GCC_OMP_TRUE = @ROSE_USE_GCC_OMP_TRUE@
ROSE_USE_GRAPHVIZ_DOT_FALSE = @ROSE_USE_GRAPHVIZ_DOT_FALSE@
ROSE_USE_GRAPHVIZ_DOT_TRUE = @ROSE_USE_GRAPHVIZ_DOT_TRUE@
ROSE_USE_IDA_FALSE = @ROSE_USE_IDA_FALSE@
ROSE_USE_IDA_TRUE = @ROSE_USE_IDA_TRUE@
ROSE_USE_INDENT_FALSE = @ROSE_USE_INDENT_FALSE@
ROSE_USE_INDENT_TRUE = @ROSE_USE_INDENT_TRUE@
ROSE_USE_INTEL_PIN_FALSE = @ROSE_USE_INTEL_PIN_FALSE@
ROSE_USE_INTEL_PIN_TRUE = @ROSE_USE_INTEL_PIN_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_AM_CONDITIONAL_TRUE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_FALSE@
ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE = @ROSE_USE_INTERNAL_JAVA_SUPPORT_TRUE@
ROSE_USE_LIBFFI_FALSE = @ROSE_USE_LIBFFI_FALSE@
ROSE_USE_LIBFFI_TRUE = @ROSE_USE_LIBFFI_TRUE@
ROSE_USE_LLVM_FALSE = @ROSE_USE_LLVM_FALSE@
ROSE_USE_LLVM_TRUE = @ROSE_USE_LLVM_TRUE@
ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE = @ROSE_USE_LONG_MAKE_CHECK_RULE_FALSE@
ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE = @ROSE_USE_LONG_MAKE_CHECK_RULE_TRUE@
ROSE_USE_MAPLE_FALSE = @ROSE_USE_MAPLE_FALSE@
ROSE_USE_MAPLE_TRUE = @ROSE_USE_MAPLE_TRUE@
ROSE_USE_MYSQL_FALSE = @ROSE_USE_MYSQL_FALSE@
ROSE_USE_MYSQL_TRUE = @ROSE_USE_MYSQL_TRUE@
ROSE_USE_NEW_EDG_INTERFACE_FALSE = @ROSE_USE_NEW_EDG_INTERFACE_FALSE@
ROSE_USE_NEW_EDG_INTERFACE_TRUE = @ROSE_USE_NEW_EDG_INTERFACE_TRUE@
ROSE_USE_OBJDUMP_FALSE = @ROSE_USE_OBJDUMP_FALSE@
ROSE_USE_OBJDUMP_TRUE = @ROSE_USE_OBJDUMP_TRUE@
ROSE_USE_OMNI_OPENMP_FALSE = @ROSE_USE_OMNI_OPENMP_FALSE@
ROSE_USE_OMNI_OPENMP_TRUE = @ROSE_USE_OMNI_OPENMP_TRUE@
ROSE_USE_OPENCL_SUPPORT = @ROSE_USE_OPENCL_SUPPORT@
ROSE_USE_OPENCL_SUPPORT_FALSE = @ROSE_USE_OPENCL_SUPPORT_FALSE@
ROSE_USE_OPENCL_SUPPORT_TRUE = @ROSE_USE_OPENCL_SUPPORT_TRUE@
ROSE_USE_OPENGL_FALSE = @ROSE_USE_OPENGL_FALSE@
ROSE_USE_OPENGL_TRUE = @ROSE_USE_OPENGL_TRUE@
ROSE_USE_PHP_FALSE = @ROSE_USE_PHP_FALSE@
ROSE_USE_PHP_TRUE = @ROSE_USE_PHP_TRUE@
ROSE_USE_PPL = @ROSE_USE_PPL@
ROSE_USE_PPL_FALSE = @ROSE_USE_PPL_FALSE@
ROSE_USE_PPL_TRUE = @ROSE_USE_PPL_TRUE@
ROSE_USE_QROSE_FALSE = @ROSE_USE_QROSE_FALSE@
ROSE_USE_QROSE_TRUE = @ROSE_USE_QROSE_TRUE@
ROSE_USE_QT_FALSE = @ROSE_USE_QT_FALSE@
ROSE_USE_QT_TRUE = @ROSE_USE_QT_TRUE@
ROSE_USE_RTED_FALSE = @ROSE_USE_RTED_FALSE@
ROSE_USE_RTED_TRUE = @ROSE_USE_RTED_TRUE@
ROSE_USE_SAT_FALSE = @ROSE_USE_SAT_FALSE@
ROSE_USE_SAT_TRUE = @ROSE_USE_SAT_TRUE@
ROSE_USE_SMALLER_GENERATED_FILES_FALSE = @ROSE_USE_SMALLER_GENERATED_FILES_FALSE@
ROSE_USE_SMALLER_GENERATED_FILES_TRUE = @ROSE_USE_SMALLER_GENERATED_FILES_TRUE@
ROSE_USE_SQLITE_DATABASE_FALSE = @ROSE_USE_SQLITE_DATABASE_FALSE@
ROSE_USE_SQLITE_DATABASE_TRUE = @ROSE_USE_SQLITE_DATABASE_TRUE@
ROSE_USE_SSL_SUPPORT_FALSE = @ROSE_USE_SSL_SUPPORT_FALSE@
ROSE_USE_SSL_SUPPORT_TRUE = @ROSE_USE_SSL_SUPPORT_TRUE@
ROSE_USE_TCLSH_FALSE = @ROSE_USE_TCLSH_FALSE@
ROSE_USE_TCLSH_TRUE = @ROSE_USE_TCLSH_TRUE@
ROSE_USE_TEST_SMT_SOLVER_FALSE = @ROSE_USE_TEST_SMT_SOLVER_FALSE@
ROSE_USE_TEST_SMT_SOLVER_TRUE = @ROSE_USE_TEST_SMT_SOLVER_TRUE@
ROSE_USE_TRACE_ANALYSIS_FALSE = @ROSE_USE_TRACE_ANALYSIS_FALSE@
ROSE_USE_TRACE_ANALYSIS_TRUE = @ROSE_USE_TRACE_ANALYSIS_TRUE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_FALSE@
ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE = @ROSE_USE_UNIFORM_ADVANCED_WARNINGS_SUPPORT_TRUE@
ROSE_USE_VISUALIZATION_FALSE = @ROSE_USE_VISUALIZATION_FALSE@
ROSE_USE_VISUALIZATION_TRUE = @ROSE_USE_VISUALIZATION_TRUE@
ROSE_USE_WGET_FALSE = @ROSE_USE_WGET_FALSE@
ROSE_USE_WGET_TRUE = @ROSE_USE_WGET_TRUE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_FALSE@
ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE = @ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@
ROSE_USE_XML_FALSE = @ROSE_USE_XML_FALSE@
ROSE_USE_XML_TRUE = @ROSE_USE_XML_TRUE@
ROSE_USING_BOOST_VERSION_1_35_FALSE = @ROSE_USING_BOOST_VERSION_1_35_FALSE@
ROSE_USING_BOOST_VERSION_1_35_TRUE = @ROSE_USING_BOOST_VERSION_1_35_TRUE@
ROSE_USING_BOOST_VERSION_1_36_FALSE = @ROSE_USING_BOOST_VERSION_1_36_FALSE@
ROSE_USING_BOOST_VERSION_1_36_TRUE = @ROSE_USING_BOOST_VERSION_1_36_TRUE@
ROSE_USING_BOOST_VERSION_1_37_FALSE = @ROSE_USING_BOOST_VERSION_1_37_FALSE@
ROSE_USING_BOOST_VERSION_1_37_TRUE = @ROSE_USING_BOOST_VERSION_1_37_TRUE@
ROSE_USING_BOOST_VERSION_1_38_FALSE = @ROSE_USING_BOOST_VERSION_1_38_FALSE@
ROSE_USING_BOOST_VERSION_1_38_TRUE = @ROSE_USING_BOOST_VERSION_1_38_TRUE@
ROSE_USING_BOOST_VERSION_1_39_FALSE = @ROSE_USING_BOOST_VERSION_1_39_FALSE@
ROSE_USING_BOOST_VERSION_1_39_TRUE = @ROSE_USING_BOOST_VERSION_1_39_TRUE@
ROSE_USING_BOOST_VERSION_1_40_FALSE = @ROSE_USING_BOOST_VERSION_1_40_FALSE@
ROSE_USING_BOOST_VERSION_1_40_TRUE = @ROSE_USING_BOOST_VERSION_1_40_TRUE@
ROSE_USING_BOOST_VERSION_1_41_FALSE = @ROSE_USING_BOOST_VERSION_1_41_FALSE@
ROSE_USING_BOOST_VERSION_1_41_TRUE = @ROSE_USING_BOOST_VERSION_1_41_TRUE@
ROSE_USING_BOOST_VERSION_1_42_FALSE = @ROSE_USING_BOOST_VERSION_1_42_FALSE@
ROSE_USING_BOOST_VERSION_1_42_TRUE = @ROSE_USING_BOOST_VERSION_1_42_TRUE@
ROSE_USING_BOOST_VERSION_1_43_FALSE = @ROSE_USING_BOOST_VERSION_1_43_FALSE@
ROSE_USING_BOOST_VERSION_1_43_TRUE = @ROSE_USING_BOOST_VERSION_1_43_TRUE@
ROSE_USING_BOOST_VERSION_1_44_FALSE = @ROSE_USING_BOOST_VERSION_1_44_FALSE@
ROSE_USING_BOOST_VERSION_1_44_TRUE = @ROSE_USING_BOOST_VERSION_1_44_TRUE@
ROSE_USING_BOOST_VERSION_1_45_FALSE = @ROSE_USING_BOOST_VERSION_1_45_FALSE@
ROSE_USING_BOOST_VERSION_1_45_TRUE = @ROSE_USING_BOOST_VERSION_1_45_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_0_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_0_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_0_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_0_TRUE@
ROSE_USING_GFORTRAN_VERSION_4_1_FALSE = @ROSE_USING_GFORTRAN_VERSION_4_1_FALSE@
ROSE_USING_GFORTRAN_VERSION_4_1_TRUE = @ROSE_USING_GFORTRAN_VERSION_4_1_TRUE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_FALSE@
ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE = @ROSE_USING_GRAPH_IR_NODES_FOR_BACKWARD_COMPATABILITY_TRUE@
ROSE_USING_ROSE_ANALYSIS_FALSE = @ROSE_USING_ROSE_ANALYSIS_FALSE@
ROSE_USING_ROSE_ANALYSIS_TRUE = @ROSE_USING_ROSE_ANALYSIS_TRUE@
ROSE_USING_ROSE_AST_FILE_IO_FALSE = @ROSE_USING_ROSE_AST_FILE_IO_FALSE@
ROSE_USING_ROSE_AST_FILE_IO_TRUE = @ROSE_USING_ROSE_AST_FILE_IO_TRUE@
ROSE_USING_ROSE_CODE_GENERATION_FALSE = @ROSE_USING_ROSE_CODE_GENERATION_FALSE@
ROSE_USING_ROSE_CODE_GENERATION_TRUE = @ROSE_USING_ROSE_CODE_GENERATION_TRUE@
ROSE_USING_ROSE_FALSE = @ROSE_USING_ROSE_FALSE@
ROSE_USING_ROSE_TRANSLATOR_FALSE = @ROSE_USING_ROSE_TRANSLATOR_FALSE@
ROSE_USING_ROSE_TRANSLATOR_TRUE = @ROSE_USING_ROSE_TRANSLATOR_TRUE@
ROSE_USING_ROSE_TRUE = @ROSE_USING_ROSE_TRUE@
ROSE_WGET_PATH = @ROSE_WGET_PATH@
ROSE_WITH_ROSEQT_FALSE = @ROSE_WITH_ROSEQT_FALSE@
ROSE_WITH_ROSEQT_TRUE = @ROSE_WITH_ROSEQT_TRUE@
RT_LIBS = @RT_LIBS@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SQLITE3_CFLAGS = @SQLITE3_CFLAGS@
SQLITE3_LDFLAGS = @SQLITE3_LDFLAGS@
SQLITE3_VERSION = @SQLITE3_VERSION@
STRIP = @STRIP@
SWIG = @SWIG@
SWIG_LIB = @SWIG_LIB@
TCLSH = @TCLSH@
TEST_SMT_SOLVER = @TEST_SMT_SOLVER@
UIC = @UIC@
USE_BINARY_ANALYSIS_TESTS_FALSE = @USE_BINARY_ANALYSIS_TESTS_FALSE@
USE_BINARY_ANALYSIS_TESTS_TRUE = @USE_BINARY_ANALYSIS_TESTS_TRUE@
USE_GCJ_FALSE = @USE_GCJ_FALSE@
USE_GCJ_TRUE = @USE_GCJ_TRUE@
USE_HASKELL_FALSE = @USE_HASKELL_FALSE@
USE_HASKELL_TRUE = @USE_HASKELL_TRUE@
USE_ROSE_GLUT_SUPPORT_FALSE = @USE_ROSE_GLUT_SUPPORT_FALSE@
USE_ROSE_GLUT_SUPPORT_TRUE = @USE_ROSE_GLUT_SUPPORT_TRUE@
USE_ROSE_IN_BUILD_TREE_VAR_FALSE = @USE_ROSE_IN_BUILD_TREE_VAR_FALSE@
USE_ROSE_IN_BUILD_TREE_VAR_TRUE = @USE_ROSE_IN_BUILD_TREE_VAR_TRUE@
USE_VALGRIND_FALSE = @USE_VALGRIND_FALSE@
USE_VALGRIND_TRUE = @USE_VALGRIND_TRUE@
USING_GNU_COMPILER_FALSE = @USING_GNU_COMPILER_FALSE@
USING_GNU_COMPILER_TRUE = @USING_GNU_COMPILER_TRUE@
USING_INTEL_COMPILER_FALSE = @USING_INTEL_COMPILER_FALSE@
USING_INTEL_COMPILER_TRUE = @USING_INTEL_COMPILER_TRUE@
USING_WINDOWS = @USING_WINDOWS@
VALGRIND_BINARY = @VALGRIND_BINARY@
VERSION = @VERSION@
WITH_GOMP_OPENMP_LIB_FALSE = @WITH_GOMP_OPENMP_LIB_FALSE@
WITH_GOMP_OPENMP_LIB_TRUE = @WITH_GOMP_OPENMP_LIB_TRUE@
XML2_CONFIG = @XML2_CONFIG@
XML_CPPFLAGS = @XML_CPPFLAGS@
XML_LIBS = @XML_LIBS@
X_CFLAGS = @X_CFLAGS@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_LIBS = @X_LIBS@
X_PRE_LIBS = @X_PRE_LIBS@
YACC = @YACC@
YICES = @YICES@
YICES_PREFIX = @YICES_PREFIX@
absolute_path_srcdir = @absolute_path_srcdir@
ac_boost_path = @ac_boost_path@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
ac_ct_MPICXX = @ac_ct_MPICXX@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_ROSE_LSB_RELEASE = @ac_ct_ROSE_LSB_RELEASE@
ac_ct_ROSE_OBJDUMP_PATH = @ac_ct_ROSE_OBJDUMP_PATH@
ac_ct_ROSE_WGET_PATH = @ac_ct_ROSE_WGET_PATH@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
backstroke_ross_path = @backstroke_ross_path@
backstroke_speedes_path = @backstroke_speedes_path@
bddbddb_path = @bddbddb_path@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_triplet_without_redhat = @build_triplet_without_redhat@
build_vendor = @build_vendor@
configure_date = @configure_date@
datadir = @datadir@
dwarf_path = @dwarf_path@
edg_union_struct_debugging_value = @edg_union_struct_debugging_value@
exec_prefix = @exec_prefix@
glut_path = @glut_path@
gomp_omp_runtime_library_path = @gomp_omp_runtime_library_path@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
ida_path = @ida_path@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
insure_BIN = @insure_BIN@
insure_INCLUDES = @insure_INCLUDES@
insure_LIBS = @insure_LIBS@
insure_PREFIX = @insure_PREFIX@
libdir = @libdir@
libexecdir = @libexecdir@
llvm_path = @llvm_path@
localstatedir = @localstatedir@
mandir = @mandir@
maple_path = @maple_path@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
omni_omp_runtime_support_path = @omni_omp_runtime_support_path@
optional_Visualization_subdirs = @optional_Visualization_subdirs@
parallel_ast_traversal_omp_path = @parallel_ast_traversal_omp_path@
php_path = @php_path@
prefix = @prefix@
program_transform_name = @program_transform_name@
purify_BIN = @purify_BIN@
purify_INCLUDES = @purify_INCLUDES@
purify_LIBS = @purify_LIBS@
purify_PREFIX = @purify_PREFIX@
python_path = @python_path@
rted_path = @rted_path@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
subdirs = @subdirs@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_pwd = @top_pwd@
wine_path = @wine_path@

# SQLite is a simpler database to use than MySQL
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS)
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_INCLUDE = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
@ROSE_USE_SQLITE_DATABASE_TRUE@SQLITE_DATABASE_LIBS = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SQLITE_DATABASE_LIBS = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)
@ROSE_USE_SQLITE_DATABASE_TRUE@ROSE_SIDEEFFECT_INCLUDE = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

# Conditional support for Gabriel's QRose GUI Library 
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
@ROSE_USE_QT_TRUE@ROSE_GUI_INCLUDE = -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
@ROSE_USE_QT_TRUE@ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
@ROSE_USE_QT_TRUE@ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
@ROSE_USE_QT_TRUE@ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a

# ROSE-HPCToolkit module
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS = -lrosehpct
@ROSE_BUILD_ROSEHPCT_TRUE@ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so

# ROSE-YICES Package (destributed by SRI as a static library)
@HAVE_LIBYICES_TRUE@ROSE_YICES_INCLUDES = -I@YICES_PREFIX@/include
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS = -lyices
@HAVE_LIBYICES_TRUE@ROSE_YICES_LIBS_WITH_PATH = @YICES_PREFIX@/lib/libyices.a
GLUT_LIBS = ${glut_path}

# ROSE-DWARF libdwarf support
@ROSE_USE_DWARF_TRUE@ROSE_DWARF_INCLUDES = -I$(dwarf_path)
# DQ (3/15/2009): Use the usual static linking when not using Intel Pin (what we used to do).
# DQ (3/13/2009): Fixup libdwarf support in ROSE to always use the dynamic (shared) library.
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(dwarf_path) -L$(dwarf_path) -ldwarf -lelf
# DQ (6/5/2010): Fixed to use the value set in the configure step (requires the dynamic library).
# ROSE_DWARF_LIBS_WITH_PATH = $(dwarf_path)/libdwarf.a -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_FALSE@ROSE_DWARF_LIBS_WITH_PATH = @DWARF_LINK@

# DQ (3/13/2009): These do not appear to be used anywhere.
# ROSE_DWARF_LIBS = -ldwarf
# ROSE_DWARF_LIB_FILE = libdwarf.a

# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for 
# dwarf when used with Intel Pin.
# ROSE_DWARF_LIBS_WITH_PATH = $(INTEL_PIN_PATH)/intel64/lib-ext/libdwarf.a -lelf
# ROSE_DWARF_LIBS_WITH_PATH = -Wl,--rpath $(INTEL_PIN_PATH)/intel64/lib-ext -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
@ROSE_USE_DWARF_TRUE@@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
@ROSE_USE_WINDOWS_ANALYSIS_SUPPORT_TRUE@ROSE_WINE_INCLUDES = -I$(wine_path)/include
@ROSE_USE_PHP_TRUE@ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
@ROSE_USE_PHP_TRUE@ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)

# ASR (06/09/2010): adding llvm support variables
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
@ROSE_USE_LLVM_TRUE@ROSE_LLVM_LIBS = -L$(llvm_path)/lib \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMXCoreInfo -lLLVMSystemZCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystemZAsmPrinter -lLLVMSystemZInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcCodeGen -lLLVMSparcAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMSparcInfo -lLLVMPowerPCCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMpic16passes -lLLVMPIC16AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMPIC16CodeGen -lLLVMPIC16Info \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsAsmPrinter -lLLVMMipsCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMMipsInfo -lLLVMMBlazeAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMMBlazeCodeGen -lLLVMMBlazeInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMLinker -lLLVMipo -lLLVMInterpreter \
@ROSE_USE_LLVM_TRUE@	-lLLVMInstrumentation -lLLVMJIT \
@ROSE_USE_LLVM_TRUE@	-lLLVMExecutionEngine -lLLVMCppBackend \
@ROSE_USE_LLVM_TRUE@	-lLLVMCppBackendInfo -lLLVMCellSPUCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMCBackend -lLLVMCBackendInfo \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMBlackfinInfo -lLLVMBitWriter \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Disassembler -lLLVMX86AsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86AsmPrinter -lLLVMX86CodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMX86Info -lLLVMAsmParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmParser -lLLVMMCParser \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMAsmPrinter -lLLVMARMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMARMInfo -lLLVMArchive \
@ROSE_USE_LLVM_TRUE@	-lLLVMBitReader -lLLVMAlphaCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMSelectionDAG -lLLVMAlphaAsmPrinter \
@ROSE_USE_LLVM_TRUE@	-lLLVMAsmPrinter -lLLVMCodeGen \
@ROSE_USE_LLVM_TRUE@	-lLLVMScalarOpts -lLLVMInstCombine \
@ROSE_USE_LLVM_TRUE@	-lLLVMTransformUtils -lLLVMipa \
@ROSE_USE_LLVM_TRUE@	-lLLVMAnalysis -lLLVMTarget -lLLVMMC \
@ROSE_USE_LLVM_TRUE@	-lLLVMCore -lLLVMAlphaInfo -lLLVMSupport \
@ROSE_USE_LLVM_TRUE@	-lLLVMSystem

# adding all libraries for now
#ROSE_LLVM_LIB_WITH_PATH = $(llvm_path)/lib/libLLVMXCoreCodeGen.a $(llvm_path)/lib/libLLVMXCoreAsmPrinter.a $(llvm_path)/lib/libLLVMXCoreInfo.a $(llvm_path)/lib/libLLVMSystemZCodeGen.a $(llvm_path)/lib/libLLVMSystemZAsmPrinter.a $(llvm_path)/lib/libLLVMSystemZInfo.a $(llvm_path)/lib/libLLVMSparcCodeGen.a $(llvm_path)/lib/libLLVMSparcAsmPrinter.a $(llvm_path)/lib/libLLVMSparcInfo.a $(llvm_path)/lib/libLLVMPowerPCCodeGen.a $(llvm_path)/lib/libLLVMPowerPCAsmPrinter.a $(llvm_path)/lib/libLLVMPowerPCInfo.a $(llvm_path)/lib/libLLVMpic16passes.a $(llvm_path)/lib/libLLVMPIC16AsmPrinter.a $(llvm_path)/lib/libLLVMPIC16CodeGen.a $(llvm_path)/lib/libLLVMPIC16Info.a $(llvm_path)/lib/libLLVMMSP430CodeGen.a $(llvm_path)/lib/libLLVMMSP430AsmPrinter.a $(llvm_path)/lib/libLLVMMSP430Info.a $(llvm_path)/lib/libLLVMMSIL.a $(llvm_path)/lib/libLLVMMSILInfo.a $(llvm_path)/lib/libLLVMMipsAsmPrinter.a $(llvm_path)/lib/libLLVMMipsCodeGen.a $(llvm_path)/lib/libLLVMMipsInfo.a $(llvm_path)/lib/libLLVMMBlazeAsmPrinter.a $(llvm_path)/lib/libLLVMMBlazeCodeGen.a $(llvm_path)/lib/libLLVMMBlazeInfo.a $(llvm_path)/lib/libLLVMLinker.a $(llvm_path)/lib/libLLVMipo.a $(llvm_path)/lib/libLLVMInterpreter.a $(llvm_path)/lib/libLLVMInstrumentation.a $(llvm_path)/lib/libLLVMJIT.a $(llvm_path)/lib/libLLVMExecutionEngine.a $(llvm_path)/lib/libLLVMCppBackend.a $(llvm_path)/lib/libLLVMCppBackendInfo.a $(llvm_path)/lib/libLLVMCellSPUCodeGen.a $(llvm_path)/lib/libLLVMCellSPUAsmPrinter.a $(llvm_path)/lib/libLLVMCellSPUInfo.a $(llvm_path)/lib/libLLVMCBackend.a $(llvm_path)/lib/libLLVMCBackendInfo.a $(llvm_path)/lib/libLLVMBlackfinCodeGen.a $(llvm_path)/lib/libLLVMBlackfinAsmPrinter.a $(llvm_path)/lib/libLLVMBlackfinInfo.a $(llvm_path)/lib/libLLVMBitWriter.a $(llvm_path)/lib/libLLVMX86Disassembler.a $(llvm_path)/lib/libLLVMX86AsmParser.a $(llvm_path)/lib/libLLVMX86AsmPrinter.a $(llvm_path)/lib/libLLVMX86CodeGen.a $(llvm_path)/lib/libLLVMX86Info.a $(llvm_path)/lib/libLLVMAsmParser.a $(llvm_path)/lib/libLLVMARMAsmParser.a $(llvm_path)/lib/libLLVMMCParser.a $(llvm_path)/lib/libLLVMARMAsmPrinter.a $(llvm_path)/lib/libLLVMARMCodeGen.a $(llvm_path)/lib/libLLVMARMInfo.a $(llvm_path)/lib/libLLVMArchive.a $(llvm_path)/lib/libLLVMBitReader.a $(llvm_path)/lib/libLLVMAlphaCodeGen.a $(llvm_path)/lib/libLLVMSelectionDAG.a $(llvm_path)/lib/libLLVMAlphaAsmPrinter.a $(llvm_path)/lib/libLLVMAsmPrinter.a $(llvm_path)/lib/libLLVMCodeGen.a $(llvm_path)/lib/libLLVMScalarOpts.a $(llvm_path)/lib/libLLVMInstCombine.a $(llvm_path)/lib/libLLVMTransformUtils.a $(llvm_path)/lib/libLLVMipa.a $(llvm_path)/lib/libLLVMAnalysis.a $(llvm_path)/lib/libLLVMTarget.a $(llvm_path)/lib/libLLVMMC.a $(llvm_path)/lib/libLLVMCore.a $(llvm_path)/lib/libLLVMAlphaInfo.a $(llvm_path)/lib/libLLVMSupport.a $(llvm_path)/lib/libLLVMSystem.a

# SSL support permits use of MD5 checksums internally for binary library identification.
@ROSE_USE_SSL_SUPPORT_TRUE@ROSE_SSL_LIBS = -lssl -lcrypto

# support for precompiled headers
@ROSE_PCH_TRUE@ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_PATH = @IntelPin_path@
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIB_PATHS = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
@ROSE_USE_INTEL_PIN_TRUE@INTEL_PIN_LIBS = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_USE_DWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
@ROSE_USE_ETHER_TRUE@ROSE_ETHER_LIBS = -L$(ETHER_PREFIX)/lib -lxenctrl

# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
@USING_INTEL_COMPILER_TRUE@ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm

# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the 
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
ROSE_INCLUDES = \
     $(ROSE_BOOST_PREINCLUDE_PATH) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astMerge \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
     -I$(top_srcdir)/src/frontend/BinaryDisassembly \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/binaryAnalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/dataflowanalyses \
     -I$(top_srcdir)/src/midend/binaryAnalyses/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/dataflowAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/graphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_builddir)/src/3rdPartyLibraries/libharu-2.1.0/include \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -DBOOST_REGEX_MATCH_EXTRA \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE)


# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph 
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer 
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they 
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently 
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)
ROSE_LIBS = $(top_builddir)/src/librose.la -lm  $(JAVA_JVM_LINK) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS)  $(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(SQLITE3_LDFLAGS)  $(RT_LIBS) \
  $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) $(ROSE_DWARF_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS)


# DQ (3/13/2009): Removed this from ROSE_LIBS because libtool warnings say it should be in AM_LDFLAGS
# (this is because it has been moved from being linked statically to being linked dynamically).
# $(ROSE_DWARF_LIBS_WITH_PATH)
# AM_LDFLAGS = $(ROSE_DWARF_LIBS_WITH_PATH)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext
# DQ (3/14/2009): Need to add rpath to LDFLAGS instead of LDADD (to follow libtool rules).
# LDFLAGS += $(ROSE_DWARF_LIBS_WITH_PATH)

# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)
#   $(LIB_QT) $(JAVA_JVM_LIB) 

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS 

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly 
# with make distcheck rule 
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Location of sample binary files (executables, libraries, etc) that serve as input to
# some of the binary analysis tests.
BINARY_SAMPLES = $(top_srcdir)/binaries/samples

# Test harness variables. See "rth_run.pl --help" for more info.
RTH_RUN = $(top_srcdir)/scripts/rth_run.pl \
	srcdir=$(srcdir) top_srcdir=$(top_srcdir) \
	VALGRIND=$(VALGRIND) BINARY_SAMPLES=$(BINARY_SAMPLES)

RTH_STATS = $(top_srcdir)/scripts/rth_stats.pl
SUBDIRS = SemanticVerification libraryIdentification_tests Dwarf_tests Pin_tests
EXTRA_DIST = runExecFormatsTest testShiftResizeSection.sh \
	testSampleBinary.sh testSampleBinaries.conf \
	testFunctionDetection.pl bincfg.h $(am__append_3) \
	$(am__append_10)

# Forward declarations
STATIC_TEST_TARGETS = $(am__append_2) $(am__append_5) $(am__append_6) \
	$(am__append_7) $(am__append_9)
MOSTLYCLEANFILES = $(am__append_4) $(am__append_11) $(am__append_12)

# To keep compile commands tidy, please ONLY put required include flags here.
@USE_BINARY_ANALYSIS_TESTS_TRUE@INCLUDES = $(ROSE_INCLUDES) -I$(top_srcdir)/src/midend/binaryAnalyses/libraryIdentification
@USE_BINARY_ANALYSIS_TESTS_TRUE@execFormatsTest_SOURCES = execFormatsTest.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@execFormatsTest_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCFG_SOURCES = testBinCFG.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCFG_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCG_SOURCES = testBinCG.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCG_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfStrtab_SOURCES = testElfStrtab.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfStrtab_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfByteOrder_SOURCES = testElfByteOrder.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfByteOrder_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfWordSize_SOURCES = testElfWordSize.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfWordSize_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfSchulz_SOURCES = testElfSchulz.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfSchulz_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfConstruct_SOURCES = testElfConstruct.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfConstruct_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testPeConstruct_SOURCES = testPeConstruct.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testPeConstruct_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@shiftResizeSection_SOURCES = shiftResizeSection.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@shiftResizeSection_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstants_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstants_CPPFLAGS = -DPOLICY_SELECTOR=1
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstants_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstantsABI_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstantsABI_CPPFLAGS = -DPOLICY_SELECTOR=2
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstantsABI_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@virtualMachineSemantics_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@virtualMachineSemantics_CPPFLAGS = -DPOLICY_SELECTOR=3
@USE_BINARY_ANALYSIS_TESTS_TRUE@virtualMachineSemantics_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@symbolicSemantics_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@symbolicSemantics_CPPFLAGS = -DPOLICY_SELECTOR=4 -DSOLVER_SELECTOR=0
@USE_BINARY_ANALYSIS_TESTS_TRUE@symbolicSemantics_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsExe_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsExe_CPPFLAGS = -DPOLICY_SELECTOR=4 -DSOLVER_SELECTOR=1
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsExe_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsLib_SOURCES = semantics.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsLib_CPPFLAGS = -DPOLICY_SELECTOR=4 -DSOLVER_SELECTOR=2
@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsLib_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassemble_SOURCES = disassemble.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassemble_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassembleBuffer_SOURCES = disassembleBuffer.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassembleBuffer_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testEtherInsns_SOURCES = testEtherInsns.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testEtherInsns_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_SOURCES = functionBoundaries.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@expandCoreDump_SOURCES = expandCoreDump.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@expandCoreDump_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@rot13_SOURCES = rot13.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAssembler_SOURCES = testAssembler.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAssembler_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAstIO_SOURCES = testAstIO.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAstIO_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@testRegisters_SOURCES = testRegisters.C
@USE_BINARY_ANALYSIS_TESTS_TRUE@testRegisters_LDADD = $(ROSE_LIBS_WITH_PATH) $(ROSE_SEPARATE_LIBS) $(RT_LIBS)
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@testLibraryDb_SOURCES = testLibraryDb.C
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@testLibraryDb_LDADD = $(LIBS_WITH_RPATH) $(ROSE_SEPARATE_LIBS)

###############################################################################################################################
# DEMOS
#
# These demonstrate various aspects of ROSE's binary executable abilities. They are meant to be run sequentially (regardless
# of make's "-j" switch) and produce output for human consumption.
###############################################################################################################################
@USE_BINARY_ANALYSIS_TESTS_TRUE@DEMO_PHONY_TARGETS = $(patsubst %,demo_%,$(noinst_PROGRAMS))

# All sample binary tests have these additional dependencies
@USE_BINARY_ANALYSIS_TESTS_TRUE@SAMPLE_TEST_DEPS = execFormatsTest disassemble
all: all-recursive

.SUFFIXES:
.SUFFIXES: .C .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps tests/roseTests/binaryTests/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  --ignore-deps tests/roseTests/binaryTests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
disassemble$(EXEEXT): $(disassemble_OBJECTS) $(disassemble_DEPENDENCIES) 
	@rm -f disassemble$(EXEEXT)
	$(CXXLINK) $(disassemble_LDFLAGS) $(disassemble_OBJECTS) $(disassemble_LDADD) $(LIBS)
disassembleBuffer$(EXEEXT): $(disassembleBuffer_OBJECTS) $(disassembleBuffer_DEPENDENCIES) 
	@rm -f disassembleBuffer$(EXEEXT)
	$(CXXLINK) $(disassembleBuffer_LDFLAGS) $(disassembleBuffer_OBJECTS) $(disassembleBuffer_LDADD) $(LIBS)
execFormatsTest$(EXEEXT): $(execFormatsTest_OBJECTS) $(execFormatsTest_DEPENDENCIES) 
	@rm -f execFormatsTest$(EXEEXT)
	$(CXXLINK) $(execFormatsTest_LDFLAGS) $(execFormatsTest_OBJECTS) $(execFormatsTest_LDADD) $(LIBS)
expandCoreDump$(EXEEXT): $(expandCoreDump_OBJECTS) $(expandCoreDump_DEPENDENCIES) 
	@rm -f expandCoreDump$(EXEEXT)
	$(CXXLINK) $(expandCoreDump_LDFLAGS) $(expandCoreDump_OBJECTS) $(expandCoreDump_LDADD) $(LIBS)
findConstants$(EXEEXT): $(findConstants_OBJECTS) $(findConstants_DEPENDENCIES) 
	@rm -f findConstants$(EXEEXT)
	$(CXXLINK) $(findConstants_LDFLAGS) $(findConstants_OBJECTS) $(findConstants_LDADD) $(LIBS)
findConstantsABI$(EXEEXT): $(findConstantsABI_OBJECTS) $(findConstantsABI_DEPENDENCIES) 
	@rm -f findConstantsABI$(EXEEXT)
	$(CXXLINK) $(findConstantsABI_LDFLAGS) $(findConstantsABI_OBJECTS) $(findConstantsABI_LDADD) $(LIBS)
functionBoundaries$(EXEEXT): $(functionBoundaries_OBJECTS) $(functionBoundaries_DEPENDENCIES) 
	@rm -f functionBoundaries$(EXEEXT)
	$(CXXLINK) $(functionBoundaries_LDFLAGS) $(functionBoundaries_OBJECTS) $(functionBoundaries_LDADD) $(LIBS)
rot13$(EXEEXT): $(rot13_OBJECTS) $(rot13_DEPENDENCIES) 
	@rm -f rot13$(EXEEXT)
	$(CXXLINK) $(rot13_LDFLAGS) $(rot13_OBJECTS) $(rot13_LDADD) $(LIBS)
shiftResizeSection$(EXEEXT): $(shiftResizeSection_OBJECTS) $(shiftResizeSection_DEPENDENCIES) 
	@rm -f shiftResizeSection$(EXEEXT)
	$(CXXLINK) $(shiftResizeSection_LDFLAGS) $(shiftResizeSection_OBJECTS) $(shiftResizeSection_LDADD) $(LIBS)
symbolicSemantics$(EXEEXT): $(symbolicSemantics_OBJECTS) $(symbolicSemantics_DEPENDENCIES) 
	@rm -f symbolicSemantics$(EXEEXT)
	$(CXXLINK) $(symbolicSemantics_LDFLAGS) $(symbolicSemantics_OBJECTS) $(symbolicSemantics_LDADD) $(LIBS)
testAssembler$(EXEEXT): $(testAssembler_OBJECTS) $(testAssembler_DEPENDENCIES) 
	@rm -f testAssembler$(EXEEXT)
	$(CXXLINK) $(testAssembler_LDFLAGS) $(testAssembler_OBJECTS) $(testAssembler_LDADD) $(LIBS)
testAstIO$(EXEEXT): $(testAstIO_OBJECTS) $(testAstIO_DEPENDENCIES) 
	@rm -f testAstIO$(EXEEXT)
	$(CXXLINK) $(testAstIO_LDFLAGS) $(testAstIO_OBJECTS) $(testAstIO_LDADD) $(LIBS)
testBinCFG$(EXEEXT): $(testBinCFG_OBJECTS) $(testBinCFG_DEPENDENCIES) 
	@rm -f testBinCFG$(EXEEXT)
	$(CXXLINK) $(testBinCFG_LDFLAGS) $(testBinCFG_OBJECTS) $(testBinCFG_LDADD) $(LIBS)
testBinCG$(EXEEXT): $(testBinCG_OBJECTS) $(testBinCG_DEPENDENCIES) 
	@rm -f testBinCG$(EXEEXT)
	$(CXXLINK) $(testBinCG_LDFLAGS) $(testBinCG_OBJECTS) $(testBinCG_LDADD) $(LIBS)
testElfByteOrder$(EXEEXT): $(testElfByteOrder_OBJECTS) $(testElfByteOrder_DEPENDENCIES) 
	@rm -f testElfByteOrder$(EXEEXT)
	$(CXXLINK) $(testElfByteOrder_LDFLAGS) $(testElfByteOrder_OBJECTS) $(testElfByteOrder_LDADD) $(LIBS)
testElfConstruct$(EXEEXT): $(testElfConstruct_OBJECTS) $(testElfConstruct_DEPENDENCIES) 
	@rm -f testElfConstruct$(EXEEXT)
	$(CXXLINK) $(testElfConstruct_LDFLAGS) $(testElfConstruct_OBJECTS) $(testElfConstruct_LDADD) $(LIBS)
testElfSchulz$(EXEEXT): $(testElfSchulz_OBJECTS) $(testElfSchulz_DEPENDENCIES) 
	@rm -f testElfSchulz$(EXEEXT)
	$(CXXLINK) $(testElfSchulz_LDFLAGS) $(testElfSchulz_OBJECTS) $(testElfSchulz_LDADD) $(LIBS)
testElfStrtab$(EXEEXT): $(testElfStrtab_OBJECTS) $(testElfStrtab_DEPENDENCIES) 
	@rm -f testElfStrtab$(EXEEXT)
	$(CXXLINK) $(testElfStrtab_LDFLAGS) $(testElfStrtab_OBJECTS) $(testElfStrtab_LDADD) $(LIBS)
testElfWordSize$(EXEEXT): $(testElfWordSize_OBJECTS) $(testElfWordSize_DEPENDENCIES) 
	@rm -f testElfWordSize$(EXEEXT)
	$(CXXLINK) $(testElfWordSize_LDFLAGS) $(testElfWordSize_OBJECTS) $(testElfWordSize_LDADD) $(LIBS)
testEtherInsns$(EXEEXT): $(testEtherInsns_OBJECTS) $(testEtherInsns_DEPENDENCIES) 
	@rm -f testEtherInsns$(EXEEXT)
	$(CXXLINK) $(testEtherInsns_LDFLAGS) $(testEtherInsns_OBJECTS) $(testEtherInsns_LDADD) $(LIBS)
testLibraryDb$(EXEEXT): $(testLibraryDb_OBJECTS) $(testLibraryDb_DEPENDENCIES) 
	@rm -f testLibraryDb$(EXEEXT)
	$(CXXLINK) $(testLibraryDb_LDFLAGS) $(testLibraryDb_OBJECTS) $(testLibraryDb_LDADD) $(LIBS)
testPeConstruct$(EXEEXT): $(testPeConstruct_OBJECTS) $(testPeConstruct_DEPENDENCIES) 
	@rm -f testPeConstruct$(EXEEXT)
	$(CXXLINK) $(testPeConstruct_LDFLAGS) $(testPeConstruct_OBJECTS) $(testPeConstruct_LDADD) $(LIBS)
testRegisters$(EXEEXT): $(testRegisters_OBJECTS) $(testRegisters_DEPENDENCIES) 
	@rm -f testRegisters$(EXEEXT)
	$(CXXLINK) $(testRegisters_LDFLAGS) $(testRegisters_OBJECTS) $(testRegisters_LDADD) $(LIBS)
virtualMachineSemantics$(EXEEXT): $(virtualMachineSemantics_OBJECTS) $(virtualMachineSemantics_DEPENDENCIES) 
	@rm -f virtualMachineSemantics$(EXEEXT)
	$(CXXLINK) $(virtualMachineSemantics_LDFLAGS) $(virtualMachineSemantics_OBJECTS) $(virtualMachineSemantics_LDADD) $(LIBS)
yicesSemanticsExe$(EXEEXT): $(yicesSemanticsExe_OBJECTS) $(yicesSemanticsExe_DEPENDENCIES) 
	@rm -f yicesSemanticsExe$(EXEEXT)
	$(CXXLINK) $(yicesSemanticsExe_LDFLAGS) $(yicesSemanticsExe_OBJECTS) $(yicesSemanticsExe_LDADD) $(LIBS)
yicesSemanticsLib$(EXEEXT): $(yicesSemanticsLib_OBJECTS) $(yicesSemanticsLib_DEPENDENCIES) 
	@rm -f yicesSemanticsLib$(EXEEXT)
	$(CXXLINK) $(yicesSemanticsLib_LDFLAGS) $(yicesSemanticsLib_OBJECTS) $(yicesSemanticsLib_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.C.o:
	$(CXXCOMPILE) -c -o $@ $<

.C.obj:
	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.C.lo:
	$(LTCXXCOMPILE) -c -o $@ $<

findConstants-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findConstants_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findConstants-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

findConstants-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findConstants_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findConstants-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

findConstantsABI-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findConstantsABI_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findConstantsABI-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

findConstantsABI-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(findConstantsABI_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o findConstantsABI-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

symbolicSemantics-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemantics-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

symbolicSemantics-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(symbolicSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o symbolicSemantics-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

virtualMachineSemantics-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(virtualMachineSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o virtualMachineSemantics-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

virtualMachineSemantics-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(virtualMachineSemantics_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o virtualMachineSemantics-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

yicesSemanticsExe-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsExe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsExe-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

yicesSemanticsExe-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsExe_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsExe-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

yicesSemanticsLib-semantics.o: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsLib_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsLib-semantics.o `test -f 'semantics.C' || echo '$(srcdir)/'`semantics.C

yicesSemanticsLib-semantics.obj: semantics.C
	@echo "  COMPILE $@"; $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(yicesSemanticsLib_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o yicesSemanticsLib-semantics.obj `if test -f 'semantics.C'; then $(CYGPATH_W) 'semantics.C'; else $(CYGPATH_W) '$(srcdir)/semantics.C'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../../config
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
@USE_BINARY_ANALYSIS_TESTS_FALSE@mostlyclean-local:
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-recursive
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool mostlyclean-local

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	check-local clean clean-generic clean-libtool \
	clean-noinstPROGRAMS clean-recursive ctags ctags-recursive \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-recursive distclean-tags distdir \
	dvi dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool mostlyclean-local \
	mostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \
	uninstall uninstall-am uninstall-info-am


# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
@USE_ROSE_IN_BUILD_TREE_VAR_TRUE@export ROSE_IN_BUILD_TREE=$(top_builddir)
@USE_BINARY_ANALYSIS_TESTS_TRUE@execFormatsTest.passed: execFormatsTest.conf execFormatsTest
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCFG.passed: testBinCFG.conf testBinCFG
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=libm-2.3.6.so $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testBinCG.passed: testBinCG.conf testBinCG testBinCFG.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=libm-2.3.6.so $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfStrtab.passed: testElfStrtab.conf testElfStrtab
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=arm-poweroff $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfByteOrder.passed: testElfByteOrder.conf testElfByteOrder testElfStrtab.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=arm-poweroff $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfWordSize.passed: testElfWordSize.conf testElfWordSize testElfStrtab.passed testElfByteOrder.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=arm-poweroff $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfSchulz-1.passed: testElfSchulz.conf testElfSchulz
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) FLAGS='-rose:partitioner_search -leftovers' N=1 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfSchulz-2.passed: testElfSchulz.conf testElfSchulz
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) FLAGS='-rose:partitioner_search -leftovers' N=2 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testElfConstruct.passed: testElfConstruct.conf testElfConstruct
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testPeConstruct.passed: testPeConstruct.conf testPeConstruct
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@shiftResizeSection.passed: shiftResizeSection.conf shiftResizeSection
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=arm-ctrlaltdel $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstants.passed: semantics.conf findConstants
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=findConstants INPUT=i686-test1.O3.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@findConstantsABI.passed: semantics.conf findConstantsABI
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=findConstantsABI INPUT=i686-test1.O3.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@virtualMachineSemantics.passed: semantics.conf virtualMachineSemantics
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=virtualMachineSemantics INPUT=i686-test1.O3.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@symbolicSemantics.passed: semantics.conf symbolicSemantics
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=symbolicSemantics INPUT=i686-test1.O3.bin $< $@
@HAVE_YICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsExe.passed: semantics.conf yicesSemanticsExe
@HAVE_YICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=yicesSemanticsExe INPUT=i686-test1.O3.bin $< $@
@HAVE_LIBYICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@yicesSemanticsLib.passed: semantics.conf yicesSemanticsLib
@HAVE_LIBYICES_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) CMD=yicesSemanticsLib INPUT=i686-test1.O3.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassemble.passed: disassemble.conf disassemble
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O0.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@assembler.passed: assembler.conf disassemble
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@disassembleBuffer.passed: disassembleBuffer.conf disassembleBuffer
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=buffer2.raw ADDRESS=0x8048310 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testEtherInsns.passed: testEtherInsns.conf testEtherInsns
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_1.passed: functionBoundaries.conf functionBoundaries disassemble.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O0.bin N=1 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_2.passed: functionBoundaries.conf functionBoundaries findConstants.passed findConstantsABI.passed
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O3.bin N=2 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@functionBoundaries_3.passed: functionBoundaries.conf functionBoundaries
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O3-stripped.bin N=3 $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@expandCoreDump.passed: expandCoreDump.conf expandCoreDump
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@rot13.passed: rot13.conf rot13
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O0.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAssembler.passed: testAssembler.conf testAssembler
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=buffer2.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testAstIO.passed: testAstIO.conf testAstIO
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) INPUT=i686-test1.O0.bin $< $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@testRegisters.passed: testRegisters.conf testRegisters
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@testLibraryDb.passed: testLibraryDb.conf testLibraryDb
@ROSE_USE_SQLITE_DATABASE_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(RTH_RUN) $< $@

@USE_BINARY_ANALYSIS_TESTS_TRUE@demos: demos-local

@USE_BINARY_ANALYSIS_TESTS_TRUE@demos-local: $(DEMO_PHONY_TARGETS)

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_execFormatsTest: execFormatsTest
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./execFormatsTest $(BINARY_SAMPLES)/buffer2.bin
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo "See file buffer2.bin.dump for information regarding the executable format"
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo "See file rose-buffer2.bin.s for disassembly of instructions"

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testElfStrtab: testElfStrtab demo_execFormatsTest
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfStrtab $(BINARY_SAMPLES)/arm-poweroff

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testElfByteOrder: testElfByteOrder demo_testElfStrtab
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfByteOrder $(BINARY_SAMPLES)/arm-poweroff

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testElfWordSize: testElfWordSize demo_testElfByteOrder
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfWordSize $(BINARY_SAMPLES)/arm-poweroff

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testElfSchulz: testElfSchulz demo_testElfWordSize
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfSchulz $(BINARY_SAMPLES)/schulz-sample1.so
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfSchulz $(BINARY_SAMPLES)/schulz-sample2.so

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testElfConstruct: testElfConstruct demo_testElfSchulz
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testElfConstruct

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testPeConstruct: testPeConstruct demo_testElfConstruct
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testPeConstruct

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_shiftResizeSection: shiftResizeSection demo_testPeConstruct
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testShiftResizeSection.sh $(BINARY_SAMPLES)/arm-ctrlaltdel >arm-ctrlaltdel.ans

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_findConstants: findConstants demo_shiftResizeSection
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./findConstants $(BINARY_SAMPLES)/i686-test1.O3.bin

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_findConstantsABI: findConstantsABI demo_findConstants
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./findConstantsABI $(BINARY_SAMPLES)/i686-test1.O3.bin

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_virtualMachineSemantics: virtualMachineSemantics demo_findConstantsABI
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./virtualMachineSemantics $(BINARY_SAMPLES)/i686-test1.O3.bin

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_symbolicSemantics: symbolicSemantics demo_virtualMachineSemantics
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for symbolicSemantics

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_yicesSemanticsExe: yicesSemanticsExe demo_symbolicSemantics
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for yicesSemanticsExe

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_yicesSemanticsLib: yicesSemanticsLib demo_yicesSemanticsLib
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for yicesSemanticsLib

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_disassemble: disassemble demo_yicesSemanticsLib
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./disassemble -rose:disassembler_search following,immediate,words,allbytes,unused,nonexe,deadend,unknown $(BINARY_SAMPLES)/i686-test1.O0.bin
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo "output has been dumped to i686-test1.O0.bin.dump"

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_disassembleBuffer: disassembleBuffer demo_disassemble
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./disassembleBuffer $(BINARY_SAMPLES)/buffer2.raw 0x8048310

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testAssembler: testAssembler demo_disassembleBuffer
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<"; echo
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./testAssembler $(BINARY_SAMPLES)/buffer2.bin

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testBinCFG: testBinCFG demo_testAssembler
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for testBinCFG

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_expandCoreDump: expandCoreDump demo_testBinCFG
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for expandCoreDump

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_functionBoundaries: functionBoundaries demo_exapndCoreDump
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo; echo; echo "Demo for $<";
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo "The functionBoundaries tool prints information about what binary functions were detected and why."
@USE_BINARY_ANALYSIS_TESTS_TRUE@	./functionBoundaries $(BINARY_SAMPLES)/i686-test1.O3.bin

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_rot13: rot13
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for rot13

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testAstIO: testAstIO
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for $<

@USE_BINARY_ANALYSIS_TESTS_TRUE@demo_testRegisters: testRegisters
@USE_BINARY_ANALYSIS_TESTS_TRUE@	: no demo yet for $<

###############################################################################################################################
# DYNAMICALLY-GENERATED TESTS
#
# Most testing rules appear next to the rules for generating the test executable.  Dynamically-generated tests appear here.
#
# Dynamicly-generated tests start here and their definitions are inserted below by the "build" script.  We make the
# dynamic tests depend on the static test because we're not sure what output files will be generated and we don't want
# the output of dynamic tests causing havoc for the static tests.  The test_sample_binaries.result (along with a whole
# slew of other targets) is created by the "build" script and placed in the generated Makefile.in.
#
# The rules in this section of the makefile are generated by the "build" script based on the selection of binary samples
# (usually from the binaries/samples directory) available at that time.  We do it this way for a number of reasons:
#
#  1. Some of the samples have licenses that restrict their distribution.
#  2. Some developers work with malicious software samples that we don't wish to distribute
#  3. ROSE generates file names in the current working directory based on basenames of samples. If the sample directories
#     contain files with duplicate basenames then the tests will fail if those to files happen to be tested in parallel. These
#     dependencies must be represented in the makefile rules.
#
# See scripts/sample_binary_rules.pl for more documentation.
###############################################################################################################################

# Yes, use recursive make. See comment above.
@USE_BINARY_ANALYSIS_TESTS_TRUE@dynamic_tests: $(STATIC_TEST_TARGETS)
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(MAKE) test_sample_binaries.result

@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAA.result: $(top_srcdir)/binaries/samples/ARPPRODUCTICON.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/ARPPRODUCTICON.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAB.result: $(top_srcdir)/binaries/samples/PFE32.EXE $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/PFE32.EXE $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAC.result: $(top_srcdir)/binaries/samples/arm-ctrlaltdel $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/arm-ctrlaltdel $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAD.result: $(top_srcdir)/binaries/samples/arm-nologin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/arm-nologin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAE.result: $(top_srcdir)/binaries/samples/arm-pivot_root $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/arm-pivot_root $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAF.result: $(top_srcdir)/binaries/samples/arm-poweroff $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/arm-poweroff $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAG.result: $(top_srcdir)/binaries/samples/asm_code_samples_gcc.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/asm_code_samples_gcc.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAH.result: $(top_srcdir)/binaries/samples/bgl-helloworld-mpicc $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/bgl-helloworld-mpicc $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAI.result: $(top_srcdir)/binaries/samples/bgl-helloworld-mpixlc $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/bgl-helloworld-mpixlc $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAJ.result: $(top_srcdir)/binaries/samples/buffer2.bin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/buffer2.bin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAK.result: $(top_srcdir)/binaries/samples/buffer2.rot13 $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/buffer2.rot13 $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAL.result: $(top_srcdir)/binaries/samples/exefmt.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/exefmt.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAM.result: $(top_srcdir)/binaries/samples/fnord.i386 $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/fnord.i386 $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAN.result: $(top_srcdir)/binaries/samples/fnord.ppc $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/fnord.ppc $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAO.result: $(top_srcdir)/binaries/samples/gcc-4.0.x-test1.o $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/gcc-4.0.x-test1.o $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAP.result: $(top_srcdir)/binaries/samples/i386-ctrlaltdel $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i386-ctrlaltdel $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAQ.result: $(top_srcdir)/binaries/samples/i386-fsck.cramfs $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i386-fsck.cramfs $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAR.result: $(top_srcdir)/binaries/samples/i386-nologin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i386-nologin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAS.result: $(top_srcdir)/binaries/samples/i386-pivot_root $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i386-pivot_root $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAT.result: $(top_srcdir)/binaries/samples/i386-poweroff $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i386-poweroff $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAU.result: $(top_srcdir)/binaries/samples/i686-test1.O0.bin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i686-test1.O0.bin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAV.result: $(top_srcdir)/binaries/samples/i686-test1.O3-stripped.bin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i686-test1.O3-stripped.bin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAW.result: $(top_srcdir)/binaries/samples/i686-test1.O3.bin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/i686-test1.O3.bin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAX.result: $(top_srcdir)/binaries/samples/libm-2.3.6.so $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/libm-2.3.6.so $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAY.result: $(top_srcdir)/binaries/samples/pocketputty.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/pocketputty.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAAAZ.result: $(top_srcdir)/binaries/samples/pocketputty2.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/pocketputty2.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABA.result: $(top_srcdir)/binaries/samples/proxycfg.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/proxycfg.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABB.result: $(top_srcdir)/binaries/samples/puttytel.exe $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/puttytel.exe $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABC.result: $(top_srcdir)/binaries/samples/schulz-sample1-p.so $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/schulz-sample1-p.so $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABD.result: $(top_srcdir)/binaries/samples/schulz-sample1.so $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/schulz-sample1.so $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABE.result: $(top_srcdir)/binaries/samples/schulz-sample2-p.so $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/schulz-sample2-p.so $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABF.result: $(top_srcdir)/binaries/samples/schulz-sample2.so $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/schulz-sample2.so $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABG.result: $(top_srcdir)/binaries/samples/x86-64-ctrlaltdel $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/x86-64-ctrlaltdel $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABH.result: $(top_srcdir)/binaries/samples/x86-64-nologin $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/x86-64-nologin $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABI.result: $(top_srcdir)/binaries/samples/x86-64-pivot_root $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/x86-64-pivot_root $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sampleAABJ.result: $(top_srcdir)/binaries/samples/x86-64-poweroff $(SAMPLE_TEST_DEPS) 
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@$(srcdir)/testSampleBinary.sh $(top_srcdir)/binaries/samples/x86-64-poweroff $(srcdir)/testSampleBinaries.conf >$@.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@mv $@.tmp $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@
@USE_BINARY_ANALYSIS_TESTS_TRUE@test_sample_binaries.result: test_sampleAAAA.result test_sampleAAAB.result test_sampleAAAC.result test_sampleAAAD.result test_sampleAAAE.result test_sampleAAAF.result test_sampleAAAG.result test_sampleAAAH.result test_sampleAAAI.result test_sampleAAAJ.result test_sampleAAAK.result test_sampleAAAL.result test_sampleAAAM.result test_sampleAAAN.result test_sampleAAAO.result test_sampleAAAP.result test_sampleAAAQ.result test_sampleAAAR.result test_sampleAAAS.result test_sampleAAAT.result test_sampleAAAU.result test_sampleAAAV.result test_sampleAAAW.result test_sampleAAAX.result test_sampleAAAY.result test_sampleAAAZ.result test_sampleAABA.result test_sampleAABB.result test_sampleAABC.result test_sampleAABD.result test_sampleAABE.result test_sampleAABF.result test_sampleAABG.result test_sampleAABH.result test_sampleAABI.result test_sampleAABJ.result
@USE_BINARY_ANALYSIS_TESTS_TRUE@	@touch $@
@USE_BINARY_ANALYSIS_TESTS_TRUE@mostlyclean-binarysamples:
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sample_binaries.result
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAA.result test_sampleAAAA.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/ARPPRODUCTICON.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAB.result test_sampleAAAB.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/PFE32.EXE $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAC.result test_sampleAAAC.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/arm-ctrlaltdel $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAD.result test_sampleAAAD.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/arm-nologin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAE.result test_sampleAAAE.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/arm-pivot_root $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAF.result test_sampleAAAF.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/arm-poweroff $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAG.result test_sampleAAAG.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/asm_code_samples_gcc.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAH.result test_sampleAAAH.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/bgl-helloworld-mpicc $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAI.result test_sampleAAAI.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/bgl-helloworld-mpixlc $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAJ.result test_sampleAAAJ.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/buffer2.bin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAK.result test_sampleAAAK.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/buffer2.rot13 $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAL.result test_sampleAAAL.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/exefmt.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAM.result test_sampleAAAM.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/fnord.i386 $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAN.result test_sampleAAAN.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/fnord.ppc $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAO.result test_sampleAAAO.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/gcc-4.0.x-test1.o $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAP.result test_sampleAAAP.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i386-ctrlaltdel $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAQ.result test_sampleAAAQ.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i386-fsck.cramfs $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAR.result test_sampleAAAR.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i386-nologin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAS.result test_sampleAAAS.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i386-pivot_root $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAT.result test_sampleAAAT.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i386-poweroff $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAU.result test_sampleAAAU.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i686-test1.O0.bin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAV.result test_sampleAAAV.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i686-test1.O3-stripped.bin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAW.result test_sampleAAAW.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/i686-test1.O3.bin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAX.result test_sampleAAAX.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/libm-2.3.6.so $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAY.result test_sampleAAAY.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/pocketputty.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAAAZ.result test_sampleAAAZ.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/pocketputty2.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABA.result test_sampleAABA.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/proxycfg.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABB.result test_sampleAABB.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/puttytel.exe $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABC.result test_sampleAABC.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/schulz-sample1-p.so $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABD.result test_sampleAABD.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/schulz-sample1.so $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABE.result test_sampleAABE.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/schulz-sample2-p.so $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABF.result test_sampleAABF.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/schulz-sample2.so $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABG.result test_sampleAABG.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/x86-64-ctrlaltdel $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABH.result test_sampleAABH.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/x86-64-nologin $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABI.result test_sampleAABI.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/x86-64-pivot_root $(srcdir)/testSampleBinaries.conf
@USE_BINARY_ANALYSIS_TESTS_TRUE@	rm -f test_sampleAABJ.result test_sampleAABJ.result.tmp
@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(srcdir)/testSampleBinary.sh --cleanup $(top_srcdir)/binaries/samples/x86-64-poweroff $(srcdir)/testSampleBinaries.conf


# DQ (10/19/2010): This rule fails when ROSE is configure using --without-java, why is this?
# if !ROSE_USE_INTERNAL_JAVA_SUPPORT
# mostlyclean-binarysamples is defined by scripts/sample_binary_rules.pl invoked from "build"
@USE_BINARY_ANALYSIS_TESTS_TRUE@mostlyclean-local: mostlyclean-binarysamples
# endif

# DQ (3/21/2009): These tests don't appear to run under Cygwin.
@ROSE_BUILD_OS_IS_CYGWIN_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@check-local:
@ROSE_BUILD_OS_IS_CYGWIN_TRUE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	@echo "  TESTING (disabled: all tests disabled for Cygwin)"
@ROSE_BUILD_OS_IS_CYGWIN_FALSE@@USE_BINARY_ANALYSIS_TESTS_TRUE@check-local: $(STATIC_TEST_TARGETS) dynamic_tests
@ROSE_BUILD_OS_IS_CYGWIN_FALSE@@USE_BINARY_ANALYSIS_TESTS_TRUE@	$(RTH_STATS)

@USE_BINARY_ANALYSIS_TESTS_FALSE@check-local:
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
