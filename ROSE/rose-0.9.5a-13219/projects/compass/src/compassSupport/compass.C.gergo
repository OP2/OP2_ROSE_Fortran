#include "compass.h"
#include <rose.h>
#include <sstream>
#include <fstream>

Compass::Parameters::Parameters(const std::string& filename) 
						throw (Compass::ParseError) {
  std::ifstream stream(filename.c_str());
  if (!stream) {
    std::cerr << "Parameter file " << filename << " cannot be opened" <<
                 std::endl;
    exit(1);
  }
  std::string line;
  while (stream && !stream.eof()) {
    std::getline(stream, line);
    if (line.empty() || line[0] == '#') continue;
    std::string name, value;
    std::string::size_type pos = line.find('=');
    if (pos == std::string::npos || pos == 0)
      throw Compass::ParseError(line, "parameter assignment");
    name = line.substr(0, pos);
    // strip spaces off the end of the name string
    std::string::size_type spaces = name.find_last_not_of(' ');
    if (spaces != std::string::npos)
      name.resize(spaces + 1);
    value = line.substr(pos + 1);
    if (this->data.find(name) != this->data.end()) {
      throw Compass::ParseError(name, "non-duplicate parameter name");
    }
    data[name] = value;
  }
}

std::string Compass::Parameters::operator[](const std::string& name) const
				throw (Compass::ParameterNotFoundException) {
  std::map<std::string, std::string>::const_iterator i = this->data.find(name);
  if (i == this->data.end()) {
    throw Compass::ParameterNotFoundException(name);
  } else {
    return i->second;
  }
}

int Compass::parseInteger(const std::string& str) {
  std::istringstream is(str);
  int i;
  is >> i;
  if (!is || !is.eof()) throw Compass::ParseError(str, "integer");
  return i;
}

double Compass::parseDouble(const std::string& str) {
  std::istringstream is(str);
  double d;
  is >> d;
  if (!is || !is.eof()) throw Compass::ParseError(str, "double");
  return d;
}

bool Compass::parseBool(const std::string& str) {
  std::istringstream is(str);
  bool b;
  is >> b;
  if (!is || !is.eof()) throw Compass::ParseError(str, "bool");
  return b;
}

std::vector<int> Compass::parseIntegerList(const std::string& str) {
  std::istringstream is(str);
  std::vector<int> v;
  if (str.empty())
    return v;
  int i;
  is >> i;
  while (is && !is.eof()) {
    v.push_back(i);
    is >> i;
  }
  if (!is || !is.eof()) throw Compass::ParseError(str, "integer list");
  else
    v.push_back(i);
  return v;
}

std::vector<double> Compass::parseDoubleList(const std::string& str) {
  std::istringstream is(str);
  std::vector<double> v;
  if (str.empty())
    return v;
  double d;
  is >> d;
  while (is && !is.eof()) {
    v.push_back(d);
    is >> d;
  }
  if (!is || !is.eof()) throw Compass::ParseError(str, "double list");
  else
    v.push_back(d);
  return v;
}

std::string Compass::formatStandardSourcePosition(Sg_File_Info* fi) {
  return Compass::formatStandardSourcePosition(fi->get_filenameString(),
                                               fi->get_line(),
                                               fi->get_col());
}

std::string Compass::formatStandardSourcePosition(Sg_File_Info* start,
                                                  Sg_File_Info* end) {
  return Compass::formatStandardSourcePosition(start->get_filenameString(),
                                               start->get_line(),
                                               start->get_col(),
                                               end->get_filenameString(),
                                               end->get_line(),
                                               end->get_col());
}

std::string Compass::formatStandardSourcePosition(const std::string& filename,
                                                  int line, int col) {
  std::ostringstream os;
  os << filename << ":" << line << "." << col;
  return os.str();
}

std::string Compass::formatStandardSourcePosition(const std::string& sfilename,
                                                  int sline, int scol,
                                                  const std::string& efilename,
                                                  int eline, int ecol) {
  std::ostringstream os;
  if (sfilename != efilename) {
    os << Compass::formatStandardSourcePosition(sfilename, sline, scol) <<
          "-" <<
          Compass::formatStandardSourcePosition(efilename, eline, ecol);
  } else if (sline != eline) {
    os << sfilename << ":" << sline << "." << scol << "-" <<
          eline << "." << ecol;
  } else if (scol != ecol) {
    os << sfilename << ":" << sline << "." << scol << "-" << ecol;
  } else {
    os << Compass::formatStandardSourcePosition(sfilename, sline, scol);
  }
  return os.str();
}
