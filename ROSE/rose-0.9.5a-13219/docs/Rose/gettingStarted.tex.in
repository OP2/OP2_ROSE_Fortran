\chapter{Getting Started}

\label{gettingStarted:gettingStarted}

% \section{Building ROSE}

%  Purpose:
% \begin{itemize}
%    \item A. What you need to get started
%    \item B. Preparing the working copy
% \end{itemize}
% \begin{center}
% *********************  \newline
% \end{center}
% \vspace{0.25in}

   This chapter details how to build ROSE and how to begin to use ROSE to build a 
source-to-source translator.
ROSE uses EDG and SAGE III internally. EDG is a commercial (and proprietary) C++
frontend that we are permitted to use to support our research work. SAGE III is
loosely derived from SAGE II, which is derived from SAGE++.  SAGE III is a rewrite of 
SAGE II and uses a similar object-oriented design and a similar interface (API).
% We have made substantial changes in the development of Sage III, 
The developers of SAGE II suggested that we call our work on the C++
intermediate representation Sage III. We are thankful to the developers
of SAGE II for their work.
% It contains the software and hardware requirements of ROSE.
% Additionally, it details the installation of the software.

\section{ROSE Documentation and Where to Find It}

To simplify user access to the ROSE documentation, the pre-built postscript files are 
included in the {\tt ROSE/docs/Rose} directory of each ROSE distribution. These versions
are always kept up-to-date by the automated build system that generates
ROSE distributions:
% Documentation there is:
\begin{itemize}
   \item {\bf ROSE Web Page} : The ROSE Web page is located at
           \htmladdnormallink{www.roseCompiler.org}{http://www.roseCompiler.org}. \\
           The web page contains the ROSE manual, tutorial and developer API. 
           The API provides details about IR nodes and their usage (interfaces). The documentation
           is generated by Doxygen.
   \item {\bf ROSE offline Web content} : ROSE/docs/Rose/ROSE-\VersionNumber-HTML-Docs.ps.gz \\
       ROSE HTML documentation that is available without internet access.
   \item {\bf MANUAL} : ROSE/docs/Rose/ROSE-\VersionNumber-UserManual.ps.gz \\
       This is the ROSE User Manual which explains basic concepts about and capabilities within ROSE. \\
   \item {\bf TUTORIAL} : ROSE/docs/Rose/Tutorial/ROSE-\VersionNumber-Tutorial.tar.gz \\
       This is the ROSE Tutorial with numerous examples of how to use ROSE. \\
       The tutorial documentation is
           constructed using the following steps:
           \begin{enumerate}
              \item Actual source code for each example translator in the ROSE/tutorial
                    directory is included. 
              \item Each example is compiled.
              \item Inputs to the examples are taken from the ROSE/tutorial directory.
              \item Output generated from running each example is placed into the tutorial
                    documentation.
           \end{enumerate}
           Thus, the {\tt ROSE/tutorial} contains exact examples, and each
           example may be manipulated (changing either the example translators or the
           inputs to the examples).
   \item {\bf PAPERS} : ROSE/ROSE\_RESEARCH\_PAPERS.tar.gz \\
       These are the current ROSE related research papers.
\end{itemize}

\commentout{
   There are three forms of ROSE documentation, and a ROSE Web site and email list:
\begin{enumerate}
     \item ROSE User Manual \\
           The User Manual presents how to get started with ROSE and documents 
           features of the ROSE infrastructure.  The User Manual is found in 
           {\tt ROSE/docs/Rose} directory, or at the following web pages: \\
           \htmladdnormallink{ROSE User Manual (postscript version, relative link)}{http://www.rosecompiler.org/ROSE_UserManual/ROSE-@VERSION@-UserManual.ps}
           or \\
           \htmladdnormallink{ROSE User Manual (HTML version, relative link)}{http://www.rosecompiler.org/ROSE_UserManual/manual.html}
     \item ROSE Tutorial \\
           The ROSE Tutorial presents examples of how to use ROSE (found
           in the {\tt ROSE/tutorial} directory).  The ROSE Tutorial documentation is found in 
           {\tt ROSE/docs/Rose/Tutorial} directory and the tutorial documentation is
           constructed using the following steps:
           \begin{enumerate}
              \item Actual source code for each example translator in the ROSE/tutorial
                    directory is included. % into the tutorial documentation
              \item Each example is compiled.
              \item Inputs to the examples are taken from the ROSE/tutorial directory.
              \item Output generated from running each example is placed into the tutorial
                    documentation.
           \end{enumerate}
           Thus, the {\tt ROSE/tutorial} contains exact examples, and each
           example may be manipulated (changing either the example translators or the
           inputs to the examples).  The ROSE Tutorial can also be found at (link back 
           to LaTeX document): \\
           \htmladdnormallink{ROSE Tutorial (postscript version, relative link)}{http://www.rosecompiler.org/ROSE_Tutorial/ROSE-@VERSION@-Tutorial.ps}
           or \\
           \htmladdnormallink{ROSE Tutorial (html version, relative link)}{http://www.rosecompiler.org/ROSE_Tutorial/tutorial.html}
     \item ROSE HTML Reference: Intermediate Representation (IR) documentation \\
           This Web documentation gives the detail interfaces for each IR nodes
           (documentation generated by Doxygen).
           The HTML IR documentation is found in ROSE/docs/Rose directory 
           (available as HTML only): \\
           \htmladdnormallink{ROSE HTML Reference (relative
               link)}{http://www.rosecompiler.org/ROSE_HTML_Reference/index.html}
     \item ROSE Web Site \\
           The ROSE project maintains a Web site where this documentation and some
           additional information (including the ROSE software distribution:
           {\em starting late Summer 2006}) is available at
           \htmladdnormallink{ROSE Web Site
             (www.rosecompiler.org)}{http://www.rosecompiler.org}
     \item ROSE Email List \\
           The ROSE project maintains a mailing list (rose-public *at* nersc *dot* gov).
           Anyone who would like to be on the email list can subscribe to
           it at:
           \htmladdnormallink{ROSE Public Email List}
                {https://mailman.nersc.gov/mailman/listinfo/rose-public}.
\end{enumerate}
}

% DQ (1/20/2009): Fixing the reference to the email list for ROSE.
The ROSE project maintains an external mailing list (see information at:
\htmladdnormallink{www.roseCompiler.org}{http://www.roseCompiler.org} and click on the
{\bf Mailing Lists} link for how to join).

\input{installRose}


\section{Building Translators Using ROSE}

   At this point you should have installed ROSE. For examples of ROSE translators
see the ROSE-\VersionNumber-Tutorial.tar.gz and the examples in the {\tt ROSE/tutorial} 
directory.

\section{Robustness of ROSE}
    A significant focus of the ROSE project is on the robustness of
the software supporting our project.  We have based the C and C++ support
upon the use of the EDG frontend (the same commercial quality frontend used by most
commercial C++ compilers). ROSE is a research project at a Department or Energy (DOE)
national laboratory.  As such, it must handle DOE laboratory applications that
scale to a million lines of code or more.  ROSE is not an academic research
project, nor is it a commercial product.  This section will layout what we do to test 
ROSE, what parts we consider to be {\em robust}, and exactly what we mean by 
{\em robust}.

\subsection{How We Test ROSE}

\subsubsection{ROSE Regression Tests}
   Our regression test of collected bugs reported over several years
helps prevent the reintroduction of old bugs during the development process.
Additional test codes and applications codes help provide more complete
testing of ROSE. 

\subsubsection{Elsa Regression Tests}
   Recent work has included the a separate regression test suit from the Elsa
project (an open source C++ parser project).  This is tested infrequently at
this point, but will be folded into standard ROSE regression tests in the future.
We wish to thanks Scott McPeak for the use of his rather large collection of
tests that he uses within Elsa (about 1000 test codes that test many corners of
the C, C99, and C++ language).

\commentout{
\subsubsection{Application Codes}
   ROSE will be released after tests are complete on approximately 10 separate 
one-million-line application codes:
\begin{enumerate}
%  \item KULL \\
%         This is an important application at LLNL.
%  \item ALE3D \\
%         This is an important application at LLNL.
%  \item ARES \\
%         This is an important application at LLNL.
%  \item CHOMBO \\
%         This is an Adaptive Mesh Refinement (AMR) library at Lawrence Berkeley National Laboratory.
%  \item DiffPack \\
%         This is a numerical library originally developed at University of Oslo, Norway.
%         The developers have been substantial collaborators to the ROSE project.
   \item ROSE \\
          The compilation of compiler project (ROSE) with itself is a milestone 
          for any compiler project.  ROSE can be used to compile the ROSE source
          code and has provided a good test of the internal compiler robustness.
   \item Overture \\
          This is an internal DOE library that supports Overset Grid applications.
          It is well in excess of one million lines of code. It includes 
          the A++/P++ library and other libraries upon which it depends.
%  \item CHROMA \\
%         This is an Molecular Dynamics application developed at University of Illinois at
%   Urbana-Champaign (UIUC). This is not really a one million line code, I think, but 
%   Overture more than makes up the difference.
\end{enumerate}

The first six are mostly done, in the sense that there are about 10 bugs
that have been isolated which appear to be the only remaining
problems.  I am working on these bugs, but some are non-trivial (read {\em hard}).
}

\subsubsection{Plum Hall C and C++ Compiler Test Suite}
   This is a commercial C and C++ compiler test suit that was purchased
for us by the DOE Advanced Simulation and Computing (ASC) program.  We appreciate their 
substantial support of ROSE. They also fund part of the ROSE project, but these
test codes are REALLY hard.

\subsubsection{Nightly cron jobs}
Nightly regression tests are run on ROSE, these are easy to setup using the command 
{\tt crontab -e}, this will bring up an editor, then put in the following lines: 
\begin{verbatim}
# Time Spec, 1st column: minute, 2nd column: hours, 3rd column: day, 4th column: month, 5th column: year?; 
# then followed by the command to be run at the time specified by the time spec:
55 12 * * * cd /home/dquinlan/ROSE/svn-rose/scripts && ./roseFreshTest ./roseFreshTestStub-xyz.sh 
\end{verbatim}

Then build a special roseFreshTestStub-xyz.sh file (examples are in the {\em ROSE/scripts} 
directory); it holds the required paths for the environment to be setup.

%\fixme{What does the TID reference to "em-dash" mean.}

\subsection{What Parts of ROSE Are Robust}
    We consider the compiler construction issues -- IR, code generation, AST 
traversal support, and low level AST transformation mechanisms -- to be robust.  
These are the mechanisms that are dominantly tested by the regression suits 
and application codes.  Specifically, a ROSE translator is built that does no
transformation (e.g. {\em IdentityTransformation.C} in the ROSE Tutorial).
Input files are processed with this translator, and the following steps
are tested for each source file:
\begin{itemize}
   \item EDG's AST is built internally.
   \item ROSE's AST (the SAGE III AST) is built from the EDG AST.
   \item EDG's AST is deleted.
   \item ROSE's AST traversals are tested.
   \item ROSE's AST Attribute Mechanism is tested in each IR node.
   \item ROSE's AST internal tests are done (all tests must pass).
   \item ROSE's Code Generator is used to regenerate the source code.
   \item Vendor compiler compiles the ROSE-generated source code.
\end{itemize}

Note that separate tests to run the executables generated form the vendor compiler's
compilation of the ROSE generated sources are not automated.  This is not yet a
standard test in ROSE, just verified infrequently.

\subsection{What Parts of ROSE Are {\em Not} Robust}
    Basically, the program analysis lags in robustness. The robustness of the program analysis and 
optimization in ROSE has only recently become a focus.
This work is not yet as durable as the compiler construction aspects of ROSE.
The development of the ROSE infrastructure requires that we can first compile
and transform large scale applications before we address complex program analysis
and its robustness.

\section{Submitting a Bug Report}
     The rule is simple: the better quality the bug report, the higher priority it
gets.  All good bug reports include a very simple example that demonstrates
the bug, and only that bug, so that it is clearly reproducible.  We welcome your submission
of good quality bug reports.  You may also send email directly to 
{\it dquinlan *at* llnl *dot* gov}.  Any bug report you submit will be added as a test 
code and used to test future versions of ROSE (please add {\bf ROSE bug report} to the 
subject line).  At a later point we will use a more formal bug tracking mechanism.


\section{Getting a Free EDG License for Research Use}

ROSE source code is released under BSD license to make it as easy as possible to use.
ROSE uses the EDG (www.edg.com) C++ front-end to parse C++ code internally.
No part of the EDG source code is visible to the user or ROSE. ROSE distributes
a binary version of the EDG work for a limited but growing range of platforms (32-bit and 
64-bit Linux, Mac OSX, etc.). Since ROSE does not yet routinely package a separate binary 
for more than this range of platforms, we can optionally provide the EDG source code as 
part of the distribution of ROSE.  However, we only give out ROSE source code that 
includes the EDG source code to research groups that also get a free research license 
for the EDG source code (available from EDG).  

   We are particularly thankful to the EDG people for providing such a
good quality C++ front-end and for allowing it to be used for research work 
in C++.  They have permitted research work specific to the C++ language
to address the complexity of real application written in C++, which would not 
otherwise be practical or within the scope of a research project.

   To get a version of ROSE, we encourage you to contact EDG to obtain their research
license.  Instructions for getting an EDG license:

\begin{itemize}
     \item Send email to these three fellows at EDG:
     \begin{itemize}
          \item Steve Adamczyk       jsa at edg.com
          \item John Spicer          jhs at edg.com
          \item Daveed Vandevoorde   daveed at edg.com
     \end{itemize}
\end{itemize}

I suggest sending the email to all of them at the same time so that they can see that you have
sent email to the other two, since I really don't know which one is the correct person
to contact.  At some point we might get more information about a better approach.

The content of the email can be something like: \\
\begin{itemize}
   \item We would like to work with the ROSE project at Lawrence Livermore 
         National Laboratory (LLNL) which is using the EDG front-end for 
         research on C++ optimization. They have asked that we obtain a 
         research license in order to use ROSE for our research work with them.
\end{itemize}

They will then contact you (by email) and give you the location of the license form
to fill out and get signed.  They will either let you know where to
get the EDG software or suggest that you get our version of their code
directly from us.  We will then give you all of ROSE, which includes (at present)
the source code to the EDG front-end.  You will not need a version of EDG 
directly from them.













