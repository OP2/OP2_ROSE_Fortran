#==========================================================================
# Outliner tutorial examples.

include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs

OUTLINER_INCS = -I$(top_srcdir)/src/midend/astOutlining
OUTLINER_LIBS = $(ROSE_LIBS)

# Data files generated by running the demo.
# noinst_DATA = inputCode_OutlineLoop$(EXEEXT)
generatedFiles = inputCode_OutlineLoop$(EXEEXT) \
	rose_inputCode_OutlineLoop.cc \
	inputCode_OutlineLoop.out \
	\
	outlined-inputCode_OutlineLoop.cc \
	rose_outlined-inputCode_OutlineLoop.cc \
	outlined_pp-inputCode_OutlineLoop.cc \
	rose_outlined_pp-inputCode_OutlineLoop.cc \
	\
	inputCode_OutlineNonLocalJumps$(EXEEXT) \
	rose_inputCode_OutlineNonLocalJumps.cc \
	inputCode_OutlineNonLocalJumps.out \
	\
	rose_outlined-inputCode_OutlineNonLocalJumps.cc \
	outlined-inputCode_OutlineNonLocalJumps.cc \
	outlined_pp-inputCode_OutlineNonLocalJumps.cc \
	rose_outlined_pp-inputCode_OutlineNonLocalJumps.cc \
	\
	inputCode_Ifs$(EXEEXT) \
	inputCode_Ifs.out \
	rose_inputCode_Ifs.cc \
	rose_inputCode_OutlineLoop2.c \
	rose_inputCode_OutlineLoop2b.c \
	rose_declarations.c \
	rose_thisExpression.cpp

#docs: $(generatedFiles) 
# declarations.c is used to test "outline -rose:outline:preproc-only"
EXTRA_DIST = CMakeLists.txt \
	inputCode_OutlineLoop.cc \
	inputCode_OutlineLoop2.c \
	inputCode_OutlineNonLocalJumps.cc \
	inputCode_Ifs.cc \
	declarations.c \
	thisExpression.cpp

INDENT_BIN = indent
INDENT_ARGS = -npsl

#==========================================================================
# Build demo translators

INCLUDES = $(ROSE_INCLUDES) $(OUTLINER_INCS)
# We install a copy
bin_PROGRAMS = outline
noinst_PROGRAMS = outlineIfs outlinePreproc

outline_SOURCES = outline.cc
outline_LDFLAGS = $(OUTLINER_LIBS)

outlineIfs_SOURCES = outlineIfs.cc
outlineIfs_LDFLAGS = $(OUTLINER_LIBS)

outlinePreproc_SOURCES = outlinePreproc.cc
outlinePreproc_LDFLAGS = $(OUTLINER_LIBS)

#==========================================================================
# Example 1: Basic outlining of a nested loop

inputCode_OutlineLoop$(EXEEXT): rose_inputCode_OutlineLoop.cc
	$(CXX) -o $@ $<

rose_inputCode_OutlineLoop.cc: outline$(EXEEXT) \
		$(srcdir)/inputCode_OutlineLoop.cc
	./outline$(EXEEXT) -c $(srcdir)/inputCode_OutlineLoop.cc

inputCode_OutlineLoop.out: inputCode_OutlineLoop$(EXEEXT)
	./$< > $@

# Copies the input file so unparsed output has the desired filename.
outlined-inputCode_OutlineLoop.cc: \
		$(srcdir)/inputCode_OutlineLoop.cc
	cp $< $@

rose_outlined-inputCode_OutlineLoop.cc: outline$(EXEEXT) \
		outlined-inputCode_OutlineLoop.cc
	./outline$(EXEEXT) -c outlined-inputCode_OutlineLoop.cc
	test -f $@
	if which $(INDENT_BIN); then \
	  $(INDENT_BIN) $(INDENT_ARGS) $@; \
	fi

#==========================================================================
# Example 2: Non-local jumps demo

inputCode_OutlineNonLocalJumps$(EXEEXT): rose_inputCode_OutlineNonLocalJumps.cc
	$(CXX) -o $@ $<

rose_inputCode_OutlineNonLocalJumps.cc : outline$(EXEEXT) $(srcdir)/inputCode_OutlineNonLocalJumps.cc
	./outline$(EXEEXT) -o inputCode_OutlineNonLocalJumps$(EXEEXT) $(srcdir)/inputCode_OutlineNonLocalJumps.cc

inputCode_OutlineNonLocalJumps.out: inputCode_OutlineNonLocalJumps$(EXEEXT)
	./$< > $@

# Copies the input file so unparsed output has the desired filename.
outlined-inputCode_OutlineNonLocalJumps.cc: $(srcdir)/inputCode_OutlineNonLocalJumps.cc
	cp $< $@

rose_outlined-inputCode_OutlineNonLocalJumps.cc: outline$(EXEEXT) \
		outlined-inputCode_OutlineNonLocalJumps.cc
	./outline$(EXEEXT) -c outlined-inputCode_OutlineNonLocalJumps.cc
	test -f $@
	if which $(INDENT_BIN); then \
	  $(INDENT_BIN) $(INDENT_ARGS) $@ ; \
	fi

#==========================================================================
# Example 3: Direct-call demo (outline all if statements)

# inputCode_Ifs$(EXEEXT) rose_inputCode_Ifs.cc: outlineIfs$(EXEEXT)
inputCode_Ifs$(EXEEXT): rose_inputCode_Ifs.cc
	$(CXX) -o $@ $<

rose_inputCode_Ifs.cc: outlineIfs$(EXEEXT) \
		$(srcdir)/inputCode_Ifs.cc
	./outlineIfs$(EXEEXT) -c $(srcdir)/inputCode_Ifs.cc

inputCode_Ifs.out: inputCode_Ifs$(EXEEXT)
	./$< January February March April May June July \
	     August September October November December \
	  > $@

#==========================================================================
# Example 4: Running the outliner's preprocessing-only phase.

# Copies the input file so unparsed output has the desired filename.
outlined_pp-inputCode_OutlineLoop.cc: $(srcdir)/inputCode_OutlineLoop.cc
	cp $< $@

rose_outlined_pp-inputCode_OutlineLoop.cc : outlinePreproc$(EXEEXT) outlined_pp-inputCode_OutlineLoop.cc
	./outlinePreproc$(EXEEXT) -c outlined_pp-inputCode_OutlineLoop.cc
	test -f $@
#	if test -x `which $(INDENT_BIN)` ; then 
	if which $(INDENT_BIN) ;  then \
	  $(INDENT_BIN) $(INDENT_ARGS) $@ ;  \
	fi

# Copies the input file so unparsed output has the desired filename.
outlined_pp-inputCode_OutlineNonLocalJumps.cc: $(srcdir)/inputCode_OutlineNonLocalJumps.cc
	cp $< $@

rose_outlined_pp-inputCode_OutlineNonLocalJumps.cc: outlinePreproc$(EXEEXT) \
		outlined_pp-inputCode_OutlineNonLocalJumps.cc
	./outlinePreproc$(EXEEXT) -c \
	  outlined_pp-inputCode_OutlineNonLocalJumps.cc
	test -f $@
	if which $(INDENT_BIN) ; then \
	  $(INDENT_BIN) $(INDENT_ARGS) $@ ; \
	fi
#========================================================================
# example 5: abstract handle demo	
# using source file location : a for loop at line 12,
rose_inputCode_OutlineLoop2.c: outline$(EXEEXT) \
		$(srcdir)/inputCode_OutlineLoop.cc
	./outline$(EXEEXT) -rose:outline:enable_debug -rose:outline:enable_classic -rose:outline:abstract_handle "ForStatement<position,12>" -c $(srcdir)/inputCode_OutlineLoop2.c
# using name and relative numbering: the second loop within a function named initialize()	
rose_inputCode_OutlineLoop2b.c: outline$(EXEEXT) \
		$(srcdir)/inputCode_OutlineLoop.cc
	./outline$(EXEEXT) -rose:outline:enable_classic -rose:outline:enable_debug -rose:outline:abstract_handle "FunctionDeclaration<name,initialize>::ForStatement<numbering,2>" -c $(srcdir)/inputCode_OutlineLoop2.c -rose:output rose_inputCode_OutlineLoop2b.c

rose_declarations.c:outline$(EXEEXT)
	./outline$(EXEEXT)  -rose:outline:preproc-only -rose:outline:abstract_handle "Statement<position,5>" -c $(srcdir)/declarations.c

rose_thisExpression.cpp:outline$(EXEEXT)
	./outline$(EXEEXT) -c $(srcdir)/thisExpression.cpp


#==========================================================================
# Miscellaneous

cleanDocs:
	rm -f *.C *.cc *.ti *.out 

clean-local:
	rm -rf rose_*.c rose_*.C OUT__* $(CXX_TEMPLATE_OBJECTS) Templates.DB ii_files ti_files *.ti $(generatedFiles)
	rm -f $(generatedFiles) *.o *~ core *.BAK

distclean-local:
	rm -rf Templates.DB
	rm -f $(generatedFiles)

# DQ (5/27/2007): Added "docs" rule
# docs: $(noinst_PROGRAMS) $(generatedFiles)
docs: $(generatedFiles)
	@echo ""
	@echo "******************************************************************************"
	@echo "Generated required documentation for tutorial/outliner (make docs rule) ..."
	@echo "******************************************************************************"

# DQ (9/8/2007): Added "check" rule
check-local:
#	For make check to be rerun if we want to rerun make clean
#	rm -rf $(generatedFiles)
# DQ (9/10/2009): Skip tests on Debian system to test ROSE (and focus first on where it works!)
if !OS_VENDOR_DEBIAN
	$(MAKE) docs
	@echo "***************************************************************************************"
	@echo "****** ROSE/tutorial/outliner: make check rule complete (terminated normally) ******"
	@echo "***************************************************************************************"
else
	@echo "***** SKIPPING TESTS IN ROSE/tutorial/outliner *****"
endif

# eof
