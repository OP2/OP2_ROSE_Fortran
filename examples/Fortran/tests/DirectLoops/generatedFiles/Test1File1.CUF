MODULE GENERATED_MODULE
  USE ISO_C_BINDING
  USE OP2_C
  USE cudaConfigurationParams
  USE CUDAFOR
  TYPE  :: real8Array_integer4Array_real8Array_opDatDimensions
  INTEGER(kind=4) :: opDat1Dimension
  INTEGER(kind=4) :: opDat2Dimension
  INTEGER(kind=4) :: opDat3Dimension
  END TYPE real8Array_integer4Array_real8Array_opDatDimensions

  TYPE  :: real8Array_integer4Array_real8Array_variableSizes
  INTEGER(kind=4) :: opDat1Size
  INTEGER(kind=4) :: opDat2Size
  INTEGER(kind=4) :: opDat3Size
  END TYPE real8Array_integer4Array_real8Array_variableSizes

  LOGICAL :: isFirstTime_real8Array_integer4Array_real8Array = .TRUE.
  TYPE ( real8Array_integer4Array_real8Array_variableSizes ) , DEVICE :: sizes_real8Array_integer4Array_real8Array
  TYPE ( real8Array_integer4Array_real8Array_opDatDimensions ) , DEVICE :: dimensions_real8Array_integer4Array_real8Arr&
  &ay
  CONTAINS

  attributes(device) SUBROUTINE s2023763597()
    REAL(kind=8), DIMENSION(4) :: a
    INTEGER(kind=4), DIMENSION(7) :: b
    REAL(kind=8), DIMENSION(11) :: c
    INTEGER(kind=4) :: i

    DO i = 1, 4
      c(i) = a(i)
    END DO

    DO i = 5, 11
      c(i) = int(b(i - 4))
    END DO

  END SUBROUTINE

  attributes(global) SUBROUTINE s744293032(dimensions_s2023763597, sizes_s2023763597, opDat1, opDat2, opDat3, setSize, &
  &warpSize)
    IMPLICIT NONE
    TYPE ( real8Array_integer4Array_real8Array_opDatDimensions ) , DEVICE :: dimensions_s2023763597
    TYPE ( real8Array_integer4Array_real8Array_variableSizes ) , DEVICE :: sizes_s2023763597
    REAL(kind=8), DIMENSION(0:sizes_s2023763597%opDat1Size - 1), DEVICE :: opDat1
    INTEGER(kind=4), DIMENSION(0:sizes_s2023763597%opDat2Size - 1), DEVICE :: opDat2
    REAL(kind=8), DIMENSION(0:sizes_s2023763597%opDat3Size - 1), DEVICE :: opDat3
    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4), VALUE :: warpSize
    REAL(kind=8), DIMENSION(0:3) :: opDat1Local
    INTEGER(kind=4), DIMENSION(0:6) :: opDat2Local
    REAL(kind=8), DIMENSION(0:10) :: opDat3Local
    REAL(kind=8), DIMENSION(0:*), SHARED :: sharedFloat8
    INTEGER(kind=4), DIMENSION(0:*), SHARED :: sharedInteger4
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: threadID
    INTEGER(kind=4) :: offset
    INTEGER(kind=4) :: offset2
    INTEGER(kind=4) :: nelems
    threadID = mod(threadidx%x - 1,  warpSize)
    offset = (threadidx%x - 1) / warpSize / 8

    DO i1 = 0, 3, 1
      opDat1Local(i1) = opDat1Local(i1 + blockidx%x * 4)
    END DO

    DO i1 = 0, 6, 1
      opDat2Local(i1) = opDat2Local(i1 + blockidx%x * 7)
    END DO

    DO i1 = 0, 10, 1
      opDat3Local(i1) = opDat3Local(i1 + blockidx%x * 11)
    END DO

    DO i1 = threadidx%x - 1 + (blockidx%x - 1) * blockdim%x, setSize - 1, blockdim%x * griddim%x
      offset = i1 - threadID
      nelems = min(warpSize,  setSize - offset)

      DO i2 = 0, dimensions_s2023763597%opDat1Dimension, 1
        sharedFloat8(offset + (threadID + i2 * nelems)) = opDat1(threadID + (i2 * nelems + offset * dimensions_s2023763&
        &597%opDat1Dimension))
      END DO

      DO i2 = 0, dimensions_s2023763597%opDat1Dimension, 1
        opDat1Local(i2) = sharedFloat8(offset + (i2 + threadID * dimensions_s2023763597%opDat1Dimension))
      END DO

      DO i2 = 0, dimensions_s2023763597%opDat2Dimension, 1
        sharedInteger4(offset + (threadID + i2 * nelems)) = opDat2(threadID + (i2 * nelems + offset * dimensions_s20237&
        &63597%opDat2Dimension))
      END DO

      DO i2 = 0, dimensions_s2023763597%opDat2Dimension, 1
        opDat2Local(i2) = sharedInteger4(offset + (i2 + threadID * dimensions_s2023763597%opDat2Dimension))
      END DO

      CALL s2023763597(opDat1Local,  opDat2Local,  opDat3Local)

      DO i2 = 0, dimensions_s2023763597%opDat3Dimension - 1, 1
        sharedFloat8(offset + (i2 + threadID * dimensions_s2023763597%opDat3Dimension)) = opDat3Local(i2)
      END DO

      DO i2 = 0, dimensions_s2023763597%opDat3Dimension - 1, 1
        opDat3(threadID + (i2 * nelems + offset * dimensions_s2023763597%opDat3Dimension)) = sharedFloat8(offset + (thr&
        &eadID + i2 * nelems))
      END DO

    END DO

  END SUBROUTINE

  attributes(host) SUBROUTINE s3168439322(userSubroutine, set, opDat1, opIndirection1, opMap1, opAccess1, opDat2, opInd&
  &irection2, opMap2, opAccess2, opDat3, opIndirection3, opMap3, opAccess3)
    IMPLICIT NONE
    character(len=35), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set
    TYPE ( op_dat ) , INTENT(IN) :: opDat1
    INTEGER(kind=4), INTENT(IN) :: opIndirection1
    TYPE ( op_map ) , INTENT(IN) :: opMap1
    INTEGER(kind=4), INTENT(IN) :: opAccess1
    TYPE ( op_dat ) , INTENT(IN) :: opDat2
    INTEGER(kind=4), INTENT(IN) :: opIndirection2
    TYPE ( op_map ) , INTENT(IN) :: opMap2
    INTEGER(kind=4), INTENT(IN) :: opAccess2
    TYPE ( op_dat ) , INTENT(IN) :: opDat3
    INTEGER(kind=4), INTENT(IN) :: opIndirection3
    TYPE ( op_map ) , INTENT(IN) :: opMap3
    INTEGER(kind=4), INTENT(IN) :: opAccess3
    INTEGER(kind=4) :: opDat1Size
    INTEGER(kind=4) :: opDat2Size
    INTEGER(kind=4) :: opDat3Size
    REAL(kind=8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Device
    INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Device
    REAL(kind=8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Device
    INTEGER(kind=4) :: nblocks
    INTEGER(kind=4) :: nthreads
    INTEGER(kind=4) :: nshared
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4) :: warpSize

    IF (isFirstTime_real8Array_integer4Array_real8Array .EQV. .TRUE.) THEN
      dimensions_real8Array_integer4Array_real8Array%opDat1Dimension = opDat1%dim
      dimensions_real8Array_integer4Array_real8Array%opDat2Dimension = opDat2%dim
      dimensions_real8Array_integer4Array_real8Array%opDat3Dimension = opDat3%dim
      sizes_real8Array_integer4Array_real8Array%opDat1Size = opDat1%dim * opDat1%set%size
      sizes_real8Array_integer4Array_real8Array%opDat2Size = opDat2%dim * opDat2%set%size
      sizes_real8Array_integer4Array_real8Array%opDat3Size = opDat3%dim * opDat3%set%size
      isFirstTime_real8Array_integer4Array_real8Array = .FALSE.
    END IF

    nblocks = 200
    nthreads = 128
    warpSize = OP_WARP_SIZE
    nshared = 88
    nshared = nshared * nthreads
    opDat1Size = opDat1%dim * opDat1%set%size
    opDat2Size = opDat2%dim * opDat2%set%size
    opDat3Size = opDat3%dim * opDat3%set%size
    CALL c_f_pointer(opDat1%dat_d,  opDat1Device,  (/opDat1Size/))
    CALL c_f_pointer(opDat2%dat_d,  opDat2Device,  (/opDat2Size/))
    CALL c_f_pointer(opDat3%dat_d,  opDat3Device,  (/opDat3Size/))
    CALL s744293032<<<nblocks, nthreads, nshared>>>(dimensions_real8Array_integer4Array_real8Array,  sizes_real8Array_i&
    &nteger4Array_real8Array,  opDat1Device,  opDat2Device,  opDat3Device,  set%size,  warpSize)
    threadSynchRet = cudaThreadSynchronize()
  END SUBROUTINE

END MODULE GENERATED_MODULE

