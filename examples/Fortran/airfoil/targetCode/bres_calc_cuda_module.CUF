
module bres_calc_cuda_module

use OP2_C
!use constantVarsCuda
use cudaConfigurationParams
use cudafor

	type varSizes_bres_calc
	
	end type varSizes_bres_calc

	contains
	
	
		attributes(device) subroutine bres_calc ( x1, x2, q1, adt1, res1, bound )

			implicit none

			! formal parameters
			real(8), dimension(2), shared :: x1
			real(8), dimension(2), shared :: x2
			real(8), dimension(4), shared  :: q1
			real(8), dimension(1), shared:: adt1
			real(8), dimension(4), device :: res1
			integer(4), dimension(1), shared :: bound

			! local variables
			real(8) :: dx, dy, mu, ri, p1, vol1, p2, vol2, f

			dx = x1(1) - x2(1)
			dy = x1(2) - x2(2)

			ri = 1.0 / q1(1)
			p1 = gm1*(q1(4)-0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)));


			if ( bound(1) == 1 ) then

				res1(2) = res1(2) + (+ p1*dy)
				res1(3) = res1(3) + (- p1*dx)

			else

				vol1 =  ri*(q1(2)*dy - q1(3)*dx)

				ri   = 1.0 / qinf(1);
				p2   = gm1*(qinf(4)-0.5 * ri * (qinf(2)*qinf(2)+qinf(3)*qinf(3)));
				vol2 =  ri*(qinf(2)*dy - qinf(3)*dx);

				mu = (adt1(1)) * eps;


				f = 0.5 * (vol1 * q1(1)         + vol2 * qinf(1)        ) + mu*(q1(1)-qinf(1));
				res1(1) = res1(1) + f;


				f = 0.5 * (vol1* q1(2) + p1*dy + vol2* qinf(2) + p2*dy) + mu*(q1(2)-qinf(2));
				res1(2) = res1(2) + f;


				f = 0.5 * (vol1* q1(3) - p1*dx + vol2* qinf(3) - p2*dx) + mu*(q1(3)-qinf(3));
				res1(3) = res1(3) + f;


				f = 0.5 * (vol1*(q1(4)+p1)     + vol2*(qinf(4)+p2)    ) + mu*(q1(4)-qinf(4));
				res1(4) = res1(4) + f;
			
			end if

		end subroutine bres_calc
	
		attributes(global) subroutine op_cuda_bres_calc ( argSizes, &
																										  pindArg0, &
																											pindArg0Maps, &
																											pindArg1, &
																											pindArg1Maps, &
																											pindArg2, &
																											pindArg2Maps, &
																											pindArg3, &
																											pindArg3Maps, &
																											& parg0Maps, &
																										  & parg1Maps, &
																										  & parg2Maps, &
																										  & parg3Maps, &
																										  & parg4Maps, &
																										  & parg5Maps, &
																											& parg5DatD, &
																										  & pindArgSizes, &
																										  & pindArgOffs, &
																										  & blockOffset, &
																										  & pblkMap, &
																										  & poffset, &
																										  & pnelems, &
																										  & pncolors, &
																										  & pcolors &
																								  & )
			
			implicit none
			
			type(varSizes_bres_calc) :: argSizes
			integer(4), value :: blockOffset
			
			real(8), dimension(0:(argSizes%pindArg0Size)-1), device :: pindArg0
			integer(4), dimension(0:(argSizes%pindArg0MapsSize)-1), device :: pindArg0Maps

			real(8), dimension(0:(argSizes%pindArg1Size)-1), device :: pindArg1
			integer(4), dimension(0:(argSizes%pindArg1MapsSize)-1), device :: pindArg1Maps

			real(8), dimension(0:(argSizes%pindArg2Size)-1), device :: pindArg2
			integer(4), dimension(0:(argSizes%pindArg2MapsSize)-1), device :: pindArg2Maps

			real(8), dimension(0:(argSizes%pindArg3Size)-1), device :: pindArg3
			integer(4), dimension(0:(argSizes%pindArg3MapsSize)-1), device :: pindArg3Maps

			integer(2), dimension(0:(argSizes%parg0MapsSize)-1), device :: parg0Maps
			integer(2), dimension(0:(argSizes%parg1MapsSize)-1), device :: parg1Maps
			integer(2), dimension(0:(argSizes%parg2MapsSize)-1), device :: parg2Maps
			integer(2), dimension(0:(argSizes%parg3MapsSize)-1), device :: parg3Maps
			integer(2), dimension(0:(argSizes%parg4MapsSize)-1), device :: parg4Maps

			real(8), device, dimension(0:(argSizes%parg4DatDSize-1)) :: parg4DatD
			
			integer(4), dimension(0:(argSizes%pindArgSizesSize)-1), device :: pindArgSizes
			integer(4), dimension(0:(argSizes%pindArgOffsSize)-1), device :: pindArgOffs
			integer(4), dimension(0:(argSizes%pblkMapSize)-1), device :: pblkMap
			integer(4), dimension(0:(argSizes%pOffsetSize)-1), device :: poffset
			integer(4), dimension(0:(argSizes%pNelemsSize)-1), device :: pnelems
			integer(4), dimension(0:(argSizes%pNcolorsSize)-1), device :: pncolors
			integer(4), dimension(0:(argSizes%pColorsSize)-1), device :: pcolors

			
			

		end subroutine op_cuda_res_calc
	
		attributes(host) subroutine op_par_loop_bres_calc ( subroutineName, set, &
																											& arg0,   idx0, map0, access0, &
																											& arg1,   idx1, map1, access1, &
																											& arg2,   idx2, map2, access2, &
																											& arg3,   idx3, map3, access3, &
																											& arg4,   idx4, map4, access4, &
																											& arg5,   idx5, map5, access5  &
																										& )

	
	
		end subroutine op_par_loop_bres_calc

end module bres_calc_cuda_module